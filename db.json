{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":0},{"_id":"source/images/pic.jpg","path":"images/pic.jpg","modified":1,"renderable":0},{"_id":"themes/apollo-like/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/images/icon-reorder@2x.png","path":"images/icon-reorder@2x.png","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-200.eot","path":"fonts/kanit-v1-latin-200.eot","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-200.svg","path":"fonts/kanit-v1-latin-200.svg","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-200.woff","path":"fonts/kanit-v1-latin-200.woff","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-200.woff2","path":"fonts/kanit-v1-latin-200.woff2","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-700.eot","path":"fonts/kanit-v1-latin-700.eot","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-700.svg","path":"fonts/kanit-v1-latin-700.svg","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-200.ttf","path":"fonts/kanit-v1-latin-200.ttf","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-700.woff","path":"fonts/kanit-v1-latin-700.woff","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-700.woff2","path":"fonts/kanit-v1-latin-700.woff2","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-300.eot","path":"fonts/source-code-pro-v6-latin-300.eot","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-300.svg","path":"fonts/source-code-pro-v6-latin-300.svg","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-300.ttf","path":"fonts/source-code-pro-v6-latin-300.ttf","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-700.ttf","path":"fonts/kanit-v1-latin-700.ttf","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-300.woff","path":"fonts/source-code-pro-v6-latin-300.woff","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-300.woff2","path":"fonts/source-code-pro-v6-latin-300.woff2","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-regular.eot","path":"fonts/source-code-pro-v6-latin-regular.eot","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-regular.svg","path":"fonts/source-code-pro-v6-latin-regular.svg","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-regular.woff","path":"fonts/source-code-pro-v6-latin-regular.woff","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-regular.woff2","path":"fonts/source-code-pro-v6-latin-regular.woff2","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-regular.ttf","path":"fonts/source-code-pro-v6-latin-regular.ttf","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/js/archive.js","path":"js/archive.js","modified":1,"renderable":1},{"_id":"themes/apollo-like/source/js/preact.min.js","path":"js/preact.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/index.md","hash":"f5d5746a9fb10763c8fe04c0a976922e4cc608bb","modified":1450453816332},{"_id":"themes/apollo-like/.gitignore","hash":"86e5716e1776d439397011d871cc0ecc7fb16463","modified":1458054065376},{"_id":"themes/apollo-like/README.md","hash":"ea5acba40e351a0d68d26bf331ab846bccae47e8","modified":1453170864072},{"_id":"themes/apollo-like/_config.yml","hash":"5be94017c4823e4577c8b5dbc947890cacf452fd","modified":1465353128756},{"_id":"themes/apollo-like/webpack.config.js","hash":"b73b0eefa09c77b2605e307da36c5cde99898d00","modified":1465923504089},{"_id":"themes/apollo-like/.git/MERGE_RR","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1466013044249},{"_id":"source/404/index.md","hash":"351e2bafffa84cea49a7997ef988e08301b2cb31","modified":1445905707556},{"_id":"source/_drafts/promisifying-asynchronous-callbacks-with-bluebird.md","hash":"fe61b3f12b06703fba3995b638679ee7cf773175","modified":1447259646430},{"_id":"source/blog/index.md","hash":"be94eb3ac39df5f2884f9130c3aa52b25abe083f","modified":1450458270391},{"_id":"source/images/favicon.png","hash":"8d85d2a2e2ef8b99d5f1245e9d8ecb1de704d24b","modified":1451928267362},{"_id":"source/_posts/a-few-quick-command-line-tips-and-tricks.md","hash":"1ca6982d1a7219ae0b70fa75b24e67abb390660e","modified":1448114836568},{"_id":"source/images/pic.jpg","hash":"9e02681d98502ed15890a4444249302319dc974e","modified":1450285205474},{"_id":"source/_posts/asynchronous-tests-in-mocha-using-before-and-after-blocks.md","hash":"71b0f8840f753da548749d1c319ea3cd5e4f9904","modified":1448637667022},{"_id":"source/_posts/awman-1-1-1-multi-language-support-better-formatting-and-more.md","hash":"64ce8304dfaa414ef785967d48aae639f2c5ce13","modified":1455596177744},{"_id":"source/_posts/back-from-holiday-and-how-to-use-dead-time.md","hash":"acbb6af3f5c72a03257f8c561d46e30eb2fe04b7","modified":1457440705658},{"_id":"source/_posts/awman-arch-wiki-man-man-the-arch-wiki-offline.md","hash":"03e7ace61096979522a98e3466d95f909686b6ad","modified":1462020435614},{"_id":"source/_posts/checking-whether-a-file-directory-exists-without-using-fs-exists.md","hash":"d62f05e370749583f667adb465a1a7ccb7d1b7a1","modified":1458311496052},{"_id":"source/_posts/command-line-mdn-or-how-to-make-a-great-thing-even-greater.md","hash":"98953cc9d12dc429c3a64bc755889f6b90a3399e","modified":1459516482032},{"_id":"source/_posts/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim.md","hash":"b727f6074d376d13df11f221411594be9e204156","modified":1463432361531},{"_id":"source/_posts/es6-react-ultisnips-snippets-for-vim.md","hash":"07a7725ed0a22bb00642b1a7e4b0699b8eb200a2","modified":1450463440082},{"_id":"source/_posts/do-yourself-a-favor-and-modularize-your-vimrc-init-vim.md","hash":"5ab3e605f9023d935e8dfa83aa4a39f6244f0dea","modified":1452269959372},{"_id":"source/_posts/end-iifes-in-or.md","hash":"5de64d8d038711beb0d9aa67e4c768be4629970c","modified":1449687488663},{"_id":"source/_posts/fixing-the-reappearing-folders-problem-in-your-home-directory.md","hash":"91a601d47055812cd9c94e8ae026af2ba41a6ea5","modified":1450462458096},{"_id":"source/_posts/git-undo.md","hash":"abb51fec97ddb96c775157c119d1b2f0dca6fd57","modified":1452876551898},{"_id":"source/_posts/hexo-easy-edit-1-1-0-colors-drafts-and-dates.md","hash":"4769a34219daf18588c2f2606af628c40338fdab","modified":1448114836568},{"_id":"source/_posts/hexo-easy-edit-1-2-0-pages-cleanup-rename.md","hash":"a18810adcc5644cfd5c8067a52b436a20f2689bb","modified":1448114836568},{"_id":"source/_posts/hexo-tag-plugin-snippets-for-everyone.md","hash":"f1ec9a9dbd357f9a658b176b9d9775cd38cef357","modified":1450463449715},{"_id":"source/_posts/forwarding-mail-to-your-gmail-account-with-mailgun.md","hash":"fdaccb105946266c3f69e403457f6e91571684a0","modified":1450549477100},{"_id":"source/_posts/how-to-rename-a-published-npm-module.md","hash":"7de8c7506400933e93d68eb4a3a0057bec15479b","modified":1452526171685},{"_id":"source/_posts/how-to-set-up-mailgun-on-digital-ocean.md","hash":"f20456dcdee2c138d73ae6a257ee3bd19cccbc4f","modified":1450538870882},{"_id":"source/_posts/how-to-scrape-the-web-gently-with-node-js.md","hash":"0643c1a168d2182202bf375324a7f0272935825f","modified":1449153723348},{"_id":"source/_posts/how-to-use-shell-variables-in-awk.md","hash":"ec4e06b65816da75a2471b147c793748c78171bd","modified":1448114836568},{"_id":"source/_posts/huge-arch-update.md","hash":"46cad6f8d7b222aba9fa91737a66e5c74de8ee32","modified":1449927635505},{"_id":"source/_posts/i-have-been-to-the-mountain-top-making-code-beautiful.md","hash":"87294e70f2a36e073653b33e2bb523cc4f43cca7","modified":1453520778794},{"_id":"source/_posts/i-wrote-a-hexo-plugin-hexo-easy-edit.md","hash":"605d14a7a1027b4ab479c76da6dbd8d4684f697f","modified":1448114836568},{"_id":"source/_posts/kyle-simpson-s-advanced-javascript-course.md","hash":"b72e83d7796e4fd0ace5acb1017f37203e34fa41","modified":1453171374667},{"_id":"source/_posts/lint-as-you-type-with-neovim-and-neomake.md","hash":"4980c276110f828cc2d0f0aaaebb0b142f6f06ca","modified":1459629179672},{"_id":"source/_posts/linux-tip-of-the-day-temporarily-prevent-your-screen-from-going-to-sleep.md","hash":"7cafeeb6329d377b750109e0eb13700ef28c5177","modified":1453042594373},{"_id":"source/_posts/markdown2troff-regular-expressions-ftw.md","hash":"818a0a279d2e87f79ddabe61300c970ec7929b54","modified":1455806867817},{"_id":"source/_posts/linting-code-with-neovim-and-neomake-eslint-edition.md","hash":"761918dffae2a421ced9bcb6b2b061d373010254","modified":1459629157805},{"_id":"source/_posts/linting-code-with-neomake-and-neovim.md","hash":"8e3003623622c4c1a54d640df9025222b139f4f1","modified":1459629136845},{"_id":"source/_posts/no-more-nvimrc-neovim-folder-now-at-config-nvim.md","hash":"8ed2cc69da282c8f9e1d7e2f6ebf10db0e0d1c64","modified":1448114836568},{"_id":"source/_posts/new-version-of-pacman-released-updating-yaourt-and-package-query.md","hash":"467fac55e2f2f2646129d8ba84a64cfdf61cf606","modified":1454342848614},{"_id":"source/_posts/new-year-s-resolutions-and-predictions.md","hash":"ccf9a8020f6307ef60f3d008cadf6fda4bb486ca","modified":1452043582577},{"_id":"source/_posts/normal-ternaries-vs-nested-ternaries.md","hash":"d941034e02711addea674aa2736fb8723ce512f6","modified":1448114836568},{"_id":"source/_posts/offline-arch-wiki-and-arch-wiki-md-repo-online.md","hash":"83fc5cfb31421db80a8e323e10e55b8ab8921a2b","modified":1450462446812},{"_id":"source/_posts/playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process.md","hash":"cdb0b15614cb9329966a3e8ff5ec36f1b71de766","modified":1465399222664},{"_id":"source/_posts/quick-command-line-tips-and-tricks2-finding-and-processing-files.md","hash":"798441ef505cd61fc67c8348d7c802ec1d259e43","modified":1448122344326},{"_id":"source/_posts/richard-stallman-on-piracy.md","hash":"63bf3b1574c6e016154ae1cb0469da9d3a666e56","modified":1448114836568},{"_id":"source/_posts/reboot.md","hash":"9e0b988b6af89196041ebb1e5c2c17ce34c2399b","modified":1448114836568},{"_id":"source/_posts/the-new-on-github-blues-and-my-new-project-local-command-line-arch-wiki.md","hash":"00876af4a04c90ca3524dab6645716a4b4d89902","modified":1448495407213},{"_id":"source/_posts/simple-promise-example.md","hash":"67babe61ef9d0e9f667efd1c42ad67e44e47c687","modified":1448114836568},{"_id":"source/_posts/three-things-i-learned-from-rewriting-hexo-easy-edit.md","hash":"48d9ed2137eb0e8640b4cf87c0caaf5dc289a7af","modified":1448114836568},{"_id":"themes/apollo-like/.git/FETCH_HEAD","hash":"6bf422180aea295da17a4ac017e94d5fdca391b3","modified":1446000619868},{"_id":"themes/apollo-like/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1445945262512},{"_id":"source/_posts/writing-a-fibonacci-implementation-in-javascript.md","hash":"02801702d206957a7553390d98b348d4ebc2f5f5","modified":1457978705053},{"_id":"themes/apollo-like/.git/ORIG_HEAD","hash":"fb84e7f77b04ae747f1e153a8d165f86bb5362c0","modified":1453220774325},{"_id":"themes/apollo-like/.git/config","hash":"32039992497c36bb3fe34b70da1501dbfee848b2","modified":1466011066051},{"_id":"themes/apollo-like/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1445945261012},{"_id":"themes/apollo-like/.git/index","hash":"e7af501e34bf35de29a391cbcee62bfa37ffb695","modified":1466013044246},{"_id":"themes/apollo-like/.git/packed-refs","hash":"6f299e362770d70250edb034cd187c9f3988f689","modified":1453170968328},{"_id":"themes/apollo-like/layout/archive.ejs","hash":"0beb43eef621bbe4303fa62d499ec584f0c28551","modified":1465829399925},{"_id":"themes/apollo-like/layout/blog.ejs","hash":"5f39860c87600f39c828754434e33c2fd7b8a26a","modified":1450457718680},{"_id":"themes/apollo-like/layout/category.ejs","hash":"5002e1c859ec3653bde14dbb2cb8b901760ab2c3","modified":1450458339251},{"_id":"themes/apollo-like/layout/index.ejs","hash":"e64f61665e76bdf317f993f0262d297f6c2a50e8","modified":1465345887846},{"_id":"themes/apollo-like/layout/layout.ejs","hash":"26be60598b070730e36e495e6fca2d3633848ad0","modified":1447336998711},{"_id":"themes/apollo-like/layout/page.ejs","hash":"14d26b8d92e6217c6b20fe394237e7a35dd6b344","modified":1447296634316},{"_id":"themes/apollo-like/layout/post.ejs","hash":"6eb70f9fddc38a360da1e3d68cb6b3d4c61d9663","modified":1447294681924},{"_id":"themes/apollo-like/layout/tag.ejs","hash":"c1438821453ce7a2012e69860575f97956013fde","modified":1450458346351},{"_id":"themes/apollo-like/webpack/app.js","hash":"571a81c40bf3c31c1e3e1c1fe2d82d8400f06859","modified":1466012334601},{"_id":"themes/apollo-like/webpack/archive.js","hash":"b457e263c4646b33bd885726d8f8ce131bc00304","modified":1465925336038},{"_id":"themes/apollo-like/webpack/polyfills.js","hash":"8f16e414c5da49b32ef65a7a2bcf1c3a45ff28d7","modified":1466009787161},{"_id":"themes/apollo-like/.git/COMMIT_EDITMSG","hash":"5967ea74f789ddf9e11617f2a2244a7d3e4b90f4","modified":1466013044246},{"_id":"source/_posts/asynchronous-tests-in-mocha-using-before-and-after-blocks/screen.png","hash":"d89d6fbfa671c338a1b5f053f399cf9f360ba606","modified":1465579232614},{"_id":"source/_posts/awman-arch-wiki-man-man-the-arch-wiki-offline/helpscreen.png","hash":"61d15a418d7df4e80acb4855421280a00e7f041e","modified":1465578666858},{"_id":"source/_posts/awman-arch-wiki-man-man-the-arch-wiki-offline/manscreen.png","hash":"0157ecc3fc1e706f15ddf30ecc779db3f3361522","modified":1465578667591},{"_id":"source/_posts/awman-arch-wiki-man-man-the-arch-wiki-offline/menu.png","hash":"1e355447f8634ca68febddc678177b7a92ff76b7","modified":1465578666958},{"_id":"source/_posts/checking-whether-a-file-directory-exists-without-using-fs-exists/nodejs-new-pantone-black.png","hash":"ebd53ef02265153fdf582212dae6875eb1f0ddfe","modified":1465578671911},{"_id":"source/_posts/command-line-mdn-or-how-to-make-a-great-thing-even-greater/example.gif","hash":"14ede092fbb393a39ea6c52b94524d0b02202d9f","modified":1465578666858},{"_id":"source/_posts/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/autocompletion.png","hash":"b702b4974c59958f43ffaf777f64a7dc5c91e364","modified":1465578668374},{"_id":"source/_posts/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/beautiful.png","hash":"c13671fd259f039085e59f3d022b8136938963a6","modified":1465578668968},{"_id":"source/_posts/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/autotern.png","hash":"52acb11a79d9b727e953465e5ba8d36aadb60221","modified":1465578667294},{"_id":"source/_posts/do-yourself-a-favor-and-modularize-your-vimrc-init-vim/tools.jpg","hash":"a46bfc5fa6edf66c2084a489fc532e0e11c52a2a","modified":1465578666858},{"_id":"source/_posts/fixing-the-reappearing-folders-problem-in-your-home-directory/user-dirs.dirs.png","hash":"6520f1b0b4560b24e3c943d597d5c3a642438849","modified":1465578667814},{"_id":"source/_posts/fixing-the-reappearing-folders-problem-in-your-home-directory/my-home-dir.png","hash":"f89dfb565c6cb4e012603fd067c1d5b9f9d64957","modified":1465578666858},{"_id":"source/_posts/forwarding-mail-to-your-gmail-account-with-mailgun/DO.logo.png","hash":"6636c09ba5cac64c9a4537ddfb99f11cddd0e715","modified":1465578668631},{"_id":"source/_posts/hexo-easy-edit-1-1-0-colors-drafts-and-dates/screen.png","hash":"a39e475d4d0105d727c91f84f664c516391dee62","modified":1465579285607},{"_id":"source/_posts/hexo-tag-plugin-snippets-for-everyone/screenshot.png","hash":"b2db157a04527bb16cce0660de44adc439138c94","modified":1465578669544},{"_id":"source/_posts/how-to-rename-a-published-npm-module/communicate.jpg","hash":"a3a7d99cec8a090ce8a9d67de9a70cf09345111c","modified":1465578666858},{"_id":"source/_posts/how-to-rename-a-published-npm-module/npm-logo.svg","hash":"306192099eb433c8f2cd3839a074b46bc30593e0","modified":1465578666574},{"_id":"source/_posts/how-to-set-up-mailgun-on-digital-ocean/mailgun.png","hash":"3d27f5fe37b79502d0ceb791189ea00ce265a009","modified":1465578670008},{"_id":"source/_posts/huge-arch-update/arch-update.png","hash":"dbf3b66dfc8b520e66596f6b54a3d4fa3c17ae5f","modified":1465579442020},{"_id":"source/_posts/i-wrote-a-hexo-plugin-hexo-easy-edit/hexo-easy-edit.png","hash":"fa3fc66723514188db753dbc50e3afb4fcb89393","modified":1465578668031},{"_id":"source/_posts/kyle-simpson-s-advanced-javascript-course/You-dont-know-JS.png","hash":"5abde845ff0717b914047254e90cbdd9e0b6cd5d","modified":1465578668081},{"_id":"source/_posts/lint-as-you-type-with-neovim-and-neomake/autocmd.png","hash":"31e0f9e3f078b0570a230fa2a324843186be7428","modified":1465578670404},{"_id":"source/_posts/how-to-rename-a-published-npm-module/broken.jpg","hash":"3068af5ee1daf9ab8298887feed66cff28f01a7c","modified":1465578666858},{"_id":"source/_posts/linting-code-with-neomake-and-neovim/neomake_example.png","hash":"66cf7e7ebff40f655acd3f2cea1209b6475adadd","modified":1465578669294},{"_id":"source/_posts/playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process/mpv.jpg","hash":"d2e4e8636a0b689ba10b62dd63f76745a4708cdd","modified":1466007524293},{"_id":"source/_posts/quick-command-line-tips-and-tricks2-finding-and-processing-files/commandline.png","hash":"4040e46ff5dea669fcad3cc88995bc50284e8a02","modified":1465578667014},{"_id":"source/_posts/the-new-on-github-blues-and-my-new-project-local-command-line-arch-wiki/think.jpg","hash":"ddb198a8042f8def52f0f86fefa78b39b54a1d95","modified":1465578666874},{"_id":"themes/apollo-like/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1445945261012},{"_id":"themes/apollo-like/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1445945261012},{"_id":"themes/apollo-like/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1445945261012},{"_id":"themes/apollo-like/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1445945261012},{"_id":"themes/apollo-like/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1445945261012},{"_id":"themes/apollo-like/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1445945261012},{"_id":"themes/apollo-like/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1445945261012},{"_id":"themes/apollo-like/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1445945261012},{"_id":"themes/apollo-like/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1445945261012},{"_id":"themes/apollo-like/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1445945261012},{"_id":"themes/apollo-like/.git/logs/HEAD","hash":"70327e1a40f587b8066aeaf0266485f4b0ab8d88","modified":1466013044249},{"_id":"themes/apollo-like/.git/refs/stash","hash":"1abd43b4f2e115c0d548487574d9d1ec9153f972","modified":1446606093198},{"_id":"themes/apollo-like/layout/_partial/after-footer.ejs","hash":"d6b839d1260a00bd2f2dd58ac6eb37256f59e834","modified":1465923935035},{"_id":"themes/apollo-like/layout/_partial/archive.ejs","hash":"c0df7a75d891d5f438ebe9e671091cffef4cd529","modified":1465925327698},{"_id":"themes/apollo-like/layout/_partial/article.ejs","hash":"235a46bde20e04f00999b246fcf9dc5f7228c537","modified":1447434297258},{"_id":"themes/apollo-like/layout/_partial/footer.ejs","hash":"61a1a07fda24ef65e2ee72fbe6482d1c9e570d7d","modified":1465401401630},{"_id":"themes/apollo-like/layout/_partial/google-analytics.ejs","hash":"98a27ce8a3d3e4596787b8661efc2a59b182c13a","modified":1445945262518},{"_id":"themes/apollo-like/layout/_partial/head.ejs","hash":"57bda6ba05dc944b86ef4235cb509e3c722566aa","modified":1465830002316},{"_id":"themes/apollo-like/layout/_partial/header.ejs","hash":"d803097c691315178c875a99bfd10db6ccb49b6f","modified":1466011024211},{"_id":"themes/apollo-like/source/css/style.styl","hash":"9a9a198af840edf4c8e2c9af509612249af9aacc","modified":1465925306195},{"_id":"themes/apollo-like/source/images/icon-reorder@2x.png","hash":"dda25f0988cd759b200d0c05af30cc9475621060","modified":1445945262525},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-200.eot","hash":"d0eb1797755930c1f11a95c463926496c2db3c39","modified":1459340156000},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-200.svg","hash":"cf98771fe071ed3189441e5c4228a9c72b873f51","modified":1459340156000},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-200.woff","hash":"9d31f283c439e74db0dc3c4642620e9e8f117564","modified":1459340156000},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-200.woff2","hash":"798e3cc32bc4c0d20b9ffea18a6b162df4cef3d9","modified":1459340156000},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-700.eot","hash":"6247810da774967b3b9b16f6a4dcacb399250935","modified":1459340156000},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-700.svg","hash":"bb8c4ae54a1b19a2bb6b96b045578e02b1508392","modified":1459340156000},{"_id":"themes/apollo-like/layout/_partial/page.ejs","hash":"ff21772021c579b870cbb497542afbe36de7fa5a","modified":1447294207847},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-200.ttf","hash":"78d32ce60dc58ca502dce5fbf77a4b5062cc69be","modified":1459340156000},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-700.woff","hash":"057609c3a50aa88b5ac1f055f0d15b2d034f8bdb","modified":1459340156000},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-700.woff2","hash":"e93531f44858ba558aef9f5542b5eb6a6a3b666d","modified":1459340156000},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-300.eot","hash":"b3812b62f7214628a120bb765d0e6d8f70be0083","modified":1459340248000},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-300.svg","hash":"dc25f57c4de0fcae035012eb8e653bebe5e830a7","modified":1459340248000},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-300.ttf","hash":"7cff2137b93e7234127f4170454d410547655ea3","modified":1459340248000},{"_id":"themes/apollo-like/source/fonts/kanit-v1-latin-700.ttf","hash":"efa9359e8a4f1b379c500c3d177c257aac5891ea","modified":1459340156000},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-300.woff","hash":"2e5c154e241a723a799c488a7d11df77ba54ebba","modified":1459340248000},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-300.woff2","hash":"93d4a71e32d661852e4b593ea69ff32c08a894ea","modified":1459340248000},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-regular.eot","hash":"990b93fab2f97331eba0276199d385e4c4f3dac9","modified":1459340248000},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-regular.svg","hash":"756e3862ff91e7c5b7886009c3aaebbeda14f57e","modified":1459340248000},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-regular.woff","hash":"2ec709fdf8a05fee9ca636d26eb2559dccdb6ea5","modified":1459340248000},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-regular.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1459340248000},{"_id":"themes/apollo-like/source/fonts/source-code-pro-v6-latin-regular.ttf","hash":"bcf6fb82b8f333297cbbc9fae9c48d2c5fe807f6","modified":1459340248000},{"_id":"themes/apollo-like/source/js/app.js","hash":"a7471d846ca22c03dd446ffde65b1feff03d61ad","modified":1466013145969},{"_id":"themes/apollo-like/source/js/archive.js","hash":"1b5c749cccba53afd4369a697c366d7099db61c1","modified":1466013145969},{"_id":"themes/apollo-like/source/js/preact.min.js","hash":"1d6e7338f15f4d37cdcaf873401c7de1126359c5","modified":1461762453000},{"_id":"themes/apollo-like/webpack/components/archived-post.js","hash":"03e66bda330dddf81b3aa2d28efb6742283de7bb","modified":1465922772044},{"_id":"themes/apollo-like/webpack/components/header.js","hash":"69e4f3ba3c47bbf8f8381f9c5d7a9382761ccebf","modified":1465398123822},{"_id":"themes/apollo-like/webpack/components/mobile-menu.js","hash":"de0d927f08e62b77fee9fac70360a7d85a028fd3","modified":1465398136845},{"_id":"themes/apollo-like/webpack/components/nav.js","hash":"7774ba1502887ba2b97aa7a4d37b70b057caf2ac","modified":1465400487949},{"_id":"themes/apollo-like/webpack/components/projects-menu.js","hash":"29af0e43290b52404afb39a310a4e21b4526f307","modified":1465401171167},{"_id":"source/_posts/playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process/mpv.website.jpg","hash":"19074555cb4245b48f9aa92fd95d9c2838692316","modified":1466007308927},{"_id":"themes/apollo-like/source/css/_partial/index.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465925167379},{"_id":"themes/apollo-like/.git/logs/refs/stash","hash":"e789bf64c5b71d1df246904caa671992072096da","modified":1446606093198},{"_id":"themes/apollo-like/.git/refs/heads/master","hash":"9ff6797df96d57ed5e17594f3a14453fee2bde27","modified":1466013044249},{"_id":"themes/apollo-like/source/css/_partial/archive.styl","hash":"92f65a5ed60b0b278d8a00cef9936d7145c04dfe","modified":1465925164002},{"_id":"themes/apollo-like/source/css/_partial/article-gallery.styl","hash":"925ee764b23984d3d0751b623718341b07d9dff1","modified":1445945262518},{"_id":"themes/apollo-like/source/css/_partial/article-nav.styl","hash":"467abf867314f1b0bdb5e7b7c51681ba87271a8a","modified":1446563158649},{"_id":"themes/apollo-like/source/css/_partial/article.styl","hash":"ea593bb2f3e40818b509d7da9cafdb4cd61bcb18","modified":1452818996177},{"_id":"themes/apollo-like/source/css/_partial/footer.styl","hash":"8752eb524a5b9954bc1dc236b9b935983569d6b4","modified":1446777062630},{"_id":"themes/apollo-like/source/css/_partial/header.styl","hash":"c9b23bfb3bb171599b0b3ee43dcd0a96775ec854","modified":1466012701130},{"_id":"themes/apollo-like/source/css/_partial/rwd.styl","hash":"96ddbe6de22850d09987f4a18f341695e4808e90","modified":1466012667543},{"_id":"themes/apollo-like/layout/_partial/post/category.ejs","hash":"1f89a492c9af6d034b337dfd3729ec4056cfd853","modified":1446907616863},{"_id":"themes/apollo-like/layout/_partial/post/date.ejs","hash":"5853090af0d8065e346f756729738d458282b452","modified":1445945262518},{"_id":"themes/apollo-like/layout/_partial/post/gallery.ejs","hash":"36e8d8b320e4dfd429b12c9b91aed8642defc610","modified":1445945262518},{"_id":"themes/apollo-like/layout/_partial/post/nav.ejs","hash":"29730be7d65618e2b4ec10cf26493c10951e4a00","modified":1446038119177},{"_id":"themes/apollo-like/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1446000603362},{"_id":"themes/apollo-like/layout/_partial/post/title.ejs","hash":"eea148c381ff47ea0d3f3ef517d0bae61c7516e0","modified":1446913061524},{"_id":"themes/apollo-like/source/css/_bass/bass.styl","hash":"d0638fa134b52088d54de7b76bbb8d7794b73b85","modified":1446913581044},{"_id":"themes/apollo-like/source/css/_bass/highlight.styl","hash":"e219d06a481f1b27933dcfcdb04e997470133fcc","modified":1458054301736},{"_id":"themes/apollo-like/source/css/_bass/theme.styl","hash":"c681e76a1f5d1d1ac84234fb27b2b22d78f4ecc3","modified":1450194439835},{"_id":"themes/apollo-like/source/css/_bass/variables.styl","hash":"5f8051afcae4334e561f9fc62d72a4cf9736dd5a","modified":1459345811032},{"_id":"themes/apollo-like/.git/objects/00/0350b6f0a77bd8c0c346ef9a6e0000de205720","hash":"976fb2e46b5805fe98f3d4ad765148618e22440f","modified":1446056005064},{"_id":"themes/apollo-like/.git/objects/00/455873b0be4ea68154c3ea791c6b48c2f1b52a","hash":"87d17524ba8f2baa11943d352fcd293edb64d9e9","modified":1450194717564},{"_id":"themes/apollo-like/.git/objects/00/b4643ac80968732e7457b88d79da95e95850d6","hash":"96dcc76b0de2f08dc0eb8631417e708fcef8a546","modified":1447297941659},{"_id":"themes/apollo-like/.git/objects/01/0deef0fcca191cf025c4dffe7e0e8c94431ba2","hash":"f27e33d57e4725a8313b0a558cf5c4177e6d6925","modified":1446041917423},{"_id":"themes/apollo-like/.git/objects/01/158a942a0722562e623fb9710457c9f3302325","hash":"25a2d25fc80b54ebd890f40470a061b4fd817933","modified":1446568190128},{"_id":"themes/apollo-like/.git/objects/01/281402ad0ef36977c36fcb160f8c26cb50c45d","hash":"6297224218f1e0d3ec313c14b2a404929a0cb8c6","modified":1446568221451},{"_id":"themes/apollo-like/.git/objects/01/48102116caf6d7a470b34d44e23c9261bb24d2","hash":"44fd9eeab724afa25546a53e36bf97edfc7b756f","modified":1466013001809},{"_id":"themes/apollo-like/.git/objects/02/3932edf72f898794bf718d75ff9135dc84b9d1","hash":"fa88f45d5a3b20efdbade760d52551adb1aa1bfd","modified":1446734937207},{"_id":"themes/apollo-like/.git/objects/02/628ebaf92da45b8a176ca146d0568fb4322de0","hash":"d9e2871857c0fb5b451b5816f6116a28d57a9dc9","modified":1452085002790},{"_id":"themes/apollo-like/.git/objects/02/7e93e2f829499bbd09140695cbd1b7d00807b8","hash":"35e40990a3d5d7092113cce9e818f553cc2a95ea","modified":1459345856402},{"_id":"themes/apollo-like/.git/objects/02/8c098db73047701c4200a13d2e95bc972d17e4","hash":"a0372037fb07963c847efb2e50bda469ad60d484","modified":1465346412318},{"_id":"themes/apollo-like/.git/objects/02/91925d58cf84f3e59923f5dd5c8e0eed263ab4","hash":"c9f6c165be74cf161569cd7f914e1877fcf3af87","modified":1447380506988},{"_id":"themes/apollo-like/.git/objects/02/c01aa11c509af0db1f838cf7fba37f2341f9fb","hash":"62942707e715089e328a38877d1d086ad1b23008","modified":1447510080241},{"_id":"themes/apollo-like/.git/objects/03/71052d5c600c1e689f3ae8db761678db59a2d4","hash":"fe11bc11dc56ec095a58ce62ea3e35ba3f3b6a7f","modified":1446041980900},{"_id":"themes/apollo-like/.git/objects/04/16dc46e0eed113c4029018f356388718cb7f6e","hash":"f541710c89b09a01e717954f970fb2ed3e09cf83","modified":1465346994784},{"_id":"themes/apollo-like/.git/objects/04/44a793feb4009aad56c6335ed7bfb342c3cea5","hash":"4594b54424c8ef367ce1080dda892aec9ce437bf","modified":1446913124790},{"_id":"themes/apollo-like/.git/objects/04/739a9da1e78747afef5474f484bc9c9fa43787","hash":"4c2e2ce00b1ea7f3481bff9d0ca0200fd24eb5f7","modified":1446913124790},{"_id":"themes/apollo-like/.git/objects/04/a9c081fd95ddca712579d2bae85fdcd983c5b9","hash":"889eecd07734a4b4082312a06530e1d082b542a6","modified":1452788594523},{"_id":"themes/apollo-like/.git/objects/05/d98e618c0e164292ec0d17a6b2b992febe424b","hash":"0d73a00acf718e97c9b6c1d047945dbffc7ad045","modified":1446041917427},{"_id":"themes/apollo-like/.git/objects/06/0d140bff9cfe1571750686f9bd11f6c27ed249","hash":"ce8330120cf56c636bacda017afeb8a71d87a217","modified":1452788594526},{"_id":"themes/apollo-like/.git/objects/06/1f92f5f8ea12620d4a0d9777c407dc47af1c4d","hash":"f3c70731b1c1803021436b20c267c41fc63ecfa5","modified":1450194717564},{"_id":"themes/apollo-like/.git/objects/06/598bf3d460aaf62229c096a3aa5e9323952ed1","hash":"73eb39ac6b8992db4b0033dea8c9f5806a6b2971","modified":1446037420841},{"_id":"themes/apollo-like/.git/objects/06/a7ddb1bf21a9f25e80c41f2e55ebaf7459fb87","hash":"2ff6298c14d4dcfbb544cb37288f7908a87c25d0","modified":1446000223579},{"_id":"themes/apollo-like/.git/objects/07/da05496bd7d3db8ded12dcae20b6cdf6b988f3","hash":"41769ac2d09ca5fd379f3274f68fa8a59ecb8e6c","modified":1452788594526},{"_id":"themes/apollo-like/.git/objects/08/10c3a9c447b025f1994abedc7f99435468cef8","hash":"3cb043791cbefb3e0188abf6398ffb56bedec423","modified":1465923127853},{"_id":"themes/apollo-like/.git/objects/08/30ea2271a9ec38afcfebf2b3d30bb90360dbce","hash":"6526adfdd6d4cab4617e2860b06d8ee127189127","modified":1458313149075},{"_id":"themes/apollo-like/.git/objects/08/4349bb1823384d4652eb83be8aba30c07dc0cc","hash":"154613c1330d4a51a034807e02f9b0823037db2c","modified":1446000223575},{"_id":"themes/apollo-like/.git/objects/08/683b4724a126f1c8066f811fc77e4dc3004109","hash":"75d42226ecc8cdd7401c6f99751d55f379da28b3","modified":1446846125741},{"_id":"themes/apollo-like/.git/objects/08/8bfb15db5de4fb49486d333b957a6e37eab589","hash":"f8f1bdfe5dbd90f42bdff2c58114f0a3b1094440","modified":1453171273057},{"_id":"themes/apollo-like/.git/objects/09/3cbb807552207a1a399ae296b52719c6bf1dcb","hash":"a415eaec0304b1361820338fed3d8a70dca2b570","modified":1458313158205},{"_id":"themes/apollo-like/.git/objects/09/557b7bd30013e37415da7f4266d5b9c8a98288","hash":"99ca8e033b9d5c9574aba22951f421e711896848","modified":1446568179915},{"_id":"themes/apollo-like/.git/objects/09/ffec302e7783a13ef75394d4498f54a953c1e7","hash":"863abae7788e0d2332f4175e234b7225851f130b","modified":1446663529499},{"_id":"themes/apollo-like/.git/objects/0b/23d34f563f6c03fda382b02c0880c3bdce8195","hash":"eb5e48098fd4d0d50a5b72d078937ef338d516f3","modified":1459345877758},{"_id":"themes/apollo-like/.git/objects/0b/ae0d38a9b7626b6676a1a4ab779f41c494927a","hash":"f6918a332c7ba458126cc00d7d68a984fdb09c92","modified":1446833407161},{"_id":"themes/apollo-like/.git/objects/0b/b2e20a8e7eec84e3243652482cd03702a3212e","hash":"c99c8d640f3311e9a1b93a5ce429f39ef0fc21fd","modified":1453170986541},{"_id":"themes/apollo-like/.git/objects/0d/201961e9cfb66378aa96de0e9b5e32feb24ec8","hash":"d53853603f99d9e00fe18ad9cbcb09b403fd5107","modified":1447510080248},{"_id":"themes/apollo-like/.git/objects/0d/762fa4f093fecc0fd7a1ff09f0b907f547314b","hash":"796cf49e9a8b958a81f2d9a0d76587766118cce6","modified":1446734920217},{"_id":"themes/apollo-like/.git/objects/09/a86ded2166bdf60735d5dcf81013b7c37aff4b","hash":"b8c161e80382fc92df2ca5cf30d6eb224f2c7d40","modified":1446041917427},{"_id":"themes/apollo-like/.git/objects/0d/8f4e2bcb71540135cf754fd11799c7e31ce3ed","hash":"fc8ceaa6b0321653e58f44fc83cfd20efb777d3d","modified":1459345856395},{"_id":"themes/apollo-like/.git/objects/0d/e56e519d1ff3536b4ee3732abd2cd42d927867","hash":"7615271bc63207dc119b7ff24aeecce95d1aeb11","modified":1465923127843},{"_id":"themes/apollo-like/.git/objects/0e/18377826a36b8fd34ee160317dc63674b240a3","hash":"32d960b36300e97daf1cf6e145c868ac7d9a842a","modified":1446913147054},{"_id":"themes/apollo-like/.git/objects/0e/213903660def68f4237ccd177567c49bd11db6","hash":"1b80e14a918c104316ff9ba73fdcd79f4a407d54","modified":1446606093194},{"_id":"themes/apollo-like/.git/objects/0e/287ae86bbc9a3fb6b157b38d6f55cf7b79236d","hash":"8bb12bfac89aa127dd8dc5c40aed48308397e125","modified":1458054370509},{"_id":"themes/apollo-like/.git/objects/0e/6ef5e5db188c7763f6ab8886c768dd9a94b81b","hash":"34335d00c62f7335663e4e40f2fe4c34328345f1","modified":1465401520054},{"_id":"themes/apollo-like/.git/objects/0e/87ac4ff3f10dc2bdc876972e600044fb77dad2","hash":"926b22250db64ffe57812449805c6e9f4f3f88a4","modified":1452788594526},{"_id":"themes/apollo-like/.git/objects/0e/dbfcd7a96aaf587e816a543be96df79aa6c2b6","hash":"205c45628b99a8ff1dc3406f336b7bca48ad781f","modified":1447380655821},{"_id":"themes/apollo-like/.git/objects/0f/8707fadd99c6fefd5d4435e26ca17dba875386","hash":"17a2bfcfbc77ea3ccc8ee15eb5c6a7870ebc76b4","modified":1465346412315},{"_id":"themes/apollo-like/.git/objects/10/816192c29f9c1a8a2ddf5825edcf405cf65ea4","hash":"d168f45261479de3ea88b3d84af32af468dfbe8d","modified":1452876625508},{"_id":"themes/apollo-like/.git/objects/10/9a40a8842f044ac6bb4685368fae7e11d4e130","hash":"24c2bb8f711343a321807f0b6a58a53bde75c2e7","modified":1446914405645},{"_id":"themes/apollo-like/.git/objects/10/9dca50cd01da7bc9011a5a3517953babc35ff1","hash":"0de59991373528166230066d1c2d92595283b589","modified":1447297903973},{"_id":"themes/apollo-like/.git/objects/10/b807983aa2ea92dc847b249e45f1982527545e","hash":"386d3cc21ed11b03afbbc42f2ffdd08688cb28da","modified":1446833383181},{"_id":"themes/apollo-like/.git/objects/10/df96651da927409d1159975808eea101ac5bd9","hash":"4b98b5421b67a3ecee6ecbbd954ff29d8b27cf4b","modified":1465480731651},{"_id":"themes/apollo-like/.git/objects/11/8e92ca8b1142531e843963da72b97cfcab666b","hash":"237ad4a7d45e248b7f37581c339c52559ec27cb4","modified":1459345856405},{"_id":"themes/apollo-like/.git/objects/11/d7e735404c6bd74e24c85fdb571d8071e357d2","hash":"39c573049430123fac213efbb5404c6dbe8625cb","modified":1446782406104},{"_id":"themes/apollo-like/.git/objects/11/e8b1ba20d77c656d45fe14bea907cba2137b66","hash":"69d47775e04c79a47ac43864b060f358d6906662","modified":1465401617000},{"_id":"themes/apollo-like/.git/objects/12/0a54c7afa71155ddb147d43817bdd723eb68c7","hash":"5228e5de0ff8198206a3107f604867dc1376b1e8","modified":1446833407161},{"_id":"themes/apollo-like/.git/objects/13/cb76629e53a118f282b3ae88260e5d2e5d5c13","hash":"f6ffeaa25ce7190d16b3b6b7f2b574b38a7f626d","modified":1445996948058},{"_id":"themes/apollo-like/.git/objects/13/d86cf5984aa223aef8a94d50a9922921edb396","hash":"cd46934c9b13810a58868ab074c1537f592eecc2","modified":1452265972035},{"_id":"themes/apollo-like/.git/objects/14/808e2d8be608ed74f34e9592d67d0717bca278","hash":"e9f0ff561e1bde0b819d16fb3941210d760ff07b","modified":1465401614093},{"_id":"themes/apollo-like/.git/objects/14/e7cdfa60fd91096b9e9a9d1afce84aacf4dbf8","hash":"5b6f90e6ca2856c4fbfdaa286d6f53e42c3ddf01","modified":1446917104669},{"_id":"themes/apollo-like/.git/objects/14/81d1f1b9edc4b79e78e33be4f1bb7d39d12d14","hash":"5fa3635e334cf9ec7a3ead89d33ff4607b51bb1b","modified":1459345856405},{"_id":"themes/apollo-like/.git/objects/15/356025fceef3496c7ff23d894d061cf528ed0e","hash":"92b608f8c3f5846047b06f96a8b7c5f38337f510","modified":1446086740384},{"_id":"themes/apollo-like/.git/objects/15/7a9c31d9b06cd3f201da67e61da1b108effb56","hash":"cdd408eead61d8939425e3a77f7c94f83ad2a99f","modified":1465923127857},{"_id":"themes/apollo-like/.git/objects/15/f458a1dd7b6cade2d15069818bbab4552d08d8","hash":"d58d0b01df9cceeb53a3b6bf76141081fe62606d","modified":1446606326467},{"_id":"themes/apollo-like/.git/objects/16/2a6335ec07f45c176d9e29b14bca34752f1585","hash":"10cebd9b6ca6ee65ecafb5cd807c7cc64e258237","modified":1446917104673},{"_id":"themes/apollo-like/.git/objects/16/893346c4f955ecd75d7d9617703b5748aa75d4","hash":"de6d17c18038cf7161a23e10a151b8a0a4be4cba","modified":1446561945832},{"_id":"themes/apollo-like/.git/objects/17/7b013883fb0ea722f1026c11287fd6104dd5d6","hash":"508c2d77b00d82cdfcb5ecae3753022cc7d4f7b4","modified":1447084926139},{"_id":"themes/apollo-like/.git/objects/17/fd8df47a6d11f07460e473d920c0f25bcc475b","hash":"763925d28daa99bda00402658f015b49c15a7a4f","modified":1447510080245},{"_id":"themes/apollo-like/.git/objects/18/0d512119ad2efdaf141692baefeec3eaac0879","hash":"d3fa4c997f73dfeef188d26b54f2325e388a75e2","modified":1452788594526},{"_id":"themes/apollo-like/.git/objects/18/3252d461525a58952f459a977d25ce35b41b66","hash":"0d0cdca51af7d6c6a09f8633435895ea5212a38d","modified":1447338420117},{"_id":"themes/apollo-like/.git/objects/18/325a464aeb5e29c81ac49c8f2651989880c1dc","hash":"af59a881fc6253665b9f466235cc8600e5cb50bb","modified":1446568190128},{"_id":"themes/apollo-like/.git/objects/18/59e64526471b3ea6bcc2e78660cde0876863d4","hash":"754f5f7aff4f8b08e608509b0b2caffac90b20f4","modified":1465401617000},{"_id":"themes/apollo-like/.git/objects/18/9a4fcdabc2ac371c1680aed1e3a623916c73aa","hash":"8f6f12a1866bef55769dbfd40ef5f9cb4ffdd6b4","modified":1446663529499},{"_id":"themes/apollo-like/.git/objects/19/07027289c0a8aa40220fdca96b542b24447666","hash":"687854a617332a694c24a97ab390beae1993179a","modified":1465401535020},{"_id":"themes/apollo-like/.git/objects/19/90f74fd18625caca0bd2945a862173f476178b","hash":"b85cb8afae4920d9e80eff1d3ce2b9eba7196d07","modified":1447380506988},{"_id":"themes/apollo-like/.git/objects/19/a408676a4b3ae16c6abe04c5a5f0dce9c79b3f","hash":"8f8c8dcc6c1e94f6f7c38fa3c67cbe3aa0829a02","modified":1446037420844},{"_id":"themes/apollo-like/.git/objects/1a/8a6bab53a3bdf172c15b55d44739534b5d7e59","hash":"f32dbcc94246f4306831e1fbed03c62caccf83cb","modified":1446606317677},{"_id":"themes/apollo-like/.git/objects/1a/902d35e9bb57ba85f1f2f5265302a59c76d215","hash":"16714a438534df8fe8f889abb9cb2c498de3b778","modified":1446913147054},{"_id":"themes/apollo-like/.git/objects/1a/9cf7325aebee27e9448695d4ef30192e042f29","hash":"0da93208ccf0481f38606a1f4dd5f070b959b41e","modified":1459346273467},{"_id":"themes/apollo-like/.git/objects/1b/3696bcb8f76c3d4888a0b92239c42b94fe23c3","hash":"9f41d17c07298d905ba7ceab85d7ef2ee8ffdbe8","modified":1466013044246},{"_id":"themes/apollo-like/.git/objects/1b/793d1421dbd36948563639b5b8c8d80bf0b566","hash":"fe2f2b5360e6a7ab55ba20c6643f48251a8d6cbf","modified":1466013044246},{"_id":"themes/apollo-like/.git/objects/1b/853787eb3238e70d9a2eb8e4db848dc338a8a4","hash":"5741670ab384191721e5fe872a93b22bee6392fc","modified":1450574194932},{"_id":"themes/apollo-like/.git/objects/1b/9737a3834ab1f5c91fea0578e20d17d1fc734c","hash":"e724b4e8bf56ff338fc17e127d7d1ec0950b97ba","modified":1466013001809},{"_id":"themes/apollo-like/.git/objects/1b/98d1d8205db5422508b6259dea715c53f59c2a","hash":"1abb4c82c72b060bc2b234873509e156b720b250","modified":1458054370512},{"_id":"themes/apollo-like/.git/objects/1b/cc900a88a99b7a274d81942d3ad8d8a061ca26","hash":"18aa73f01f479ecfe4a3459ed0eb48ae51169e0f","modified":1465480757577},{"_id":"themes/apollo-like/.git/objects/1b/e82f6a6d949ae87603b47fbd50948d24e08179","hash":"c01ec0d4c91f27be8088f92c4f15306cfb114f58","modified":1446736921216},{"_id":"themes/apollo-like/.git/objects/1c/370614c9c15b21832d75c5baf0769768c23b03","hash":"3a021db439dcfd17fecfda9708348584b818c88f","modified":1458054314705},{"_id":"themes/apollo-like/.git/objects/1c/401302c1170053a789196ba5d48cb9e5b29ed8","hash":"a1ec13f7527b71cadb15bbc8e914d0371b3134f6","modified":1452876625508},{"_id":"themes/apollo-like/.git/objects/1c/a287903e1e8471cc2a50a797434da839fe913a","hash":"f61c4dd759c468c9010475d6cf8cbf6c5d863fb3","modified":1445946818250},{"_id":"themes/apollo-like/.git/objects/1c/cf9b4919ea2aa5c3afed34029dba5cb6142a48","hash":"fc554da75a38cfd6c775704f033a8b2f1537c152","modified":1465401617000},{"_id":"themes/apollo-like/.git/objects/1d/350ba049df9db7f4a84b4893e0da02664f1a37","hash":"1b4af103d9c34883bd4da962ae282502014f211f","modified":1465480757581},{"_id":"themes/apollo-like/.git/objects/1e/c6181aee91a0350d237207b78e753435ce4329","hash":"9c51968884143bf7fad9ab8443b80977e66200ae","modified":1458054370512},{"_id":"themes/apollo-like/.git/objects/1f/4bebc2685ed55b584d9cfe078d76fcf2faa919","hash":"82d5719e992d0210762e9f2d9a18eb09b3c90846","modified":1446734920220},{"_id":"themes/apollo-like/.git/objects/1f/9a56d2f0231ab5ed1252332fd13ba8709e3917","hash":"400fc9117ebf0e4193de6ea6ed86a815daa149a0","modified":1446782402117},{"_id":"themes/apollo-like/.git/objects/1f/b973d98cd832593285dc2618917c361b60d168","hash":"cf0db65182f299012e31bfc636c6a42d927cb7ca","modified":1446657722749},{"_id":"themes/apollo-like/.git/objects/1f/c319488b6f287b6ac3f62101909305b173bbe6","hash":"59659653cd614e492a74575caaab9234068e73e2","modified":1450574253258},{"_id":"themes/apollo-like/.git/objects/20/3a600ed3180e44e92e4a565ac0fc053dadba3b","hash":"ffe28cb2d13130bee707fc4dd38a315b1cebfef4","modified":1447084926146},{"_id":"themes/apollo-like/.git/objects/20/9c8a28a3d66344fc2f5e351d5907d43b07617f","hash":"df9571890d64e9bff19c22e62cd2583763015ce0","modified":1447510080245},{"_id":"themes/apollo-like/.git/objects/20/4a427e9a3e0c6209eab50f7392e1d1fcb9747a","hash":"65d2b9d4457132e57f98450a4a65527f29187f0c","modified":1459345856395},{"_id":"themes/apollo-like/.git/objects/20/b4a926fbcdffdc812e8db37edf494af7227365","hash":"7062491f9a1a2c06c6fdc7869e542214d87aa222","modified":1446833383178},{"_id":"themes/apollo-like/.git/objects/21/7f85f8f68ab4a6a5954afc689353ab712606f2","hash":"6f00e2553a99f314a1501f885b24c9c848783c55","modified":1446260308237},{"_id":"themes/apollo-like/.git/objects/21/bc5bfaf2af3fecfdc62e1ccbb9cf9a1b94cf1e","hash":"1c90a0893f5ef2f525c8851e460f905a5c5e3c6f","modified":1446085976021},{"_id":"themes/apollo-like/.git/objects/22/118071c613a11c0c59afd0d050c45cac17d6c0","hash":"31f69146cb801dd27469b321e388e1c50ec816c9","modified":1450574133105},{"_id":"themes/apollo-like/.git/objects/22/20e18252334650018b6dfae3581ae13af4b86d","hash":"3eaa456d118854739b0b7c0149b6257ade7fc82e","modified":1450574230172},{"_id":"themes/apollo-like/.git/objects/22/c98b7c42e7e536dba91467f3ebe13737d7ef0c","hash":"6a99878dd5c520853fcd2c197ed9e62adc67a5b0","modified":1452788594526},{"_id":"themes/apollo-like/.git/objects/24/6130b2970e54251853d1a999073e46a8a9170e","hash":"bcaee86614feb151ea699837dafda2c9244f3845","modified":1465401535017},{"_id":"themes/apollo-like/.git/objects/24/8ca54b8c3523fd488ff5b16c7438ef8bf6d748","hash":"2e98591663d6c453ce9434284a343edb13e1437a","modified":1446086740384},{"_id":"themes/apollo-like/.git/objects/25/769fa41a73d7a6af72ccd72e8c79793144b6d4","hash":"59aa7d15081ccf170be6ba60f6ac2061e7d3f4ee","modified":1447297903973},{"_id":"themes/apollo-like/.git/objects/26/8a2e4322e03d1e37dbdaef2002164cd099bcf6","hash":"c837f3120cb383f765fd9d3fa9957ce22497034d","modified":1459345856408},{"_id":"themes/apollo-like/.git/objects/26/bd9b04e335b7daa1dfa26cbfe5d0e0f21f03fa","hash":"d793af2b795570d79f0934967ef256d63261e859","modified":1450189602373},{"_id":"themes/apollo-like/.git/objects/26/c1ff347f14ddd467b58c2682a4aca7667b6624","hash":"1e5a8217e43c48e3e0bb8f4abf1db1863a5b495c","modified":1459345856362},{"_id":"themes/apollo-like/.git/objects/26/cb4e39a10d3b7804f32a7b2a0610dc6bf95b10","hash":"31254bce2d8e70d79d553b8ece63fbaae358dda5","modified":1446908811240},{"_id":"themes/apollo-like/.git/objects/28/f22e85bdd319e17dd2562d781e99e116aca497","hash":"7adb6f668e29f3b65861c0efb5b04c1f8fc1fa8b","modified":1452788594526},{"_id":"themes/apollo-like/.git/objects/2a/11970fc39863f3ebd5ab251a1c0571b8aa432e","hash":"4b627ee1b50e583a87fe276fbce2c0af91b85bd3","modified":1465401520060},{"_id":"themes/apollo-like/.git/objects/2a/1a08c2dd1d41fd864e9d62a8fdf19ee3988061","hash":"e1f185a01e103fc2c9353e77f74ffbfb57c6ed36","modified":1452267467225},{"_id":"themes/apollo-like/.git/objects/2a/6f72832aad27557e324169b14cc2695be47bc9","hash":"20c58c21f62a828ad6454b9b0c55d53c51b4ce2e","modified":1453171273057},{"_id":"themes/apollo-like/.git/objects/2a/8f1740090c209c0e3c445a76e9305b6c59ae71","hash":"86bd3f2510f0aa9b79f307b7c307d46ead8b9dda","modified":1445946852133},{"_id":"themes/apollo-like/.git/objects/2a/be93f2ec7b57bd257b638236bc952939f78c45","hash":"4c02e694bcbef9a4c7aa4f09f48ec9efdfdf9622","modified":1447297941662},{"_id":"themes/apollo-like/.git/objects/2a/aefbdaca0d69f199ee66e887bc8c27e45eb1f8","hash":"b03d674f2283d7d86c635a2e42482cab9dc946d9","modified":1446606317000},{"_id":"themes/apollo-like/.git/objects/2b/01cd529e15d8580c216b0e760b10a7b5f0fcf8","hash":"a5e3cbbf3c3237554bff938f29494a7820378f57","modified":1446568184751},{"_id":"themes/apollo-like/.git/objects/2b/cf0b03bb8d219ef8b6a9b2a6b77c7fe561e751","hash":"bc7fa137e4206f9ea95190bf0b4f805e9bddbb57","modified":1446037361405},{"_id":"themes/apollo-like/.git/objects/2d/38d1cf5299da828e7bb64b39a12bda7997ffd5","hash":"ee4ccc88a55b20a0f7d36943f0560926a1517240","modified":1447297941659},{"_id":"themes/apollo-like/.git/objects/2d/9833d77b3a5f7add119159bb732b21d94ba0bd","hash":"561202057b18736f54e3c5a980f90fc9463dbaa7","modified":1453171273061},{"_id":"themes/apollo-like/.git/objects/2d/fea90b79b4677d0a0c1d7b8eb8921c353efb98","hash":"4cfddc0a8260944c415f584d25b91c404d4f841c","modified":1466013001809},{"_id":"themes/apollo-like/.git/objects/2e/daa776cee4445199fb4d6dcc98f3694b916b9d","hash":"3de22084475fd71f72d8d0cb29967cf2ad66580b","modified":1450574230172},{"_id":"themes/apollo-like/.git/objects/2f/1fa1eaf6b3f6ca2808d4abf45c34beb95c9d8e","hash":"e3f508593deb8ee4004583c945554bdf911814d9","modified":1446606093191},{"_id":"themes/apollo-like/.git/objects/2f/6ba6ac28359fa8c6ca4b6389828d013c247b97","hash":"3b7c933889e918137e8f65e29e1417c40b21d00c","modified":1447338420117},{"_id":"themes/apollo-like/.git/objects/31/105692e40e77dbdf784e587d137994252be2f3","hash":"ed61224f85666079ab401df7be355283100b4068","modified":1446055972000},{"_id":"themes/apollo-like/.git/objects/31/353ed1bf78b88254f01b6d29cbb39d3d8b6471","hash":"d75426d46db24788e631343e9a01ac3461e36cc6","modified":1466013044246},{"_id":"themes/apollo-like/.git/objects/31/5fa0a86243d45672d49d865ba784f6ddba913a","hash":"1b56bea3d15d7f73d2965b226e9171f82010faa6","modified":1465401483830},{"_id":"themes/apollo-like/.git/objects/31/8c18b2c30c99836468344bb4bb6f88f7485559","hash":"1c16ca5e8be2b007185fc46196fd29f85abaeada","modified":1446734937210},{"_id":"themes/apollo-like/.git/objects/31/c3285a1792faff386035e4f4d31f63e67753e3","hash":"07676820b6d04480b45713b37007e06796957212","modified":1447338399010},{"_id":"themes/apollo-like/.git/objects/34/3b7cb3164898b126ff71503a159168258f7ae0","hash":"04c5fd278944d8830ee89aef1be00071ec3418cd","modified":1446038224240},{"_id":"themes/apollo-like/.git/objects/34/851ed71fc12df091c06b7fa3f0fcff14656de7","hash":"e38dc816d547b942d0fa28ce693b41c1ef23e82c","modified":1458313158208},{"_id":"themes/apollo-like/.git/objects/34/b6a5eec194abb6ced1c09187c68e959d06fa39","hash":"25912c4c216dfdd438c2235dfbcc18ba24eebb74","modified":1447380506988},{"_id":"themes/apollo-like/.git/objects/34/e4aedc2244371cf053c3ed1daf3b55b0501682","hash":"bd0d5562c20df5bc303a88f8faf3b3cef67b115d","modified":1466013001806},{"_id":"themes/apollo-like/.git/objects/37/0c7663120c1933b17aaeaed2d1148fa01abb39","hash":"3c9d7340ff6220dfeac33e72796011137a5f2371","modified":1445996948058},{"_id":"themes/apollo-like/.git/objects/37/59804d3db34cbd4538679cc312805d65d16002","hash":"79b147a2974494a32ec05ff7dfd03b41c5e80059","modified":1447353574591},{"_id":"themes/apollo-like/.git/objects/37/690aeb1a9482ae0eb21c666b4e06b3991cd1e0","hash":"56c992a97cb4651f5c132e0b4b1830a23b6dad5a","modified":1445946828670},{"_id":"themes/apollo-like/.git/objects/38/48dedc2f34b83b8bbbf68f6a32ee3aeae8e4de","hash":"401059bc328b3bbc60270669f8d43737b807a202","modified":1446000223575},{"_id":"themes/apollo-like/.git/objects/38/52124ca1105f9ce050a81a8a7cb9f2dda271ef","hash":"f6cc98d46913cd438aa0a91ea4d0dd1384937a7d","modified":1453170986538},{"_id":"themes/apollo-like/.git/objects/38/bd4a6807824711ea055e5a269f10e000c2618c","hash":"0a3667d5bdd4106429e13d7b52b7aa6ba208214b","modified":1447510080238},{"_id":"themes/apollo-like/.git/objects/38/d832d8cf2af449ba1cb78680bf99d77110bd90","hash":"1db9918f3a636beeeeef444d72e37b5928b33d32","modified":1447338420117},{"_id":"themes/apollo-like/.git/objects/39/61372816b2f5315b5a6a8c68ae413401291e35","hash":"e16d26eb44081f0caea5d066d195f1954911aefd","modified":1452265972035},{"_id":"themes/apollo-like/.git/objects/3a/258cd654d5f8841464b2c6a76544e21ff0e6d1","hash":"001eecb611c9d99ea9bf9316f03f8e8a80d5099e","modified":1452084988897},{"_id":"themes/apollo-like/.git/objects/3a/5d1763b84f8be4d922a2a56b30899588a951b7","hash":"da5ba2332e3d7c786d98b5ed1600dc8d52426700","modified":1446913124790},{"_id":"themes/apollo-like/.git/objects/3a/7813b45373139d5ba0648ead3c2c32f1e0d4f1","hash":"aa601e885d7bcaafffb3a8d8d68ac47d281cab35","modified":1450574133105},{"_id":"themes/apollo-like/.git/objects/3a/aeae2f7509d9d9fe66bd6e6ec8af764a583dbc","hash":"ea1015502b807c49378b53104fda09968b48fb75","modified":1446908165891},{"_id":"themes/apollo-like/.git/objects/3b/632120dc8b03c4574754d9c4a5216d4a908b73","hash":"e282f69d37b6fa5870b00b2b03bf594122cbf2dd","modified":1446038224240},{"_id":"themes/apollo-like/.git/objects/3b/75690dc5990936ab2ea512796780eac356ca90","hash":"95d22c3944ae6d80a25be4644dec61290a3744b6","modified":1465346412318},{"_id":"themes/apollo-like/.git/objects/3b/eed8fc6fd1db96efa2a088969dc7de07cafef1","hash":"0a525a060934801d43e6365d4f64dfbba2a4cf97","modified":1446734937207},{"_id":"themes/apollo-like/.git/objects/3c/7959e554b2194dde18969476c6480931081a4b","hash":"07d06253664bb6f4cdc4d5104ba842261e85b46e","modified":1466013044249},{"_id":"themes/apollo-like/.git/objects/3c/957ee3f173f93b32e0fba20b45cf1d9164000e","hash":"1d133f542f3a035d12a98846b8e5ba9efbeae2b4","modified":1446606317681},{"_id":"themes/apollo-like/.git/objects/3c/9d4729196f39403b219b274b61a31c6154494b","hash":"df956f562bf89e73fdc2c444d10bde0782ac0e9d","modified":1450574133105},{"_id":"themes/apollo-like/.git/objects/3d/0d453be786418bf59a9a5fdd1514a82c682b16","hash":"45e0b1d24f3e529bd4aa20fc5ec20522a4c606ff","modified":1466012994343},{"_id":"themes/apollo-like/.git/objects/3d/b5c6dcf123aa545d47aa499f187444b77d56bc","hash":"6b0e2d363258e6bf13bf9a7068a4ea4db144ad57","modified":1446086740384},{"_id":"themes/apollo-like/.git/objects/3e/528151d19c11115686c9f7c14e5f857813e82c","hash":"a7db79504700469eb6fe92a0f79d32f9f3703763","modified":1465401614000},{"_id":"themes/apollo-like/.git/objects/3e/7ab327b40deed6b874bfa41e23c9d0825dc9a5","hash":"e4e13640648ed746416a6bf42bccafc814090b9c","modified":1452084985004},{"_id":"themes/apollo-like/.git/objects/3e/ba2a5e00b72ecbd8d169a3054afed076e5a8ef","hash":"bf4dd24354a62e65ddc9ed127ed759df54c21cd5","modified":1446657713453},{"_id":"themes/apollo-like/.git/objects/3f/21d4523dfb185b807e5af2bd0c0f4378cb0adb","hash":"f9b2fadd44bfecea763ad1a99cba1f17cfcb6da0","modified":1446044226925},{"_id":"themes/apollo-like/.git/objects/3f/2b8ce53ff873c24845d54d84c326f6949d9c07","hash":"e8e69d9daf94ca4d1cc5b9db29f01ef9d18dc611","modified":1450194717564},{"_id":"themes/apollo-like/.git/objects/3f/33aa974b028fec756b7267039fe9d7991ba290","hash":"709cdbf15f823f1c27e2a090d426f3e9b8d3302c","modified":1446734920214},{"_id":"themes/apollo-like/.git/objects/3f/72d303394eb0b4d69dd054233e12771a724d91","hash":"0a25992fbf30b285b470033ac5bddaaeb05029b1","modified":1452267467228},{"_id":"themes/apollo-like/.git/objects/3f/85559aa20327e79da3d24a98eb6ab0908b87f5","hash":"272e85bea472657767ac6ab97692533d4555a729","modified":1459345877761},{"_id":"themes/apollo-like/.git/objects/3f/a62c9d5e2079f9f9e5db61d7ca39f1b86ab707","hash":"fb4626a3f7b04a45c0f59784b38551635f71e60a","modified":1450574211565},{"_id":"themes/apollo-like/.git/objects/40/c07bf4fb8950d2b637379dd313b4b5a23e18c3","hash":"bb2b797096f4cd985c7b690d54a882a27dfae8f6","modified":1465346412318},{"_id":"themes/apollo-like/.git/objects/41/923fa0142df9344473ec82bb15282005050c2f","hash":"0f7ca5dc8fb89a7506f0ab224741fe6088d3ca15","modified":1446055887000},{"_id":"themes/apollo-like/.git/objects/41/f5e495cf08dbaffe85fc5d5237031a36890b21","hash":"7c5e7cd212b3638f0bc36a4e65183a0d02a32d1e","modified":1446606333807},{"_id":"themes/apollo-like/.git/objects/42/160d2381662655a62312774bc607147d397668","hash":"b064c4b8f8d1cd699e922f4f5fff90593ebf10fa","modified":1447510080248},{"_id":"themes/apollo-like/.git/objects/42/2367226029855d481142c3b120a5d1ac7e22d4","hash":"31cffff38a546bc7c87422cbd5fa48ad4b566b6c","modified":1447510080245},{"_id":"themes/apollo-like/.git/objects/42/6b08cba5a3c194cbf4945946f71c037b3b547c","hash":"a7af80b73f35b48fb70df6a2fc44d035fe61b7b1","modified":1466013044246},{"_id":"themes/apollo-like/.git/objects/42/8828f7cd8228ccc78c744f6662b30b7126934c","hash":"3afb8a7dbabe6f8152dd882c51feb5dfc0a4e440","modified":1446782406104},{"_id":"themes/apollo-like/.git/objects/42/f60d2b4155da1c98096f82d84368c845d05fa1","hash":"3a517229191672775a984c6a75548f064e545c30","modified":1446085976018},{"_id":"themes/apollo-like/.git/objects/43/eb8950bd7f6ec77f562c7a8d39b760e5c0f75f","hash":"35c9146aebea50d15c2ca446c4a9b0bd4e1e6e0a","modified":1446606093188},{"_id":"themes/apollo-like/.git/objects/45/4c67d2bf2740889ac7c4701b48eae0710480d8","hash":"457898fa75e668a8d88b03b989180145e41d78e3","modified":1446734937207},{"_id":"themes/apollo-like/.git/objects/47/008518b08b1dd5e368ee03af4c81a792a5995a","hash":"4b48d615ffb46ecb2bdb594d96293ff135279885","modified":1446736910039},{"_id":"themes/apollo-like/.git/objects/47/bea5d141e6d8d4a989da043c8820931c5e9658","hash":"46d2c00285aef01afa14c2945bdff33a8029ef89","modified":1450574211565},{"_id":"themes/apollo-like/.git/objects/47/c125a582dcd2f35ee684030981bbe0a38b5f36","hash":"66ed87c28b53efbc3caf9c6a32ee21c0e10337ce","modified":1446568190131},{"_id":"themes/apollo-like/.git/objects/47/e5253736bb322549fb58cd7f251509861f122b","hash":"4c65271f67dae7b615989e4c3202f79f4ab1768c","modified":1447380506985},{"_id":"themes/apollo-like/.git/objects/47/f74c88265005f78bfe65c5f446e520be025b02","hash":"8c9cee2fe3a73cafc997f2e61ed9594fc8ca5e53","modified":1446139499964},{"_id":"themes/apollo-like/.git/objects/48/83f35f79bc0b7839feff05712efdfe1ce59dea","hash":"91f190a3c1e5ce23ef8db7ea558cf05dda6dd2c3","modified":1447297903973},{"_id":"themes/apollo-like/.git/objects/49/b47d637fefc34c7d387d0c6e0d7d0bb664fe61","hash":"9ee39dda74ee6f19096b2c9523272cd16e24bd9c","modified":1452788594523},{"_id":"themes/apollo-like/.git/objects/4a/86fc6167a98fd3df02b893a0d647dfe63bd5c2","hash":"aef480528e3df32fec9b1b49eb73d33bf1061d3e","modified":1452084985000},{"_id":"themes/apollo-like/.git/objects/4a/b03c214b70bc967d8238cc6899d664c999cfa1","hash":"25bbbc5d8a115085de8a479021a500bce27455e4","modified":1452265972032},{"_id":"themes/apollo-like/.git/objects/4a/e4d770efb9fc3e2d54fb285bbafc5ba07899df","hash":"4a0f238183ff01d8ea08140b978af26fa49ba9a2","modified":1447297903969},{"_id":"themes/apollo-like/.git/objects/4b/57ebfd5788caa1d3c9d2286467d264381d4fe5","hash":"d800cc19ca08f4309dc2416c77faa5afb63eba97","modified":1466013044246},{"_id":"themes/apollo-like/.git/objects/4b/a823bad80763fcb8432bc45e3a840c392aca1c","hash":"bea83c9e13a788f6228942b4fcb884a8e06c783d","modified":1446606317000},{"_id":"themes/apollo-like/.git/objects/4c/6b89bfd040664ec0262161b01eadd2d6a729d1","hash":"c91094d643703340c1347e83a4f535def4708c9f","modified":1459345856402},{"_id":"themes/apollo-like/.git/objects/4c/dabacb9bf69227f09e67a642ce7317902e14ab","hash":"2ca07ced3dc253d9b53622c341644d9a087ebf46","modified":1446038224240},{"_id":"themes/apollo-like/.git/objects/4d/0e3f80b092957e2c0b56005e04d8b3a5aeffd1","hash":"07bb7281bc29c92df8550a8766f2b543aabb7b8b","modified":1459345877758},{"_id":"themes/apollo-like/.git/objects/1d/5c7db5e250b346d355dccf0742ab11e643f229","hash":"d3601cfb6818f210663eb67746ab38c83e758ccf","modified":1446038224240},{"_id":"themes/apollo-like/.git/objects/4d/2ba9de057c29e78727ab24f4255bd72e9e5733","hash":"85c2a57e3a531efc007fbcbb1399de0d1d24ccaf","modified":1445946818246},{"_id":"themes/apollo-like/.git/objects/4d/5224e6ef71a1f067d71229eba360a6af559946","hash":"b5e435c91750fa53fa7b2b886805fce2400160d2","modified":1446913147057},{"_id":"themes/apollo-like/.git/objects/4d/9efd572c993f9a2c69809fa2ebc8810a60a10e","hash":"f751db30299ca74691da2227067e71b076d77bc8","modified":1465923127853},{"_id":"themes/apollo-like/.git/objects/4d/9f566ee29ca7a80dc9e4bbbc2568ca1cf98d17","hash":"83b5a237e57eb4efdf410e418cdcd5e878d0c209","modified":1446606333807},{"_id":"themes/apollo-like/.git/objects/4d/baf69404d20f244a3422bae43d27c05864723c","hash":"a1c8484c2a37f88226bd321ec4602e6c6dc572c4","modified":1446055972137},{"_id":"themes/apollo-like/.git/objects/4e/e8d77a769b6ad22297e16e199c3620fb848b8c","hash":"522bbcd22540be53ee5f7a17e68963cabbf0b236","modified":1459346281347},{"_id":"themes/apollo-like/.git/objects/4f/9e2191935cb06931c3cfb9fdb374e1b5e3c02d","hash":"2a162c5d6b6dfd5302e4a439c9a1d832b1a1015b","modified":1445996948055},{"_id":"themes/apollo-like/.git/objects/50/42bcf89bf15c84b5f9c0073ddd0dfa6daf6e10","hash":"2d7ab0c89a6192082deab18f4c3dba82f50780dd","modified":1445996948055},{"_id":"themes/apollo-like/.git/objects/50/5f761423c4b994eac5e1adf2977d75294907e8","hash":"a126565ee00461e255e2736e63fd58a7d0f5089d","modified":1445946760180},{"_id":"themes/apollo-like/.git/objects/51/2b79040254e23a13f5c2c079744572998be3dc","hash":"fdeed8bd66214f111f27bc4615cbcf29f5a0c451","modified":1446085976018},{"_id":"themes/apollo-like/.git/objects/52/5a4a6895af68f1b0c0bb6b94b6b65a254a8277","hash":"704bf7f1c349a52a09b469d04bf32a268b084fe2","modified":1446055887000},{"_id":"themes/apollo-like/.git/objects/54/67bd25983873ed41ce0a55a5c757e95e45d983","hash":"0eea11e411d226fab181e929096fc8df66e85753","modified":1446917104673},{"_id":"themes/apollo-like/.git/objects/54/8040fb53930937cdc4010e92a6b12056241f4b","hash":"f668b982fa4c112ee1bf0249d49c228ad41d6b56","modified":1446086707441},{"_id":"themes/apollo-like/.git/objects/56/bf0808fd7f519ab26f160dbd37eae8f42fc307","hash":"0322097220092e4f23536a80b3c157ef7d261ca0","modified":1446606093178},{"_id":"themes/apollo-like/.git/objects/57/54cc2b5d4bdb49d46652c75bdc592efabf1e0a","hash":"322350815ea3671a8d431488a19a5acf881beadd","modified":1446561945836},{"_id":"themes/apollo-like/.git/objects/57/614905b931d08b414138cc90f14832c145ac1b","hash":"0611155a3bb04bb1ff8f3f951f5e3f0f1692b93c","modified":1447380655821},{"_id":"themes/apollo-like/.git/objects/58/7172fa2c4be696b11b9cfb6df3c3be07f47530","hash":"8337142efd524290715867c9ff7474099e35c6f4","modified":1446038224237},{"_id":"themes/apollo-like/.git/objects/59/1410d9e7ac812d589bab98851d0701002d1bca","hash":"875a8a0f1ea5d259bb90c4574e0878ff954be920","modified":1452876625508},{"_id":"themes/apollo-like/.git/objects/1d/8541fba98480343c3f38f8546a6984139d60c1","hash":"5b1c1d73e4446fff1e31377f7b43275a45a7209c","modified":1446038224237},{"_id":"themes/apollo-like/.git/objects/59/8bef4440fea697b0ef304326f1d35b4c510c47","hash":"fc57854f76aa414145f21c66282cf1dac72e607a","modified":1447380655824},{"_id":"themes/apollo-like/.git/objects/5a/507d9425ec3d1d7ff9285f171afc3f87fa5579","hash":"75c301e40299d90fc07d6c9354dc7c3d0fd1e2c6","modified":1446846125737},{"_id":"themes/apollo-like/.git/objects/5a/b28e273d52af8f84ce5feb15c3c70e5ad45b0c","hash":"0bc9992e06be70da43cb043fb1daa60efb5a2d26","modified":1446086740384},{"_id":"themes/apollo-like/.git/objects/5a/e1d951d102c319b2f7a40415d078dac07c772f","hash":"921da8e90fadac04c2471057d5345918aee950e7","modified":1452788594523},{"_id":"themes/apollo-like/.git/objects/5a/e7b2a050fee19d690332b4355d403af4f9430c","hash":"1e4c2ce1299e882171e726f76e0756e1514286a7","modified":1465401535014},{"_id":"themes/apollo-like/.git/objects/5a/f09f27a2ddfbbae5f4feb300173526284f7255","hash":"7c2898dbd2facfcaa90c117573a957f6e52a53eb","modified":1447297903973},{"_id":"themes/apollo-like/.git/objects/5a/fa25cb6437d6404a485fe96a6705701223fa35","hash":"587891b07b27a475d62d1ab70ebe756a3baf69a0","modified":1446914405648},{"_id":"themes/apollo-like/.git/objects/5b/157d65590e1fbd8731c802d608331bba1a0015","hash":"84a9fa435d3517e3930be1af2d9a06523cd54e6e","modified":1465401614097},{"_id":"themes/apollo-like/.git/objects/5b/38672d79d2fbc5b24a31676100d6dd1be7dd7e","hash":"9279993ff5762355db42106b8ff1f506b1720eab","modified":1445946818250},{"_id":"themes/apollo-like/.git/objects/5b/5b29be68315fa69bb7447be5009fcba1fea815","hash":"f4e680e33d09028e0863d29357c39ffa25ce14f6","modified":1446000223575},{"_id":"themes/apollo-like/.git/objects/5b/c81797d688303a92033000c68bbfcbfee71739","hash":"beab47bcd619eb2ac37d5de8b4ab71cc315c69a1","modified":1465923127853},{"_id":"themes/apollo-like/.git/objects/5c/2fb9513956dfa68cf6d1b38f3723decf2b70cc","hash":"3a32090a1765aa23613e03b84ba74f4aad7ef9d3","modified":1446568221451},{"_id":"themes/apollo-like/.git/objects/5c/682d1e2bb0e040e28f0b163df11eaa54fb7b24","hash":"40f3377160cd6214b59a4e7197a02b3fe51b6706","modified":1465346412318},{"_id":"themes/apollo-like/.git/objects/5c/c7d387807fb6b4b987a8d0ee989d4221f4ec60","hash":"49d9cec5b00c292b7a5e5ae4f92f9683bc70d1f6","modified":1465480757581},{"_id":"themes/apollo-like/.git/objects/5d/b847b2a56e1168059fd1928d40b373a88895f8","hash":"452bffabe21b14bbd15efc6a25dccc2159055aa4","modified":1447170156178},{"_id":"themes/apollo-like/.git/objects/5d/d5f3d46fac1acf1d9061159e0b8a03823c54d2","hash":"3dc826765dae23939afdb0bb16b4a67f36ef302b","modified":1450194717564},{"_id":"themes/apollo-like/.git/objects/5d/e722377a45523494031519122f10967dbea4e0","hash":"3730fbc9fb91bc3a392c3e77cf33ce325101c911","modified":1447297903969},{"_id":"themes/apollo-like/.git/objects/5e/49d1d8a96d2f827a358566a5566d630bd74782","hash":"ce70caa621a7776863be82a623d5aa6dfb182a71","modified":1450574194928},{"_id":"themes/apollo-like/.git/objects/5e/564076358ddb7cb426d89cef0829ec8ee789d8","hash":"687e8e89ad6adb48409846ec2d052726f11502e3","modified":1453170986538},{"_id":"themes/apollo-like/.git/objects/5f/12954dcaa84ec4cf5583a72b646a2b0dbb18f0","hash":"28c14d991510fb120396f407921b36e93d541f44","modified":1446139499961},{"_id":"themes/apollo-like/.git/objects/5f/8073ba875279b737f33c4714127298922e45cd","hash":"8f370f5f3a96361c79ef33f6ca0c02731e2ca723","modified":1446663529503},{"_id":"themes/apollo-like/.git/objects/5f/92503c9dcd56496d9fe43c4912ae1837825ad1","hash":"25fe4f6f6a8e411afd282ea68bdab8e4f9a96129","modified":1446038224237},{"_id":"themes/apollo-like/.git/objects/5f/c650ae8987154b80540d3720a39750e50ef212","hash":"9b13e4dd7954426aad894252c866ef920f103a62","modified":1450574127859},{"_id":"themes/apollo-like/.git/objects/60/5803d916349cbfa4db8a03ae66919547714233","hash":"74e4c7fe6d4618a00c9c95664fb2917cacc084ae","modified":1465401520057},{"_id":"themes/apollo-like/.git/objects/60/ae8abaeb8ee8080c073523dd033e3fa5d5d7fb","hash":"d9df87d9e634f554785bdf95200d5eebcd78bee7","modified":1458313158208},{"_id":"themes/apollo-like/.git/objects/60/bd73b5837caf765693979c59b877dacd99969d","hash":"cc2d342df57116ac2ffd0884e715a3431a5dc994","modified":1459345856405},{"_id":"themes/apollo-like/.git/objects/61/5023365df2a2e62b83dae81a10829a6d6a5960","hash":"caf2b532d10c181bdc9f8f3b6f1365e3f36a8563","modified":1447338420117},{"_id":"themes/apollo-like/.git/objects/61/b3f54831d60ab36bba34e12fcc4716702cba0b","hash":"f42a74ff2e58e47f3b5d791fecda5dcceaca4bca","modified":1446846125737},{"_id":"themes/apollo-like/.git/objects/61/db9d2827b60a585f333250d8d15a4a9abc7094","hash":"40c771c3fd77f3edaed8e6a2cb84d4161855db44","modified":1465346412315},{"_id":"themes/apollo-like/.git/objects/62/52d7fa7b43e0c6e1eb205839ac69311f74fabb","hash":"4c6871e1e120bf46f4967adcf67672dc90479192","modified":1446914405645},{"_id":"themes/apollo-like/.git/objects/62/a6e2417517f924b6ce5f0e99623ad627a9d67e","hash":"85e0fd0dfe9e9f2b8b9367609ab8d7ed6e3fd321","modified":1452084985004},{"_id":"themes/apollo-like/.git/objects/62/ed79f6297ecf254f61985b4d4f3ea780fb62c3","hash":"f4706c2784567a9051fdabddc89190b016d11a80","modified":1446000223575},{"_id":"themes/apollo-like/.git/objects/63/43655f2671268c164f5329ec0ec8bc358b314a","hash":"b38634f55f0343017188ee2e0d37c70502e44485","modified":1446606317000},{"_id":"themes/apollo-like/.git/objects/63/867ec2c0b76847c2f50faf3803c97955e964e7","hash":"b63aa5332707d91a87e6bd821c857872020f5adc","modified":1446000223575},{"_id":"themes/apollo-like/.git/objects/64/986ece142aa74691e6282815a3a4d0c7c6a56b","hash":"49764282f14b30d7fa4df05274930c45b03fc46f","modified":1446606333807},{"_id":"themes/apollo-like/.git/objects/65/8d764dbfe57482f6a8f0ecf26e3b65abf403ce","hash":"049a79e471e0bf5a85cd6d4f1d52bccfdf2873e4","modified":1453171255587},{"_id":"themes/apollo-like/.git/objects/65/d1da6787e3cead24973923deaf29d15af721a6","hash":"07a925a76824cb13fcf892a666080bb18c26099c","modified":1446606326464},{"_id":"themes/apollo-like/.git/objects/66/1b96101b40176151ebc9c558fa35ebf77cf172","hash":"6d89387d1b561b4c6e1c1d7f9e9721e3d805f7f2","modified":1447353574587},{"_id":"themes/apollo-like/.git/objects/66/9c5c749748716c14e109c2980e68c5f1dbae96","hash":"471b65c21a7b58b63e6d9541cf3e913b85eba6e4","modified":1465346994787},{"_id":"themes/apollo-like/.git/objects/66/e50717719ed7958393bb8e5e6735118732bc1c","hash":"ba025be4f6d9b5dab782eafe001f428e486a532b","modified":1446663949498},{"_id":"themes/apollo-like/.git/objects/67/bc20488d4f19bb40dd1c80cc113d42567565fc","hash":"4226d27bce171357f4f4e4cac010d9618e0526da","modified":1453170947708},{"_id":"themes/apollo-like/.git/objects/68/3107d3b35fa06c4ec515570c229a53d39e57af","hash":"834865d4511f12bd47e1e53288d599e7f3f67f5d","modified":1446561945836},{"_id":"themes/apollo-like/.git/objects/68/344f1464b6d5eabbfed3b82bdd3f1c7af13ebd","hash":"b1f39ddc5a3a17df35a1dd1b3a8513885458bdad","modified":1447353574587},{"_id":"themes/apollo-like/.git/objects/69/24a51cbacf319cc93bd1fcd01540f0e5ede9aa","hash":"51cd0b0fffa2ce43799d84a38039d85e7f550846","modified":1446086740384},{"_id":"themes/apollo-like/.git/objects/69/57950925cf5c6ba54cc573c8de49a186850d0b","hash":"dcb4f33837586e45839e70a3504ccd11c1d49d3d","modified":1447510080248},{"_id":"themes/apollo-like/.git/objects/69/6d5ff62aab147714163074f4251accde8f9386","hash":"6203bc69cbcf13d57c88f033202bf2b8e2c79580","modified":1446913147057},{"_id":"themes/apollo-like/.git/objects/69/7d40d2c858806a57548b7e31cf9232090f2e7c","hash":"92343c9e5150bdba8cb414bbf919b17c52998ef6","modified":1446846125737},{"_id":"themes/apollo-like/.git/objects/69/8f889113232562bf2bbc6ed067b0fa4c870169","hash":"626432d36a79f5e4295b517149c361374b7030bb","modified":1466012936239},{"_id":"themes/apollo-like/.git/objects/69/e4e878ad89e9916874a9fe63d9205c216b30c4","hash":"15e57056c33ea71a6101278e82177f39058be0fa","modified":1446037420841},{"_id":"themes/apollo-like/.git/objects/69/f8889055616ee39e6e2a65275fd886180ec798","hash":"f9100fcc7ac6a80b0b1b7962b1cb746d8147793c","modified":1450189580883},{"_id":"themes/apollo-like/.git/objects/6a/1a02393a88e4621d3069f3fa0f305d272cba4d","hash":"9022a1baae4b4bbb302c5290bc2ee7cf893ffebe","modified":1446913124790},{"_id":"themes/apollo-like/.git/objects/6a/6c342b813a423fbbdac724fcb6c04a293153b2","hash":"193132881e58ee0b3c1c92541bed1ad3bd9e0fcc","modified":1452788594526},{"_id":"themes/apollo-like/.git/objects/6a/9358b289397a95068e7217b5a7bc3b91329a80","hash":"1e2c6344d2ce5b6e05359165fedb80894dde5cd5","modified":1446734937207},{"_id":"themes/apollo-like/.git/objects/6a/95699d55ba3abf623afd0f2c0d8c477913ca4e","hash":"d86c33b9cde915bda501bef86a028faca54ff0df","modified":1446606317677},{"_id":"themes/apollo-like/.git/objects/6b/f7e337827a0bface5f0a766956ed51107bf4bb","hash":"7ad4c70c4e650aebd3d44836ab75f9e7a28c2916","modified":1446055887000},{"_id":"themes/apollo-like/.git/objects/6c/aaf41092322e40e757a7fff0d592caae200a2a","hash":"6c257057038da3c8e90ae0fa99d04d9a1785e13a","modified":1459345856388},{"_id":"themes/apollo-like/.git/objects/6d/0268657324eddad680393fa8cad5e4cc03f1dc","hash":"86abd0ceb2a1f004cbe7561f0cfb5bd8fff65089","modified":1447380497818},{"_id":"themes/apollo-like/.git/objects/6e/029c4672ee41d09253144a8dea58bcedb2c88a","hash":"94b67f438a6110b2b4110fdb9ac936737a2607ac","modified":1465401657383},{"_id":"themes/apollo-like/.git/objects/6f/01ee52a20c195ddee985b1ee88928537f4be93","hash":"2b6e02c809e8d902a707aeb5fabbb121d8017d21","modified":1447380655821},{"_id":"themes/apollo-like/.git/objects/6f/79cc4eb4e57ca5c614529adb0bb059818d3089","hash":"03958e8b042c2860ff6d09dccbdacb85848440dc","modified":1450194717564},{"_id":"themes/apollo-like/.git/objects/70/5f147c374e1ac5060c581f700d1969737c4f44","hash":"2486da083a3e4dba1525bc858a223cbb4cd87d08","modified":1445946852133},{"_id":"themes/apollo-like/.git/objects/70/d7fb2468a752574be09779919ab9f4cf922da2","hash":"00559e57a364fcb762a697dbe025f85082f8e6e4","modified":1446041917427},{"_id":"themes/apollo-like/.git/objects/71/6afe64a853a2ab1ded1e1f4a54f13f03d180d6","hash":"88a1c0f0ac92f075d05606fd9e9f38847dcf58ec","modified":1446663529499},{"_id":"themes/apollo-like/.git/objects/72/8e0968cbddf946383d21d66d7ca12041665513","hash":"1abacc4691cff5a84bfea8d3a1604a3f43de80c9","modified":1446734937207},{"_id":"themes/apollo-like/.git/objects/73/0e26107bd07ce5e0d7af8bb87cf3b6bf630db4","hash":"81c05ad6378fd6f67d38658528cd7e1b38046660","modified":1446782402117},{"_id":"themes/apollo-like/.git/objects/74/336725ae5f84bd230f4a65a7e9c8c1e1efa7a0","hash":"4d1e7afe4a919777528e3513866c819f782591e3","modified":1446606317000},{"_id":"themes/apollo-like/.git/objects/74/4c999fd0ebe3757fbee9037c0bc198c3e65149","hash":"94a53c916e85165f50f99f180563efe63d1ef534","modified":1447353574591},{"_id":"themes/apollo-like/.git/objects/75/0749c6ee8b4e6eb7cb9ac16a5fb9f1275a0e61","hash":"99fed2f02f7e3031aec58c88a09cd0f9198ef00a","modified":1465480731651},{"_id":"themes/apollo-like/.git/objects/75/1c0a8f44ead63b25543af547b2c48ead56f409","hash":"764d888638464b969bc590223d68162fd7a14da6","modified":1450574230172},{"_id":"themes/apollo-like/.git/objects/75/80ee582304efd865efa8d347321c1c1766fedb","hash":"1f66c6735af4a1e3ba7c372a1cf334f0573a1fa5","modified":1447380497822},{"_id":"themes/apollo-like/.git/objects/76/29e74a4a42394d0b5b373c6ac2eaeb88812f7b","hash":"6de368ba6053af4e7eaa103db787d0e565e1bb05","modified":1446568221451},{"_id":"themes/apollo-like/.git/objects/76/4eadb94af0700b053c98d1af225fe564bb03c2","hash":"08d65b67f234e5a11039284fbae8e8905f7a938e","modified":1446917104676},{"_id":"themes/apollo-like/.git/objects/77/9017d445c780c8b40cfe86cd9483519d532ee8","hash":"f4d6056e12ca9bf1b3d6562ca553e984298c560d","modified":1446606317677},{"_id":"themes/apollo-like/.git/objects/77/d090cd353fa2e88e187287a1b072c91a9e4575","hash":"4d4909861bf40f098bb0156f34a5654cc2047b19","modified":1447170156175},{"_id":"themes/apollo-like/.git/objects/79/ca9b80053bbe60cef0a7ed6ffbcf334a41a2a9","hash":"5b56085ee0aa039fbc466714822ee35ff66e0e46","modified":1446908811240},{"_id":"themes/apollo-like/.git/objects/79/ec099ffc177953ce62107d296848c3a3ebc62e","hash":"f6082ef6b9f4468eb23a8029f54b07e02f92e69c","modified":1447380497822},{"_id":"themes/apollo-like/.git/objects/7b/3f930b2300bcd0ffa7a259f2181aa6bc3cfd18","hash":"b9d0a11910a852c4b83b20d264d82d9bf2de8b8c","modified":1450574230172},{"_id":"themes/apollo-like/.git/objects/7b/d03816f578a6965f8fc89872898549afd89a48","hash":"88d36e835875030ec96c2a09769ef34ac5366f8c","modified":1447380655821},{"_id":"themes/apollo-like/.git/objects/7c/4cf5c26b43f6d34bd52ceb8766e11e86b91675","hash":"c8efa6be66192211d6398368652e9b6e1bb7bbc3","modified":1446663529499},{"_id":"themes/apollo-like/.git/objects/7c/bdc16c138920e02aae64ffe4d2cd15634d378a","hash":"d4579a1864e1da9c23e184f66bf875610d403628","modified":1446914405645},{"_id":"themes/apollo-like/.git/objects/7c/f2050fd08f322da5ea5cb9495462f2a7c5f594","hash":"de8d7238dcc822f619275cb4417a84c75a56228a","modified":1453171022425},{"_id":"themes/apollo-like/.git/objects/7d/0487398f72690661963b03349a3b3f88e5fabb","hash":"bc5f54ffe5c2ed379348c55b6c5973473896b854","modified":1447297941662},{"_id":"themes/apollo-like/.git/objects/7d/aeecc8a6adf084d4114c4c524b7ad3d17afc73","hash":"5c2616e03685004aff7b503e06e52af79f3f96a3","modified":1459345856408},{"_id":"themes/apollo-like/.git/objects/7e/456536ff3cf8edaea8bec37bd78494307d0446","hash":"86a01f37ffcb41f2cb8c5cbe32e4f9ed2f2effc5","modified":1446917104673},{"_id":"themes/apollo-like/.git/objects/7e/55319a7c37665e3f5f23647c05e8db907074ea","hash":"00ac5ff5daedf49c6c494e250ab291d3ae8c2abd","modified":1465346412315},{"_id":"themes/apollo-like/.git/objects/7e/7b2554f10f30593c8e6659859d71cd50ff1036","hash":"7ae99eaedeebf72c627429ccf3f30a0551fee137","modified":1465480731651},{"_id":"themes/apollo-like/.git/objects/7e/e3039e850f5ac2ebfee9cddbac7a635d599a3e","hash":"a9969a264341fe2eda6ad070bd9c550c2c75d4aa","modified":1450574253255},{"_id":"themes/apollo-like/.git/objects/7e/e8f7b2a2b9ee113d9385bf4c1f324cb2dda816","hash":"1fd4f0c373603d360d5e961d9d99c3761de6175b","modified":1447353574591},{"_id":"themes/apollo-like/.git/objects/80/44d9e1115fbef8495873f2b9a50b1e2f9cb20d","hash":"03b0cfecf8c5a1e59c9399ff8c11a72f5b2dbca7","modified":1450574230172},{"_id":"themes/apollo-like/.git/objects/80/774238ab13d2348da74efcda1ba50dc1025fd0","hash":"729a5d8b456e04bd99b5a4dbb4028531a7bdbd7e","modified":1465923102424},{"_id":"themes/apollo-like/.git/objects/80/7fe90b205bede25e6c23ce58bb8e476344a148","hash":"0d741a8a19dcd208b33fb0a860d13d3b743d51a2","modified":1446038224237},{"_id":"themes/apollo-like/.git/objects/80/92805a8c2ade386c72af63e1b105cfd63a3cbf","hash":"c8cbf03b7aca6d735b09de46efcd8766d6ab34d3","modified":1465923102424},{"_id":"themes/apollo-like/.git/objects/81/0d74f3f3252d7826ee4d6dc7e14c69502796c8","hash":"65ef51bd30b97858d988fbe4e55d7d33ff1e8289","modified":1447510080238},{"_id":"themes/apollo-like/.git/objects/81/356139a078d52d69e915afeb8db49b342bcae5","hash":"c40fc7c4806ac9ace67002b5fa49fa2be7c377df","modified":1465401657387},{"_id":"themes/apollo-like/.git/objects/81/7298f69c7669c10d69fd531778bd3b538bd545","hash":"749256b7f41550074e50a155ad4b6208fc9188d7","modified":1452085002793},{"_id":"themes/apollo-like/.git/objects/81/9067b2e1d69f0fdca65e596393c43774d8e9ea","hash":"dd785b21615c1a27e5ba130542350340ee61a68a","modified":1447084926136},{"_id":"themes/apollo-like/.git/objects/81/b3644de15bc3077df1287103fe435a1a283081","hash":"96d469e7e0ab1a88a3977d0c1e2092150de108ed","modified":1453170947705},{"_id":"themes/apollo-like/.git/objects/81/f46e2c5c8903af7cefc0166bebc6e69bec2563","hash":"f1c385667c3ce42a00122a848c4760cd41f46897","modified":1446663529499},{"_id":"themes/apollo-like/.git/objects/82/0b73be9dadf9f08e23d7a0d31aa5dcc81549a2","hash":"d28b02870b7f688944be40e022ab24cda994f327","modified":1446657722749},{"_id":"themes/apollo-like/.git/objects/82/cd358044b834d390e3e2736cd741d680345631","hash":"893aa71f2458ef9ab1abe3e0c6c13d1b300001da","modified":1465401657383},{"_id":"themes/apollo-like/.git/objects/83/03c76d65fe09f7c4b19677c24fc5cb68f3608e","hash":"38e8e1748a840ad4d74bd615e0f5ca5d5e66c65a","modified":1465346994784},{"_id":"themes/apollo-like/.git/objects/83/0d450eb0f4d1288f05c3e60711f81e242d624c","hash":"df88f46080f158b5efa80871d01322b394c8ce2c","modified":1451928407271},{"_id":"themes/apollo-like/.git/objects/83/18e866820692aa20baa5855337ea17f8288b99","hash":"fe9ad09826f1b912ce812a1aa9cbccc30e2ac1e4","modified":1446561945836},{"_id":"themes/apollo-like/.git/objects/83/32e5d0d642ee85a1ee8fcd6da9c22fb832e0a0","hash":"edb43b9e3e52f13c6fb7624dca87c0c4adca9ef8","modified":1446782402120},{"_id":"themes/apollo-like/.git/objects/83/6abdceaaa2f7b94c1899d61647135ff02613d5","hash":"476ffc56a1498d6555a8daac7b9215c2807b9fe5","modified":1447510080245},{"_id":"themes/apollo-like/.git/objects/83/e716e2eab3c62e42758161d09269897640e22f","hash":"9a611ec02d15d9f9b9c86e8bfdb9a978aff73e28","modified":1447353574587},{"_id":"themes/apollo-like/.git/objects/83/e77f2b1956058e1cafd2a1c98a5ef9047b9105","hash":"645e15db1ff17693c0f9082343594dc373965b63","modified":1465480757577},{"_id":"themes/apollo-like/.git/objects/84/872dbd6f956f005d37a5d85259fb67aed7ca2d","hash":"1fb7fabeaa7d252be6011e89997a774c734fcaea","modified":1446568221451},{"_id":"themes/apollo-like/.git/objects/85/75c630fd056efc0f1544e6b8cc7a64dd4de9fc","hash":"ff49629468aee264e78996c46625b4fa83b60183","modified":1447380506988},{"_id":"themes/apollo-like/.git/objects/85/0a5aa66489f804c11a2189b1fd81707f0dbff5","hash":"25cf0daab13ec27136614818044c74f856b8bdf2","modified":1459345856408},{"_id":"themes/apollo-like/.git/objects/86/31f3f2b1d739ad232b578b2f4c1cc325be3955","hash":"a4022bcd0554bcc164f6086b385300ee85c63534","modified":1446038224237},{"_id":"themes/apollo-like/.git/objects/86/68d180caf428885fde4ea8136a6e2d1c1ef17c","hash":"2574789b4965211e779dc17e910416db23f7c2de","modified":1447380506988},{"_id":"themes/apollo-like/.git/objects/86/7356cc411f3f198e825adb4f5e513f895c4e68","hash":"e4f6347f9682d7a58e6126f63adf641d28e7b6f1","modified":1446734920220},{"_id":"themes/apollo-like/.git/objects/87/1e7fc359f29b344d274873fc331decbf5545d2","hash":"d16ae44ad69a46da567fee3ba9839dd268c235be","modified":1452265965285},{"_id":"themes/apollo-like/.git/objects/87/d4dd28542ce6b88b67461cb4ffe8802370a9a9","hash":"1f6285db58c18aa7368161d8794a9570074c982f","modified":1450574133105},{"_id":"themes/apollo-like/.git/objects/88/c228d920800ba8f5c1680d18cf9187c6bcf277","hash":"c893f0616cadb9a64621486cc7aa871b3c4129da","modified":1450189602373},{"_id":"themes/apollo-like/.git/objects/8a/88fe7b9fb91fae91d4eed751646386646d98a8","hash":"29bf537e49dad4176c690015cc20cb82c5cc7265","modified":1446917104673},{"_id":"themes/apollo-like/.git/objects/8b/790988e059bd2d6e50056ddabb4e6c80c0d6ef","hash":"c04c16de23b953de4e28d3faf7be9b4656659fba","modified":1452876602975},{"_id":"themes/apollo-like/.git/objects/8b/80d0ff67c351f96cdf1a2080b54294b51294a9","hash":"75c6bf6bcfe09c36a3a107e741118dd3553b7722","modified":1447510080251},{"_id":"themes/apollo-like/.git/objects/8c/26d0e3fd08de8cc7809792365b8548ad571d8f","hash":"5818e42918f0d5bb3bb90e234192132803966148","modified":1446260308237},{"_id":"themes/apollo-like/.git/objects/8c/b67fc7eae339bc6e420f5f424b651a4ee62d0f","hash":"20713bc3b190bc85386e3f084d8416e78f97603b","modified":1452084985007},{"_id":"themes/apollo-like/.git/objects/8c/f2482c912626f10f607d99b6d4fce8daaf4e11","hash":"9ce803511cc6eddcf067a2cb8d9c285e9265471c","modified":1446908165891},{"_id":"themes/apollo-like/.git/objects/8d/421a4d4614f6d6b61dd3d3d7bf4402520cde0c","hash":"7fc6fef60a2ebc88f5bbf170c97bf126fe629912","modified":1452876625508},{"_id":"themes/apollo-like/.git/objects/8e/1cf0bb6f72e83e20f21dc218e982a00718799b","hash":"e21e0fd547bf158e2090210e3e60a7d658cb8fd2","modified":1450574230172},{"_id":"themes/apollo-like/.git/objects/8e/6dbdb5ed5aca33bee9cab10c9382c678c57aab","hash":"e4070dd894e6a6a4bceb0b0a046c3d3bcc3946f0","modified":1446913124790},{"_id":"themes/apollo-like/.git/objects/8e/f5949fff50decbe9a7c9dc96884db1bc47e86f","hash":"61fbeb13f5c974d389b350ea053ace159cdcf51b","modified":1446037420841},{"_id":"themes/apollo-like/.git/objects/90/d198be3adaa6a126fa6861ea87f63772eb43bd","hash":"81476c576728156d20c68fba5c193d1bb4095a0a","modified":1465346412318},{"_id":"themes/apollo-like/.git/objects/92/02172bce9bf330c7a1fee81f1fdee16f47987b","hash":"e2286829834849cf701059e37bd1b7d67b2f5a1b","modified":1466013001809},{"_id":"themes/apollo-like/.git/objects/92/6abc7aa953f8d90ebd130fa90f93d7d301edaa","hash":"c0edef27cb5d8d7da754cbf6cdd53d4206ea5c33","modified":1446736921212},{"_id":"themes/apollo-like/.git/objects/92/755550f0c13cbf51f01e86b2f87afd9d4651d6","hash":"753cb6850261df3d3fdb6603a7b178935b778c49","modified":1446606093191},{"_id":"themes/apollo-like/.git/objects/92/b56dcff2d61a2c231731bb71a8d982cdb67ef5","hash":"45fc0ae50e57240f0b0bb2111d7f22a5ff104c19","modified":1446041980903},{"_id":"themes/apollo-like/.git/objects/92/e751c326b885503e1712eeea72f5461665f52a","hash":"b7c120ea66bc35b867fddd226ee9cfb8abe238d1","modified":1453170947705},{"_id":"themes/apollo-like/.git/objects/8f/b6b03bb9d4c70682f7e20c70d1f4a71aab3486","hash":"c5803d5d2c94b3de2b137b83636dd5c05f9e8a59","modified":1447510080248},{"_id":"themes/apollo-like/.git/objects/8f/bf443d53b410f1234c4128e8c4a2c3ae97a85f","hash":"392fde8da69f6cdd7556cb9c8bba634c241fcf65","modified":1458313149075},{"_id":"themes/apollo-like/.git/objects/8f/dc570072842084a2d58c8507b056ee2d4e5a46","hash":"0b8d55f0566f1fac3e3ba2b30ce483b3dc29514e","modified":1446085976018},{"_id":"themes/apollo-like/.git/objects/93/22e45b46979f1cea2684aed7a5c2f86af369dc","hash":"b55bb2ee5035bed3e711b8db142c3e4e362e3bb4","modified":1446663529499},{"_id":"themes/apollo-like/.git/objects/93/2afa9258dbcf20368d31b31ee85889cb774635","hash":"401a239bd86845c2244de0c99e574e3cdc6ae40f","modified":1450574253258},{"_id":"themes/apollo-like/.git/objects/94/9ae676245d4790c6b5f8d31a876f262234642a","hash":"65b3321202117b9f27a3a669a9ead1c8b6ce7962","modified":1447380497822},{"_id":"themes/apollo-like/.git/objects/94/e4c35631b172e600630ea8a2145b605c944744","hash":"6b5399f4436f534f1302dbdedf7626cbe76349b3","modified":1466013001809},{"_id":"themes/apollo-like/.git/objects/95/32d4739f5745750e920981ddcaa26c7c0581ba","hash":"950f6dcb3807ca2ba989130765fddd45baa52225","modified":1465480757581},{"_id":"themes/apollo-like/.git/objects/95/f70d01114e8a4ce97dc066596221020e5f64e0","hash":"7dc5473757bbd5e7f7e87ce94916b4034872e113","modified":1450189602373},{"_id":"themes/apollo-like/.git/objects/96/5f560d4decbbfca352ba596b3d65051ac1b3e9","hash":"e57320c0329153517839d538e1688c12159cf759","modified":1450574211568},{"_id":"themes/apollo-like/.git/objects/97/212b3ac659f3a87d456d73574dc918a7e3592e","hash":"b27b8d0f2cc9221d710bd38ac9ddf27444a17a79","modified":1446917104673},{"_id":"themes/apollo-like/.git/objects/98/3ea9a973f4ddae32c6cbb7c8dcdea57f07e687","hash":"2af374dc18bfd9642e8823928ee0c23375217ae1","modified":1459346273467},{"_id":"themes/apollo-like/.git/objects/98/f3c32558e103af36e7339c95d73c3870ec604f","hash":"e1ccae8222d086d783f95496070f9adbaeff37f1","modified":1452265972035},{"_id":"themes/apollo-like/.git/objects/99/7f81b56d68ea74d1bf35fb682087cf2a907f98","hash":"f26d0d7ba56692e5f5675988c75500e6c0b7bc30","modified":1459345856402},{"_id":"themes/apollo-like/.git/objects/99/d472b9f813d8046d7334c2311d9d03cb13bd2c","hash":"f319a8a6824dd2e7a6ece0597d224e776db1ae56","modified":1446085976018},{"_id":"themes/apollo-like/.git/objects/9a/53fb88633694fa19c9ee798c49507643a8f9d5","hash":"3afba39fd7e50e205768296a4da92b73be89361a","modified":1447380655821},{"_id":"themes/apollo-like/.git/objects/9a/bf1c8c39de6d44eef2bc71d2ce2bc76dc3da8a","hash":"49b5aacceaf9bfccd9501330d41d398a4de08ec0","modified":1446606093191},{"_id":"themes/apollo-like/.git/objects/9a/d464b9e6ecf3010631fbf786ff7bc6f561ea6a","hash":"996fc74661b7bc13ed0314ead07d78c422a0bc50","modified":1446037420844},{"_id":"themes/apollo-like/.git/objects/9a/fc2ecd663880450974b94ebbe7eecac15e536a","hash":"c256208f8e01cd308a3065f86570514848b943fa","modified":1458313158208},{"_id":"themes/apollo-like/.git/objects/9c/084b82dc5b204df862d9dc32d294c1a8bf4679","hash":"3aa94c7fa6ec8f825e11e95967e92207d8b8fbc7","modified":1450194717564},{"_id":"themes/apollo-like/.git/objects/9c/63f118e789c0188e8ff69f92673abed879a2a1","hash":"2252fee1668adf578e6c471917c931be6c5739cc","modified":1446782406104},{"_id":"themes/apollo-like/.git/objects/9c/913da1a7d973713cd20e7c72837c055a70b770","hash":"574d29373c7013cce2192ffc8ed7eaf3474f5ebf","modified":1465923102424},{"_id":"themes/apollo-like/.git/objects/9c/c7132c02f84cd206414471bafe45abbb306184","hash":"044a23b9fc7b2e912929376233110930b328e569","modified":1450194717564},{"_id":"themes/apollo-like/.git/objects/9d/0394348b90dc8237eda8e55ab98be82e38c5d5","hash":"f74f27b47da34ae0093803481cef69a71857f499","modified":1459345856392},{"_id":"themes/apollo-like/.git/objects/9d/6047cbd5c4d28861b4aafcbf345ebb70efd381","hash":"9466ca1b771db6ec267aa318e29f24e43cb28a8c","modified":1459345856405},{"_id":"themes/apollo-like/.git/objects/9d/9486c97d0b233b1a6b29b629b62b456efd825f","hash":"2cc447c124dfe9d860e5fda51d75d468c9674ceb","modified":1446917104673},{"_id":"themes/apollo-like/.git/objects/9d/ec5bdb6fb3bad6e65bf7d2e1ea8e04bbd08feb","hash":"245edcc1fa6a05990a7de31a79dcc2389b8fb577","modified":1453170986538},{"_id":"themes/apollo-like/.git/objects/9e/9d4f4e9e9b6946f57e3b4f7ca0643c7626168c","hash":"47f272dca87558cc2791e73029b6bfb8a63f728f","modified":1446606333804},{"_id":"themes/apollo-like/.git/objects/a0/1a0a1ea231b9b0e3d57ba71f5a5f63e4d3351c","hash":"228a6e5f3028f77242c52d23e9c98ab4fb413291","modified":1465401617000},{"_id":"themes/apollo-like/.git/objects/a0/ef8d5ea0aecc7a2da170cf46f019cb95f6227e","hash":"62a825f64389a5ea1339b380752c724b20ef52b2","modified":1466013044246},{"_id":"themes/apollo-like/.git/objects/a1/dd61f6752a322048a06ec594cda83845012006","hash":"7e79194487dc191f230b05a1eabe31affbb0c5ac","modified":1450194705994},{"_id":"themes/apollo-like/.git/objects/a2/428dcfad9bb9f8bd52d6b22deb23477b1557a1","hash":"d0f4f6a562766a5cb5e60cf9fcb60538783891e6","modified":1446037361405},{"_id":"themes/apollo-like/.git/objects/a3/14e86dcaa48d0ecdc939fa8765ad76a166d82b","hash":"4dfadb65b737b04426ef6554b5761c54d3fcc18a","modified":1452788594526},{"_id":"themes/apollo-like/.git/objects/a3/31b5e93c8c76c6ccd18a6965dffb988115ae56","hash":"909fe4d4684c2dd4bc45039d5f08029d544d8218","modified":1446139499964},{"_id":"themes/apollo-like/.git/objects/a3/945888cd0cb5fc1b67df4123cf91968ba4eb13","hash":"bd7ee3057a93cd2bfe5a50700386d176f461f08e","modified":1446914405648},{"_id":"themes/apollo-like/.git/objects/a4/0477f03d3126136567a4b3b92f447188b709e9","hash":"a76806e171acd6b41615319147a7cc09f8e7ba81","modified":1453170986538},{"_id":"themes/apollo-like/.git/objects/a4/d78191b0a4c0240785eeb94a70522dfe8b4a25","hash":"21a174760baeed94171f56ead7ba9484ef2ff8ac","modified":1447353574591},{"_id":"themes/apollo-like/.git/objects/a4/df297d48c9a455e971040ccbdee01b8064903a","hash":"dc0f83c6ad4c0780d51b24e59805410b819073c9","modified":1446734920220},{"_id":"themes/apollo-like/.git/objects/a5/25e1c0899c34ab248412d96af4c1779f56a036","hash":"df0286b7bda8f78f4018e1af256e4e1838d724a9","modified":1446568190131},{"_id":"themes/apollo-like/.git/objects/a5/30c7548b1d8d85699596ca99bf85cf34ce586a","hash":"4afd46a1824a28a26659f055a3662bff0fdffbe7","modified":1465401657383},{"_id":"themes/apollo-like/.git/objects/a5/4d91fb09b3a5a09eb7c3af841270aa15cc5d27","hash":"02c5ae2cd9bdebe93a9d9840db650288e357a6c0","modified":1446260308234},{"_id":"themes/apollo-like/.git/objects/a6/5f362a2a310480111a6ec6406bfba8961db750","hash":"51150ea27f6029c7e33955f37857b7c02a2fba41","modified":1447353574591},{"_id":"themes/apollo-like/.git/objects/a6/6bcf92b9e33adc23d4be4f697a4b4eedbc4a6b","hash":"59f18a93020295b27549410a6bfca12563a8dfe1","modified":1446782402117},{"_id":"themes/apollo-like/.git/objects/a6/cb861c4c44af14eee73f9a1d63cb955198488e","hash":"dd40f70ebc9a0a3431adba34066bec35509057ff","modified":1446782406104},{"_id":"themes/apollo-like/.git/objects/a6/f08b6bc826de70afe3d1080119cdd0f31ae0c9","hash":"3548b87ebf3cf69f82f6e01498ccf76d5b2cd1af","modified":1446085976021},{"_id":"themes/apollo-like/.git/objects/a7/b16c25c41ca5349daa70acaf37f5b4091e3a1a","hash":"4e28b6f7a281d3e9bde6104232c641af707666f9","modified":1446139499961},{"_id":"themes/apollo-like/.git/objects/a8/952149e979f432c248337a010dd1086827fc0f","hash":"92b70bc5400035f2f00e850e9ceb5fa3467e8bc7","modified":1452697914494},{"_id":"themes/apollo-like/.git/objects/a8/ae627fecebc3c27d4fdd1a26ad70665ffe9bbf","hash":"ebe493f0e7bb8455494e197a4503d519d7b202c7","modified":1446833407161},{"_id":"themes/apollo-like/.git/objects/a8/e06724a2816b7be34e1400eee9b6674e6a51bd","hash":"3d41db4b7a79f4f13777b6de2d1d870f1698a689","modified":1446736921216},{"_id":"themes/apollo-like/.git/objects/a9/1a8f15d0f22eb6d5ded4ea5ff79cc0635dccd9","hash":"4e35ceb69ea8ff650e15c25fcf85b0eacc5b79aa","modified":1447170156178},{"_id":"themes/apollo-like/.git/objects/a9/2bd0582f942d43c6dfab47c3c53e9c284543cc","hash":"e3c2b92fc577e91ecd5c3643f9a54f734f6f8a59","modified":1446044226928},{"_id":"themes/apollo-like/.git/objects/a9/41ad4f9e916a76f7ad19073f400e778ccc6ddc","hash":"2fdbe76b60d3d3dd0fe666e9c14bffbbcd61d74c","modified":1445946818246},{"_id":"themes/apollo-like/.git/objects/a9/4fe6533272fdf350c032c485a14497d627aa5c","hash":"ea57d66bcdcfbfa1b49750183f7d3ec3e3ea5955","modified":1446913147054},{"_id":"themes/apollo-like/.git/objects/a9/6238650849da5480558104344360cc1f50ce03","hash":"8bae044f93167aa7f0927c5b240f1ec1d0216e88","modified":1446734920217},{"_id":"themes/apollo-like/.git/objects/a9/b0b59064941ca3992f8d2ebfd92bc1799fb6f8","hash":"02ac675b8c7a8a2729423632c1d5ceac209cc35f","modified":1450574194932},{"_id":"themes/apollo-like/.git/objects/a9/efdd24bb13719f889c7102c716ffa37712b6dd","hash":"e356538db1571a44394fb1bdbb1d6bfe457ca2f0","modified":1459346281347},{"_id":"themes/apollo-like/.git/objects/ab/0bef02f5f7fdfeeb46faf0ccb5653365c8681e","hash":"e79c6b8f60a34f51c8f7b534a9fd770f874b8f5d","modified":1466013044246},{"_id":"themes/apollo-like/.git/objects/ab/d5d7aceb882f0398c1e74ace8eddd484a75638","hash":"b06069dc68792443f28697a702785c9706488bdf","modified":1446663529499},{"_id":"themes/apollo-like/.git/objects/ac/4e303f43cd315afe31c2b6ca0c924401f044b9","hash":"a08eaf3bd695e800478142c0497008779ad568f5","modified":1446782402120},{"_id":"themes/apollo-like/.git/objects/ac/d7f93a820373a2b3c50bbcfdd0e0037d2ad801","hash":"ba5ed37c28fe06bea840ff6ad86f52e4ba173c34","modified":1446736921216},{"_id":"themes/apollo-like/.git/objects/ac/eff9098998483a97abd1823fd90201b6c49ddf","hash":"7c31ec726470d85e1aabc99bb622edc7eb64d655","modified":1446568190128},{"_id":"themes/apollo-like/.git/objects/ad/6a78b6fc58055fe8ee9c7672899de77bc19315","hash":"ad24f450b4cf0db8d235e40db4f89f5e5975d0cb","modified":1459345877758},{"_id":"themes/apollo-like/.git/objects/ad/c9d2d19c696cba74dbae76b711747675442110","hash":"30d8b00a849cc215194add2dcd9771721af241d7","modified":1458054370512},{"_id":"themes/apollo-like/.git/objects/ad/fd1ecd9f00407371361e0713f272a55bd4257b","hash":"5f2454422d88b0e97ff7ff4d02561b8f197d7ec4","modified":1446041980900},{"_id":"themes/apollo-like/.git/objects/ae/d588a9acc5c16d928e6b1a9a27f598bd4b7a86","hash":"574b0e53fbf05adddb2aba50cac5fa913e9898ad","modified":1450189602373},{"_id":"themes/apollo-like/.git/objects/af/0f4ae0b516d016248cf55460f73f0fea356174","hash":"07aba9b581a914894b9faade6762cfd8257482dd","modified":1452697914480},{"_id":"themes/apollo-like/.git/objects/af/69b5c45b7a1e0082ef1891355d42d7d8b1dc82","hash":"bf01f2cc8b6090b55687b6ed38897318f630425a","modified":1447353574584},{"_id":"themes/apollo-like/.git/objects/b0/7a4fd342401e87edc08aa0ecefe6c78fcc88fb","hash":"a86bddf02ef6c4a2696e1822bc7b4cdb40ef02a6","modified":1465401535017},{"_id":"themes/apollo-like/.git/objects/b1/092d883c5166f9ec7a3a6102af07ab78093391","hash":"a1888158b26c536f7e0f276cd7bcd98a89bd98a2","modified":1446913147057},{"_id":"themes/apollo-like/.git/objects/b1/2ef514c959db5c7b64a17b16470362af60fdd5","hash":"51c699a018017ea5a30016c9977b919bcdd41a2c","modified":1450194705994},{"_id":"themes/apollo-like/.git/objects/b1/59926f0b96c58310bc1c834e285fb600712c23","hash":"496fc592266f8a2a8c0b89184d18c5a79e900ba3","modified":1447510080241},{"_id":"themes/apollo-like/.git/objects/b1/5cc4050dab0d420170cf530c757353708bcf39","hash":"4bf3ce9759619680763554a46379615d26538fbc","modified":1450574253258},{"_id":"themes/apollo-like/.git/objects/b1/920686a4f0f5297fc72852e7cc7e4a4a550cb3","hash":"3278852ceb70ee666ddd8c541decb4e6ae0694ff","modified":1446561945836},{"_id":"themes/apollo-like/.git/objects/b1/b00e5195bd82213e75c7fa28240473be04f09f","hash":"03169a0804fbf047850c2f170270edddc3c53c74","modified":1446908165888},{"_id":"themes/apollo-like/.git/objects/b2/7d40e2c2151115ed5cce8e03dbfcbb8feed77f","hash":"47d21693273a6781d377cae51a67b0130e4fccf8","modified":1465923127857},{"_id":"themes/apollo-like/.git/objects/b2/f4d9141426a9b68eb99714a08c77d317030b39","hash":"646d68623fcb04a86b174675bf000428d6ab4886","modified":1466012994343},{"_id":"themes/apollo-like/.git/objects/b3/2b16faac56c48f84661a4776a882642e47dc47","hash":"416e85eec37cb016b0273de0e676c51dd8e52157","modified":1458313158208},{"_id":"themes/apollo-like/.git/objects/b3/b7cf169756da7f9a26b3dd399367decd523997","hash":"f7216bf6bae97a3d2764631199358959849daf8c","modified":1446055887000},{"_id":"themes/apollo-like/.git/objects/b3/c78e76a809aebaabd8e4299edefb66101d64cc","hash":"f646f0167a28c7ef6c9782dc45695bf17105aead","modified":1458313158208},{"_id":"themes/apollo-like/.git/objects/b3/eccd84030f9ac03863856b6f7660ef9b4f8b78","hash":"d546ece92bcb0184600ad838f4bbe097f2f675b0","modified":1466013001806},{"_id":"themes/apollo-like/.git/objects/b4/0416ea26e73e77169e931516d728df56bd7f4c","hash":"0bcaee678da1d736f954f92f1f43baad322e4d94","modified":1446139499964},{"_id":"themes/apollo-like/.git/objects/b4/bd10c2065bbb8141e1aa3b9f0d9e4a63a6ac83","hash":"fed28c586d51935f20a6f887bb25d3ef2006f8ee","modified":1452876625504},{"_id":"themes/apollo-like/.git/objects/b5/47c58486e3ff9650f78ab543058d89354de3ed","hash":"118fb04bebbc76332b3493fb33c1db2bea0c8953","modified":1466013044246},{"_id":"themes/apollo-like/.git/objects/b5/54bc950973bff406d450221ff0443e9999ae34","hash":"ffd0d349fa26c7a60a1235144d60060ef2f9fd93","modified":1446657722749},{"_id":"themes/apollo-like/.git/objects/b6/aa9a3902551e60d4eab7326f54db49dc9a35f1","hash":"e9eee4d0eb515ff66eb971e5d57ce5fefd3cbebc","modified":1446734920217},{"_id":"themes/apollo-like/.git/objects/b6/e22622b322bcd26ae44047fc9d886ebf6cb417","hash":"81bb33addc3da7e5fc887bbde55ae643f6d747ab","modified":1452697914497},{"_id":"themes/apollo-like/.git/objects/b7/34494a9f1e3d60aad8d6b40a7d554a1e68cc47","hash":"b5fc1f71e1601a7c08694d72d895dff45f5c3e8e","modified":1447510080238},{"_id":"themes/apollo-like/.git/objects/b7/35e7f52916edbe6f200080411fb05b95adf178","hash":"248ab71145f8fc2a24773291ad4f0a5a84bf403a","modified":1465401520054},{"_id":"themes/apollo-like/.git/objects/b7/cf9286fa13745c0de9f12308e08f06fbe8c840","hash":"b63823007e692cf5c024a6d596aa694bcce31607","modified":1446139499964},{"_id":"themes/apollo-like/.git/objects/b7/f79ccce172eed00d630f167c01ba9dbee53361","hash":"38dd6745ba2ca491dae2c7b17a25a60673387606","modified":1446056005064},{"_id":"themes/apollo-like/.git/objects/b8/090f653c8e4ee45ed1218c226535c7b43fd94e","hash":"b9d0731bc5159c7c88bfe4320d33d371acc07ed7","modified":1446038224237},{"_id":"themes/apollo-like/.git/objects/b9/674eb112f748af7865cd39011da9c5e295fdcc","hash":"06da436f91028128add1bdb9e0732ff718bc0df8","modified":1446139499964},{"_id":"themes/apollo-like/.git/objects/b9/708a11b50f8c921af65567c1f89acc17818391","hash":"55f4956441ca5918dc157b2a727722e103d6a983","modified":1447084926143},{"_id":"themes/apollo-like/.git/objects/ba/582f4b0bae65da95487f72fbc57ad8d42552a6","hash":"c01dc90cf5c1b8fdb6760636b3a48d7a6f16229d","modified":1453170986535},{"_id":"themes/apollo-like/.git/objects/ba/65c30fe833cbac441716f3b6ae60e4665af43f","hash":"f426a5f8765ca83a2102107396f768d8f1b5ead5","modified":1452876625511},{"_id":"themes/apollo-like/.git/objects/ba/8407d13424351716a41918cb0edcddd73541e0","hash":"52eb6b1ab9362d636082bb8710fda10fcddacd32","modified":1451928407271},{"_id":"themes/apollo-like/.git/objects/bb/3c70e2f5d6cfc6bd31043a974ab5013eaf8d5f","hash":"5bc7dbc21675e1c67c570a85d3294f0cc73777a8","modified":1452267467225},{"_id":"themes/apollo-like/.git/objects/bc/0439c6fdbb93653cb1ba45b7c3bc839c76b923","hash":"cfe153c1f02210947e4c63d8f3e60ca646cd2094","modified":1446056005064},{"_id":"themes/apollo-like/.git/objects/bc/2201b0466e56af7b3dce86acf2c856e8d9b1ec","hash":"513bc8ec5d5ac6ac477b40260a17c257a7f89278","modified":1446568195808},{"_id":"themes/apollo-like/.git/objects/bc/344788d14916d5d41366b1901d23de9b6cab53","hash":"9f355241647ed9379f63ecd2a437fea1a2f8503f","modified":1446056005067},{"_id":"themes/apollo-like/.git/objects/bd/3d7d5c1725af0519aaaca7830abe2daa8c8f4a","hash":"7582c5da746b14c295cde1c57d7b818e6434056e","modified":1452085002790},{"_id":"themes/apollo-like/.git/objects/be/227b9cba358dda31d592e1bad4ebe11ee5ff3c","hash":"0dac7e7b14aeb3688779d8107f5c51581cdbf54f","modified":1446908165888},{"_id":"themes/apollo-like/.git/objects/be/87aa0ef5aaaa7f634f966d285f5bbb3ee79ab0","hash":"eacf684a5d2551329948cd40ee9904a6dd736d53","modified":1447170156178},{"_id":"themes/apollo-like/.git/objects/bf/7a6ac5a3b809292533a92d9a0bb2407e4352e5","hash":"65006f09ac398d0b9d4d844b2d0caed3dc807189","modified":1447297903973},{"_id":"themes/apollo-like/.git/objects/c1/1d7f572104859fd43d3a603e39bf95f37b3379","hash":"52171d0c9453090322424964b6ccb16ac2d15932","modified":1446085976018},{"_id":"themes/apollo-like/.git/objects/c1/354b4039935a642bcf4651b232939bcfa1b355","hash":"9b3873853b8e504c1a07bb9f645bce6b74ec931c","modified":1447380655821},{"_id":"themes/apollo-like/.git/objects/c2/4cb64d6b9a063c45a9a62cb594945601134f31","hash":"dc16cfa6924e0d37c1245b0cdaf22eca18d422d7","modified":1446833407165},{"_id":"themes/apollo-like/.git/objects/c3/0813b37d11a32ab0079244a9712d3168ef1456","hash":"ec184edc5f95ede22f40975200f4eb920f9a059f","modified":1450574253258},{"_id":"themes/apollo-like/.git/objects/c3/1841a07833653c1bbe0f839605069d401a1d41","hash":"2ef672eaad11bad921b3b49947e98a3cd7efb711","modified":1446606317000},{"_id":"themes/apollo-like/.git/objects/c3/69ca2a3e4a6f2b7b69fdf1716a01ff82ea3e40","hash":"e23e83e9b6aed50f8aa705f8a71eaf5ad36dd667","modified":1459345877758},{"_id":"themes/apollo-like/.git/objects/c3/a8ccda56fedd9cb74fee117d0fd2c9de4a6e19","hash":"bace2c836dace2cf45376bab8ce05186a3cd3319","modified":1452788594523},{"_id":"themes/apollo-like/.git/objects/c3/c3c77c0e138239b19e971247d7e989402dbfc0","hash":"ae3f6021ea0018ae039ad9f02752c5eaa18c77a7","modified":1446056005000},{"_id":"themes/apollo-like/.git/objects/c4/4c5446742795e638e13c10c42e9fdc6cc2c406","hash":"89982752e1889796caedde6440c821c5e5cfea6c","modified":1450574194928},{"_id":"themes/apollo-like/.git/objects/c4/f0afe2bbe0c70038bda5dd5153102f4dfb30de","hash":"171e72c9ed20541ae0cab5562db4d9064d4cb14d","modified":1446736921216},{"_id":"themes/apollo-like/.git/objects/c5/9b172173c9573341545057d61850b129d3c6a3","hash":"8154d1472a29c9a877b1d686d0fa778175afa13d","modified":1446085976021},{"_id":"themes/apollo-like/.git/objects/c5/9e65727ddafa69feb7566aad3433761fa047e8","hash":"9065f84489e0a195f196e521d8e94745cde91cae","modified":1465346412315},{"_id":"themes/apollo-like/.git/objects/c6/3279bede8dfbc66676c87149bff9eaf17c99b7","hash":"66cafd54391b17d219e3feec5b40434f9d84e57a","modified":1450574253258},{"_id":"themes/apollo-like/.git/objects/c6/8a35ac9ef3234fafbfe9de06e4e8d6de7f7456","hash":"5429d969ec4676753c7ee79b587908893712ecd9","modified":1458054388295},{"_id":"themes/apollo-like/.git/objects/c6/ec1dd137fc55925dcc138ac0c9b8922809c919","hash":"3ed7bfdc9e15d5c6203b9737fce5c7360dc01abc","modified":1450574211565},{"_id":"themes/apollo-like/.git/objects/c7/eaedf9c012423cb6b5a4e5ce46634728e248a1","hash":"b7b05d98b81b9c7e19113b36efe52a73149fb4b7","modified":1445946799600},{"_id":"themes/apollo-like/.git/objects/c7/ec3508c716216dcd66c0b6f7469f96145739a4","hash":"982775aad2b111a3073d693c364a0e5214864c08","modified":1446657722749},{"_id":"themes/apollo-like/.git/objects/c8/0878a988686364dae6a99af514f6dfeebc173a","hash":"a703465398d8bab812b1e79afe00a302bca70adc","modified":1465401657383},{"_id":"themes/apollo-like/.git/objects/c8/a58c6c719ab147104651eda689e8cdcb3610f9","hash":"6a2a8acfca7e10a9ca1d65fdc36e2acb3a1dc6b9","modified":1447353574591},{"_id":"themes/apollo-like/.git/objects/c8/caae8f8b13beaee5e68925295ac1c511505c5e","hash":"f58b43ac9e0dacfb5b945f170eefd77f2473a5a6","modified":1465401614097},{"_id":"themes/apollo-like/.git/objects/ca/6e65dc88fab907b61626b32100c72ddb334aea","hash":"6b88e0f36b845a721996a87e494bdae0eefd622e","modified":1452876625508},{"_id":"themes/apollo-like/.git/objects/ca/711045116c9add2c87bef6d490a66f3abfff40","hash":"06b8ff2c90026ed31f37d2f78f5e760cc3ab7293","modified":1446663529503},{"_id":"themes/apollo-like/.git/objects/ca/716af05d40aaa345326268bd909121e003c75f","hash":"c73f9558824c571e6bbb4b0a64e73f4b6ce7a780","modified":1445946789153},{"_id":"themes/apollo-like/.git/objects/ca/72a952bfe60cbae18d0da7dc6dc1c7f7f683cd","hash":"217253f99ef292071758e9ab007b00036f45bfa3","modified":1447084926139},{"_id":"themes/apollo-like/.git/objects/cb/2b6b84de38e8b008016a6ef8fe80677567f0f0","hash":"a9bd713eb34ffccccb168f930a9da298d1f6c833","modified":1446606317000},{"_id":"themes/apollo-like/.git/objects/cb/d278985f9f81fbc6a312fe57a1f37741dacdd0","hash":"439239607ea3b6e4efbbebaecbeab3bb07c4612c","modified":1445946852133},{"_id":"themes/apollo-like/.git/objects/cb/fe788ca4d2196c7f170fda7156693ee576e148","hash":"fcdb47c84e73ed1ca4954aed4da15580d8b61fba","modified":1452697914490},{"_id":"themes/apollo-like/.git/objects/cd/334e96cd5aa977d236210908c1332ed955b142","hash":"4fa69332b7905bd9f34c30812e3e1f914f8ed640","modified":1447380506985},{"_id":"themes/apollo-like/.git/objects/cc/e785344775effa181a747811783242ac184a0a","hash":"5669b46f0d64e472d14edd6304a2b28d4651b78b","modified":1459345856402},{"_id":"themes/apollo-like/.git/objects/cd/9ce0195c69f1dc8b612252c2b286f67fc0414b","hash":"911d5c0047eca9b417847286d9269a0f53099b2d","modified":1447338399010},{"_id":"themes/apollo-like/.git/objects/cd/c8d397a94c4398180f10416509dd4bd6fcd916","hash":"0fbf420c519e3b9aae190d95cd0887347a02f318","modified":1466013044246},{"_id":"themes/apollo-like/.git/objects/ce/0414e5a8c61d91a76594883e4fed4c58ad7ee0","hash":"b078f4a482166e02c3d1ceea6caa14014819ae01","modified":1459346281347},{"_id":"themes/apollo-like/.git/objects/ce/55dbab92f1bf935be53b80a1e69ba8ff9c95ac","hash":"ddd5024378cf1165dd605eb3500670cbe09cac7b","modified":1465480757577},{"_id":"themes/apollo-like/.git/objects/ce/6705281fcedc3837c1a09f37c91d2f2883bbe5","hash":"b7c8d2be4d484997e0a81d5f06c0751b3c72f7f5","modified":1446037404201},{"_id":"themes/apollo-like/.git/objects/ce/8e1056e7254f6e81036e1e641ad1eb0e769cf4","hash":"8d72df0f54616407b3d909e27af9a1e01e01fed7","modified":1447084926136},{"_id":"themes/apollo-like/.git/objects/ce/f65798ecdc6801acb7a7d4f6c23fc3c56513b8","hash":"0850be42be687042f89dad9876e9e9d9e7694149","modified":1446913147057},{"_id":"themes/apollo-like/.git/objects/cf/0779a56d21cbb1adc85c413779d520a2a62f54","hash":"9cb688a9427e29abeb4e5936608ee4aece13fbb7","modified":1452267467228},{"_id":"themes/apollo-like/.git/objects/cf/bb4ff1b10dcc600be0ece300fd327470d12b6c","hash":"9d23e68962c27f77272b2d7a5b5d096697cf516c","modified":1446056005067},{"_id":"themes/apollo-like/.git/objects/d0/7764e8ccde579b88cb8d9054d275537551c771","hash":"97a216ec8a5f4564e9736e3e7154764bcb657e3a","modified":1446833383181},{"_id":"themes/apollo-like/.git/objects/d0/84f710e14230a035571a11d7e992c99647933a","hash":"53229c97859b88e5eed3bb65f8220067bff56917","modified":1458054370512},{"_id":"themes/apollo-like/.git/objects/d0/b2a8e8e9ffe0e60e6584667426020087dfb06d","hash":"c0688578ac10773472178427d075e41275c5007a","modified":1446846125741},{"_id":"themes/apollo-like/.git/objects/d0/d0e41dc57a836fa95cc066d5c26cb987cb08fa","hash":"c24ae4bc9dc20bece4e47b8eefd1cf409d1ac01a","modified":1446663529499},{"_id":"themes/apollo-like/.git/objects/d1/852b71659a271dce9c9c8722454d53eae9b49f","hash":"da54c99f3601a80d7893a4d4928aad65d2c619e1","modified":1453171273057},{"_id":"themes/apollo-like/.git/objects/d2/87f6d93ed94c978fe00a78e8fb0117158614af","hash":"b2cabb6696c2e7eb0e4c04740b831e9c234c0445","modified":1446913147060},{"_id":"themes/apollo-like/.git/objects/d2/bfcef820cd79a5ffcde7a9c052a004d2e6ac3d","hash":"97b1ff9ea3308ac945eee263073fb6fa908e7cfe","modified":1446663529499},{"_id":"themes/apollo-like/.git/objects/d2/e886f056d708ef9546305f79580653a187d197","hash":"f8a97f013c3e5d63eb13a8b2bf873059099c9bd9","modified":1446044226925},{"_id":"themes/apollo-like/.git/objects/d3/5f20b661840aa689aacfae93aa8d42fc5db761","hash":"8016b9c7a2ef981a756d34d7e13f1acba07a4296","modified":1465401657383},{"_id":"themes/apollo-like/.git/objects/d3/f44b187b4a057444e065152771c513b8cb9c1a","hash":"bffb7eda5087e1f5f871011bd5678134dd435315","modified":1446085976018},{"_id":"themes/apollo-like/.git/objects/d4/221a7482e1bbadf267269a796a9675acc754db","hash":"f94ed044d2be8e8c6dacdece0dc6489a8e72319b","modified":1446657722746},{"_id":"themes/apollo-like/.git/objects/d4/31ca1a499cd976c3390f579b4b6b7acd2f082f","hash":"3c740183979fc7c5a0b1e1c28dcaaf37a1538225","modified":1465346994784},{"_id":"themes/apollo-like/.git/objects/d4/396c788b09a3c68410add0613556c5374d9344","hash":"570919a2e2f574a66097cea9e9b01d7ad31c9ede","modified":1447380653741},{"_id":"themes/apollo-like/.git/objects/d4/70c8dd15d820c9eb8fd624655bffd0279e9c77","hash":"e416297781b5e1810359021a8aad88dc28de4bda","modified":1446917104673},{"_id":"themes/apollo-like/.git/objects/d4/dfbe1cbca4bbe76390507aa4daa087cd0d06c2","hash":"d48f8beb7002efe8d58117d7681740e84b9db39f","modified":1445946852136},{"_id":"themes/apollo-like/.git/objects/d5/ae423da7764133b07b1fb726bd62e1a19ee44a","hash":"33d1c5f54dea2d7979814dc27fdfa844c766f8f4","modified":1459346281347},{"_id":"themes/apollo-like/.git/objects/d6/59205960ed6d9f0652fc6c99fd90b898d1c6e2","hash":"c832d234e8eae88914578f53aea2f99b70c6f978","modified":1465923102420},{"_id":"themes/apollo-like/.git/objects/d6/83fb372a49bc2ad996acd9d83d052820294406","hash":"66fdb1d7b08d4c8bf676271b2fea639d641274be","modified":1447170156175},{"_id":"themes/apollo-like/.git/objects/d7/c23047c02740c17202ce090d82914cda1bddb2","hash":"a34a864b90a652a48e3da492bd53a0a70ba1584f","modified":1465346412318},{"_id":"themes/apollo-like/.git/objects/d7/c9400986896f801bf72e28d570734e28b626e2","hash":"9ce3a4cec9e11218d050bdfc1fd507ea48e4c050","modified":1446561945832},{"_id":"themes/apollo-like/.git/objects/d7/d13fa288b7573c2c6083dc4d1b09a372ecd52d","hash":"693bc64b87fdd8d872fc7f7a7ca2598cab2ed4bd","modified":1465346994784},{"_id":"themes/apollo-like/.git/objects/d7/fb72f4a241bb3323c59be52c96405ffcc5ec4e","hash":"cef60bbee4f30671b438252d8c25587b85422d95","modified":1447338399010},{"_id":"themes/apollo-like/.git/objects/d8/d67714e2aeb848b05cfda2253bb3239e608b42","hash":"16cb0b25d5cff956d5fe822e8e512bbd2d2fe143","modified":1453170986538},{"_id":"themes/apollo-like/.git/objects/d9/0184aa7dd750c424e391faf487a3cbbec788bd","hash":"14a10ecab9812a0ac1eb095cebd16f61371f2acd","modified":1447297941662},{"_id":"themes/apollo-like/.git/objects/d9/19c849a064ca205fbf873b15ddb7fa13896f17","hash":"d623ce6ea164635fc6c614fcde76b9e67f186258","modified":1465401617000},{"_id":"themes/apollo-like/.git/objects/d9/3e4b72a114371fd9d5d4cccb158dc7da52cd05","hash":"67b8a7ab0b008f1214a0f125b46e47ee569e954d","modified":1446782402117},{"_id":"themes/apollo-like/.git/objects/d9/66cce8dc8c7bd0bb836b3b7850d1c577df4e2f","hash":"9c57a9c7d28b43285256e972815814f09c2e0d86","modified":1452085002790},{"_id":"themes/apollo-like/.git/objects/db/55533e7eaf44fa082ba24a514cbf2ebe2bf5d4","hash":"f3639a1fca8f69039be8db9d5234b31351659429","modified":1446908811240},{"_id":"themes/apollo-like/.git/objects/dc/25dc2e7ce6cfe4d27f1337bace481653eeaa0e","hash":"84d0100ec86c652b9af48758eb2a54d213e0a438","modified":1446734937207},{"_id":"themes/apollo-like/.git/objects/de/1e995fbc9f836a32680af04d3345ce48be9990","hash":"bbe9c4ee4726ef412c6c72541f0a4c7ffd9ffef6","modified":1459345856398},{"_id":"themes/apollo-like/.git/objects/de/831d5c3d5d9b8c41e78e12544690866d33d6d4","hash":"0c8879eb7641cadbe64a671143142ecc0d753bd8","modified":1446085976018},{"_id":"themes/apollo-like/.git/objects/df/4802fce61d9315d88c782245fcba8bd6ad9cdf","hash":"56c8dd3c170fb4c34ee7702df2dd2eb22d566f87","modified":1459345856395},{"_id":"themes/apollo-like/.git/objects/93/bf9818f60506329ea0433f637fe5a22e12af63","hash":"a0be04cb37dfb13e10fa8a2dfe4578b7038b6c6a","modified":1446041980900},{"_id":"themes/apollo-like/.git/objects/df/5d7ff0eba3c1e1c7b9035049a1bf2c421ab8ea","hash":"83530a68ebdab21a13dd887e93254c92f0bfd817","modified":1466012994343},{"_id":"themes/apollo-like/.git/objects/df/cce12824643f8b85ee3677217c8f500fe686ca","hash":"fc950466f6d45645130ae84780ed723eb10dff73","modified":1446663529499},{"_id":"themes/apollo-like/.git/objects/e0/62bd9838c1c265082a29708e7354907b79351f","hash":"b03c23d5d75e6a0509b131a0e83c83c97bdf4738","modified":1458054388292},{"_id":"themes/apollo-like/.git/objects/e0/c16330911984b5aff7b44a76d22f9da47320dc","hash":"8980414b05702b062aadee52fd4d4e0adcbe1069","modified":1452876602978},{"_id":"themes/apollo-like/.git/objects/e0/d5da1529083d883aa0f2b41b8f5b10f6fbb88b","hash":"89da782f5f3177e4cc46d2783c0339abd3d6e7a4","modified":1447084926143},{"_id":"themes/apollo-like/.git/objects/e1/75ea97358e4821d74c48260798c0cb26122abc","hash":"72c8825ef6265cfdd0e7ddbaed56e925127b3b9d","modified":1458313149071},{"_id":"themes/apollo-like/.git/objects/e3/fde9bc0a101fba072758dbcb9378a324378f34","hash":"b4c1aa080d2240a958d79c2a07886f935e8140ae","modified":1458313158208},{"_id":"themes/apollo-like/.git/objects/e4/7df8182646883669f35ec0b2de27979edd8b13","hash":"f5e86a6b09ba53d65834ceae8a6e70616f24078a","modified":1446846125741},{"_id":"themes/apollo-like/.git/objects/e5/097cce6471cd9a24cffe79faa282716e627e03","hash":"5a3dd3365d5337245d2f6074e1e03eac0dbc6bdb","modified":1446038224240},{"_id":"themes/apollo-like/.git/objects/e6/06d759b7a3d83447cdc27f6373c04a7ace2528","hash":"e64a3e049c8f4f199b4a0bc1a17d5f39beb3877c","modified":1447353574587},{"_id":"themes/apollo-like/.git/objects/e6/260a64c7f40bf82acc65e52d00d449dcbd29df","hash":"cb51acecd72e345fc13bc644a8b918af180c8a99","modified":1452267467228},{"_id":"themes/apollo-like/.git/objects/e7/ce5814dfc23fcbd86425b1419d4308c773e7a8","hash":"ca145b67e41e3378cb4bd041af5663e94c8fe027","modified":1446663529503},{"_id":"themes/apollo-like/.git/objects/e7/dab5b272b85fcf616410ca3127481cb7143e89","hash":"3b057c9004698f4ec9c9ea80344e92312fe4b5c1","modified":1466013001806},{"_id":"themes/apollo-like/.git/objects/e8/4085d22022041e7f113e3c087649c3390c6743","hash":"bae50a81f97efaba6e6ee786e4b17ffefb644951","modified":1452876602978},{"_id":"themes/apollo-like/.git/objects/e9/88549d4255f5c1222ece12b01971dabacb7c19","hash":"a7ee2489c8178320afe90f1f66b07346c1c68737","modified":1446833407165},{"_id":"themes/apollo-like/.git/objects/e9/c4d9fc926cdb7576c84915f1adc90b0b66f571","hash":"4ff40cae0b6e1e4c9974d8bef2e62fac74e4cfa2","modified":1447297941659},{"_id":"themes/apollo-like/.git/objects/e9/d9701f38ce3d4d8ab05a7d9314f06abccfedb0","hash":"d8a9255515ecfd6ba39914c37cffc71bdccd53c0","modified":1446561945836},{"_id":"themes/apollo-like/.git/objects/ea/28ed1c95302cdc42f8dc97af9db6b1f8b1e7fb","hash":"4a116096378efbd353e99e7a45d5116f4abfc4f9","modified":1459345856408},{"_id":"themes/apollo-like/.git/objects/ea/710460da1ac92b863823fa776e9c53a096aef5","hash":"46c0983d122fd3a22721756a22585f97b8171acf","modified":1452267467228},{"_id":"themes/apollo-like/.git/objects/ea/a01e37ab0ff844d22a7630993bead684b3ae7f","hash":"cefb97bad1ffe11e881b1b52e388850101e92518","modified":1458054374000},{"_id":"themes/apollo-like/.git/objects/eb/2c8d6667b6f3526c4f3e2df507c51f29abb9b0","hash":"564ec4d5b43bf1dd6a49f0ca315278b84225ba53","modified":1447084926143},{"_id":"themes/apollo-like/.git/objects/eb/47abd9e68f9058ba9a76107528eb3e64c64b00","hash":"0cc84132fa1b121869761594422d107fb102f97f","modified":1466012994343},{"_id":"themes/apollo-like/.git/objects/eb/4a53fe153fee1ae01e7833e55e6ee7efa8b146","hash":"747eafa84e05bbeddde28dcdd0a17d852579a164","modified":1446044226925},{"_id":"themes/apollo-like/.git/objects/eb/4afd487bc6557bcc197d91080d8026278ccb08","hash":"ce1b29ad50fad2e85101182ece30940bc6e52b2b","modified":1452697914487},{"_id":"themes/apollo-like/.git/objects/ec/d06e458a7c079d3238eb8eb259987165451187","hash":"960c54f33165e8fbfd2d925349f10fb82589c8e9","modified":1465401614093},{"_id":"themes/apollo-like/.git/objects/ec/e3237e9365c0bbcb0dcb6c4b398596c342e010","hash":"816034c0a3b7b3b87d7b933a115ceb558e93c291","modified":1446085976021},{"_id":"themes/apollo-like/.git/objects/ec/e5ea748c788642061f38614c74cac4c37da20d","hash":"9f450a144f221e6616de26013a425f4c1b4a1283","modified":1445946789153},{"_id":"themes/apollo-like/.git/objects/ed/5741893fcb6899c177f1aa27e2183f97449aa1","hash":"6a702f9bcfdf689fd0466227bcf2b20281d13edf","modified":1452876602978},{"_id":"themes/apollo-like/.git/objects/ed/8003b99c88f5f4bbca9ef9eb6c574c6d2e2710","hash":"55c16227b07f7915d2cf0799a47495258c01d150","modified":1446913124790},{"_id":"themes/apollo-like/.git/objects/ed/b943d519ec5dfcbcc015c52e0608b178ec1120","hash":"5bc4ab08efe7f7f53b276b5b1d6364c63b95236e","modified":1453171273057},{"_id":"themes/apollo-like/.git/objects/ed/f18cff07a7caf1e7f029350d3219ba55f3584e","hash":"9686522a24ff16e1f3e02c7197fac3ddc06c129f","modified":1446606317000},{"_id":"themes/apollo-like/.git/objects/ef/1305d78b053fa66fd5921dc2cc76548bedc4e7","hash":"970328a803ec006da055e99da103601866c103d1","modified":1447380506985},{"_id":"themes/apollo-like/.git/objects/ef/1f93326765573ffea1b515b506fa9e46062400","hash":"d7ae7cf1f4a0a066d204317b2159b81f2c087ffe","modified":1450194705994},{"_id":"themes/apollo-like/.git/objects/ef/3db31f00fae9ae8a85130e23daa846472412d9","hash":"b606a285855e7deebbd4ad4921ff9a01c278b966","modified":1446782406104},{"_id":"themes/apollo-like/.git/objects/ef/69abcfef3bfe8d17ac1ec6886cb9173b485968","hash":"0c917bb83ca146413016a901799290e104dea6fb","modified":1452788594529},{"_id":"themes/apollo-like/.git/objects/ef/b08fb9efe6a047cf456dd9f7befe76adf2f4f4","hash":"9a87dceb237c5bcaabaeb386aa7f67ae8bdfdebb","modified":1447338420117},{"_id":"themes/apollo-like/.git/objects/f0/85d2c0ee33be76aa614845dfe3b76b9f40b6af","hash":"254e3016f4e928eb333930ecaabcf83e4f64023e","modified":1459345856405},{"_id":"themes/apollo-like/.git/objects/f0/ad092c6ae7cc0fef38e9d5951664fe6969879a","hash":"360cb772a612182b561b3a98519bf51108303ffd","modified":1465923127853},{"_id":"themes/apollo-like/.git/objects/ee/8089158a6d06834bfa1c73fa55db2c595d99a2","hash":"7f8845ca6cae42e2c280e5dab0181941c46a530d","modified":1465401617000},{"_id":"themes/apollo-like/.git/objects/ee/9def68bf7f10de20092475f07a0776df661987","hash":"cb2766a3ad32083ddc99075f7e2a6c0939aa5f43","modified":1447297903969},{"_id":"themes/apollo-like/.git/objects/ee/dc0e9e3cc60c7bc0aeeb041691aa3bf3adedbf","hash":"f0c9a8e8252394c9e59ef85d9196dc255b02c82c","modified":1445996948058},{"_id":"themes/apollo-like/.git/objects/f1/07eedf661a097a6d93070c9cfe28a222df9bd1","hash":"b6d2e70c457bf3e9b0c44891c60b37ef5c358d23","modified":1452084974867},{"_id":"themes/apollo-like/.git/objects/f1/235b287a1745bff42a93e5af954120ebaab37a","hash":"8defe96ca38e22679dbf90558c553c314f61ea44","modified":1451928399295},{"_id":"themes/apollo-like/.git/objects/f1/4a2e2c030348cc9d18833c5b420cf208f3765d","hash":"3bbcb55e7d441bce9af9cbb1dddef4069eecb44d","modified":1447170156178},{"_id":"themes/apollo-like/.git/objects/f1/53414838edba1db876123d57b29ed6e02972f9","hash":"51ec89deef4c66c35e615d0d3939ec219e96c9f6","modified":1445946852136},{"_id":"themes/apollo-like/.git/objects/f2/2461ff5b3272a6bcab6800d91bf7fc609ecd6d","hash":"ad41f28a10b1fb707d6464e83d6da7dec7099e23","modified":1458313158208},{"_id":"themes/apollo-like/.git/objects/f2/655b34d17ddc2a046e6ef8e7a081cea93492cf","hash":"63cd87de5a9209ad02356701ef8ccbd94333d3b5","modified":1466012994346},{"_id":"themes/apollo-like/.git/objects/f3/0fbd2d1627ab7f77df346f3f6ec88cee93a3dd","hash":"a35d33bb633f85cee3b5fbb648fe2cf011b71c0a","modified":1446914405648},{"_id":"themes/apollo-like/.git/objects/f3/4cece3fff1040a6f8d6750754d3ff448f0ae92","hash":"d6d3a71cca009a23b4dc301c9ffa8c6daa2b603b","modified":1450574253258},{"_id":"themes/apollo-like/.git/objects/f3/b09c0be28d262450d6cb7978bff3d9922a7c5d","hash":"ade648c159b46433b478f57068f16cc45cb3de33","modified":1459345856398},{"_id":"themes/apollo-like/.git/objects/f6/48934bea4f1d056d5c33c3a903cfe8a34a9269","hash":"baa9e78dd821a787cb9bf3558d64ac263a925b48","modified":1446085976021},{"_id":"themes/apollo-like/.git/objects/f6/be76475e0842f366e8a443a6fa0ddceacba82f","hash":"3596710cd1fbe41cbe7ebaa720f6a16713819010","modified":1446085976018},{"_id":"themes/apollo-like/.git/objects/f6/fb08cc846e6caa3fdc7894c7e7b50f7a9dabc1","hash":"0305be5a10e4af713f7a03d59145cd61bf8e648e","modified":1446568190131},{"_id":"themes/apollo-like/.git/objects/f7/563524eb7eb552a146bc3f6dcbc873e12f74b1","hash":"1530cacac7a6de2a4987b578b63e8c972eb83f5d","modified":1447510080248},{"_id":"themes/apollo-like/.git/objects/f7/cc8dcca5255af9dea68da957ffbb606ff30609","hash":"8e2c1cd7a79c5b65dc0fae901e039910cc9cf2db","modified":1447297941659},{"_id":"themes/apollo-like/.git/objects/f8/21337ca185cfb717cecf124a09895d65d49f3d","hash":"2d3982f0b077b7529e19a39da0272ec541a1fad1","modified":1446606326467},{"_id":"themes/apollo-like/.git/objects/f8/3874bb7ddffe8ad54126918f00783fe3c6ae5c","hash":"eb2eed536f9709d990e4e5feb8d30854e7ca1c00","modified":1446914405648},{"_id":"themes/apollo-like/.git/objects/f9/10a3ab66082c6b1bcf2ce5ed2141924469b281","hash":"10c35978361c8daa4b7d0082c8c40ba5d9c9029e","modified":1446139499964},{"_id":"themes/apollo-like/.git/objects/f9/632fd6344e31c5cf7cb1447424d02ed9ae735f","hash":"2cbfbce2bed050fd73454d4f3b5e666ed50a497e","modified":1450574211565},{"_id":"themes/apollo-like/.git/objects/f9/894f41b21865e7ee9464a751b085e5d530f62d","hash":"3fe9199c146294ac5d80e873b8c46f9f9b7ae700","modified":1446914405648},{"_id":"themes/apollo-like/.git/objects/f9/b148365fb85dd2061a37eea1f2cca2ce34f0b4","hash":"9a9f282bd817f8964dcc4ded283505dcf781ea5d","modified":1446606317677},{"_id":"themes/apollo-like/.git/objects/fa/85b3f468216ff276b6193ed670f42b4fa8a283","hash":"8dab4f169ff1a0fb7c57c892bbc73063c69ffb84","modified":1446606333807},{"_id":"themes/apollo-like/.git/objects/fa/8ff64e75daf1d59c25621b603542d0f11d0f62","hash":"b11c7f9cd8a5c5e546eb3cc2982b41c498854209","modified":1447380653741},{"_id":"themes/apollo-like/.git/objects/fa/acfb0f50f3c41f06a2a7e6337c86c10caf1209","hash":"8628db57066e32350837725b4167ffd93a181d09","modified":1446913147057},{"_id":"themes/apollo-like/.git/objects/fb/0e8515f2bff9f76cb325ff367ffc1e6f46d7a1","hash":"beb01d42bb1d767b2d0f820f9825fe09f93a5aea","modified":1450574230172},{"_id":"themes/apollo-like/.git/objects/fb/bfb7533d2ab204bd42d39f0e789132eea2dfbe","hash":"d1f2d5434880d597fbbb93d509d243833cb963c6","modified":1450574109789},{"_id":"themes/apollo-like/.git/objects/fb/d4c81792c06ce14ec8610993b49ebd7b258987","hash":"de79528c1a6abfe84b26c156f6b2ea360075e699","modified":1446734920217},{"_id":"themes/apollo-like/.git/objects/fc/6a03b16babb367afbb5f6d1355e49a76950bb7","hash":"b94e6eaa2ded9cb2f0052e9e559314a51e5fb5c3","modified":1446782406104},{"_id":"themes/apollo-like/.git/objects/fc/9aaaebce2844cc94be553ce318d96af3f5b169","hash":"9a79b1d717af656289ba5a6870cebe4e32c4ef43","modified":1450574230172},{"_id":"themes/apollo-like/.git/objects/fc/af6851efe0b7662ba05a48446a8848608453d0","hash":"b2d2ffd0a3c6aea0ae092c2154e9c144acf84606","modified":1452085002790},{"_id":"themes/apollo-like/.git/objects/fc/b427bc2b6f01decbb4b61762b07610e7f24a10","hash":"b1bf05847c557622e69c253918d27acdd4a693af","modified":1446037420841},{"_id":"themes/apollo-like/.git/objects/fc/ca251ba0607122e8320261fe3623d9c0cbe2b3","hash":"b54131727869bc62ae99a2f95cf149b3b88f8cd3","modified":1446139499964},{"_id":"themes/apollo-like/.git/objects/fe/92e9c15e042dd01b73d3a3bae53d51c03627dd","hash":"def5833b9ce09d7b3c3d4ccc0c7e5ebe5a14104f","modified":1450194705994},{"_id":"themes/apollo-like/.git/objects/fe/c75e4a44529aab0b13de9f3c595adba14aeccb","hash":"57a15fba43d60444cf867093e5b8754540320dab","modified":1465346412318},{"_id":"themes/apollo-like/.git/objects/fe/e4a8aee5d6ce8cc27d099a7d045bede60b3b1e","hash":"07c525e680a14d9a768f0dae000421c3480edba3","modified":1459345877758},{"_id":"themes/apollo-like/.git/objects/pack/pack-5812bbb63824e0c75a340bfe9eb28b9643a70b7d.idx","hash":"e4962dc3767ac69bb227716e3b26a4e0a898eea2","modified":1445945262478},{"_id":"themes/apollo-like/.git/objects/dd/037d1debeb2106724173069da2d26816439e24","hash":"c48f24b2590174a705fcd3645e2152fb8b86d74a","modified":1450194705994},{"_id":"themes/apollo-like/.git/objects/94/47500498d4b6634a98fb9f10e3d13cefe69928","hash":"3749b4823331cf5d83d912bcaf537f6030383102","modified":1450574230172},{"_id":"source/_posts/richard-stallman-on-piracy/gnu.png","hash":"c126801e2aae5020cbc2b07b0e4f6822543841d9","modified":1465578673371},{"_id":"themes/apollo-like/.git/logs/refs/heads/master","hash":"70327e1a40f587b8066aeaf0266485f4b0ab8d88","modified":1466013044249},{"_id":"themes/apollo-like/.git/refs/remotes/origin/master","hash":"9ff6797df96d57ed5e17594f3a14453fee2bde27","modified":1466013060592},{"_id":"themes/apollo-like/.git/logs/refs/remotes/origin/HEAD","hash":"33e62462ae89c9be65af82e1d1b4fd1e45fe8528","modified":1445945262512},{"_id":"themes/apollo-like/.git/logs/refs/remotes/origin/master","hash":"f0e953b4dd9f6ff3a6872c4373cda4cf6f733194","modified":1466013060592},{"_id":"themes/apollo-like/.git/objects/pack/pack-5812bbb63824e0c75a340bfe9eb28b9643a70b7d.pack","hash":"dea4509a231212db34a14be6eb0de8c8e5773ec9","modified":1466013001000},{"_id":"public/rss.xml","hash":"8ae20b480b4c0753030a42a30c50de3dd85787a5","modified":1466013150188},{"_id":"public/404/index.html","hash":"2ea0da49c7a11ba1ce1058bee39db9d25d0e8801","modified":1466013150242},{"_id":"public/linux/2016/playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process/index.html","hash":"99d22c3df6c86fd6f53471e38ba7a2957c70c001","modified":1466013150242},{"_id":"public/linux/2016/command-line-mdn-or-how-to-make-a-great-thing-even-greater/index.html","hash":"a9e53b7b6489da45572f95e44b3331e8255f2501","modified":1466013150242},{"_id":"public/life/2016/back-from-holiday-and-how-to-use-dead-time/index.html","hash":"f11886477e6af038248ee3c4c3be59c35aa43f24","modified":1466013150242},{"_id":"public/javascript/2016/markdown2troff-regular-expressions-ftw/index.html","hash":"f2acf668cae9279ffc3e00a14d6ca1a4e29f5043","modified":1466013150242},{"_id":"public/javascript/2016/awman-1-1-1-multi-language-support-better-formatting-and-more/index.html","hash":"9dd7c215ece283b13ab64043f6166083431df5d6","modified":1466013150242},{"_id":"public/javascript/2016/awman-arch-wiki-man-man-the-arch-wiki-offline/index.html","hash":"3be2aa37ff428dfd0a97a9470929e50748895d17","modified":1466013150242},{"_id":"public/linux/2016/new-version-of-pacman-released-updating-yaourt-and-package-query/index.html","hash":"02e89d677a784bee940addd588cdb7934185f765","modified":1466013150242},{"_id":"public/javascript/2016/i-have-been-to-the-mountain-top-making-code-beautiful/index.html","hash":"83d3277a38924a6e3cbbc8dcc532d2989378a107","modified":1466013150242},{"_id":"public/javascript/2016/kyle-simpson-s-advanced-javascript-course/index.html","hash":"2dd900b352f2d0a15f332def6e1c2d17351492d6","modified":1466013150242},{"_id":"public/linux/2016/linux-tip-of-the-day-temporarily-prevent-your-screen-from-going-to-sleep/index.html","hash":"d889ead2fc47e4fcb79d8ea3104a62cc0b8879d0","modified":1466013150242},{"_id":"public/linux/2016/git-undo/index.html","hash":"b529124801536e7b58c0f322fc1b9c54ad80c841","modified":1466013150242},{"_id":"public/javascript/2016/how-to-rename-a-published-npm-module/index.html","hash":"ff6857f0b46d8871b8f68008e379f7dccceb1020","modified":1466013150242},{"_id":"public/vim/2016/do-yourself-a-favor-and-modularize-your-vimrc-init-vim/index.html","hash":"20cfe46e23b79cb85ca45225990da9dbd211751c","modified":1466013150243},{"_id":"public/life/2016/new-year-s-resolutions-and-predictions/index.html","hash":"e6dba7c26233ac8073b62a510f5def645d92743b","modified":1466013150243},{"_id":"public/linux/2015/forwarding-mail-to-your-gmail-account-with-mailgun/index.html","hash":"0c17956e0af160141d6707d35367628e6388224f","modified":1466013150243},{"_id":"public/vim/2015/lint-as-you-type-with-neovim-and-neomake/index.html","hash":"a1763a12542c8edc6bee9c8c7aa98ae240b49b5c","modified":1466013150243},{"_id":"public/javascript/2015/offline-arch-wiki-and-arch-wiki-md-repo-online/index.html","hash":"cf2f7d277788233b3902051c645d13194faeb8d5","modified":1466013150243},{"_id":"public/linux/2015/huge-arch-update/index.html","hash":"af0c83fb85b7181541daab8954c8cf9de0c2079c","modified":1466013150243},{"_id":"public/javascript/2015/end-iifes-in-or/index.html","hash":"733545e08ab7bb04f1eade0f67a98843ca5ca496","modified":1466013150243},{"_id":"public/javascript/2015/how-to-scrape-the-web-gently-with-node-js/index.html","hash":"815709f43df6eada746ff52e3f61713cdba638e5","modified":1466013150243},{"_id":"public/life/2015/the-new-on-github-blues-and-my-new-project-local-command-line-arch-wiki/index.html","hash":"937f8f2116273e68de5e6de68a238fd10b23a010","modified":1466013150243},{"_id":"public/linux/2015/quick-command-line-tips-and-tricks2-finding-and-processing-files/index.html","hash":"89fbf32dfe841afe5210fa32edd9a03e590bab2d","modified":1466013150243},{"_id":"public/life/2015/richard-stallman-on-piracy/index.html","hash":"37df9354d5f7fa7579cb5b52a63701f3e25f8986","modified":1466013150243},{"_id":"public/linux/2015/a-few-quick-command-line-tips-and-tricks/index.html","hash":"a07b924ea498b79e93722a0dfcbfcbd8289c51d6","modified":1466013150243},{"_id":"public/vim/2015/linting-code-with-neovim-and-neomake-eslint-edition/index.html","hash":"2bb9e9666efc7f67c5a4bbe30e3ae1f6578c45d7","modified":1466013150243},{"_id":"public/javascript/2015/hexo-easy-edit-1-2-0-pages-cleanup-rename/index.html","hash":"5c4ce712bb50d9802da480cb3caa086ca61828ad","modified":1466013150243},{"_id":"public/javascript/2015/simple-promise-example/index.html","hash":"7f61068cc640da963fdbc2660a3081e8406bf409","modified":1466013150244},{"_id":"public/javascript/2015/hexo-easy-edit-1-1-0-colors-drafts-and-dates/index.html","hash":"1032c6b5240b9dae6a0a157284a7173095483071","modified":1466013150244},{"_id":"public/vim/2015/no-more-nvimrc-neovim-folder-now-at-config-nvim/index.html","hash":"fcfe22475f19c9a50c517d526bce3774f722a1ad","modified":1466013150244},{"_id":"public/linux/2015/how-to-use-shell-variables-in-awk/index.html","hash":"d56d7ef355ac37230dc5c25db2137bedcacaf0c8","modified":1466013150244},{"_id":"public/javascript/2015/three-things-i-learned-from-rewriting-hexo-easy-edit/index.html","hash":"38b7998c9e72d400faa516adbbec205f2d428eb4","modified":1466013150244},{"_id":"public/vim/2015/hexo-tag-plugin-snippets-for-everyone/index.html","hash":"a79827439b81f1c66ab8368ec649bd37c418fe6b","modified":1466013150244},{"_id":"public/javascript/2015/i-wrote-a-hexo-plugin-hexo-easy-edit/index.html","hash":"3d30b17de01a3bf2bdae08fa84d817a7c9df150e","modified":1466013150244},{"_id":"public/vim/2015/linting-code-with-neomake-and-neovim/index.html","hash":"bc906dd50d163bec1c87b4071a91d6ea5ae0c607","modified":1466013150244},{"_id":"public/javascript/2015/normal-ternaries-vs-nested-ternaries/index.html","hash":"f2816b942d983bc04b8b20c3746a4a1be8233015","modified":1466013150244},{"_id":"public/linux/2015/fixing-the-reappearing-folders-problem-in-your-home-directory/index.html","hash":"386ffb8f5dc36efca11937c087b2f8f7e77c3745","modified":1466013150244},{"_id":"public/vim/2015/es6-react-ultisnips-snippets-for-vim/index.html","hash":"f243bb55e893ff32974b72712a134e8826ffb6b7","modified":1466013150244},{"_id":"public/linux/2015/how-to-set-up-mailgun-on-digital-ocean/index.html","hash":"da29ff9036607716735fe4cf237e7f0e38975cf6","modified":1466013150244},{"_id":"public/life/2015/reboot/index.html","hash":"87050d80e8e1f567d18a30706c45adb7cf450500","modified":1466013150244},{"_id":"public/archives/2015/10/index.html","hash":"4c7a71720a51e26a37b8257b353500796bdf8ef8","modified":1466013150244},{"_id":"public/archives/2015/12/index.html","hash":"d4474d659471eedb233e3a87c9eee30c84046c42","modified":1466013150244},{"_id":"public/archives/2016/page/2/index.html","hash":"8dd5d43dc5b8d16082835a9435e928b31a284799","modified":1466013150244},{"_id":"public/archives/2016/01/index.html","hash":"a1bc033ebb1e6063009467c2b9331924fdec1d25","modified":1466013150244},{"_id":"public/archives/2016/02/index.html","hash":"d9740e85acfa0a162a8c2c3c43c1f43039456594","modified":1466013150244},{"_id":"public/archives/2016/03/index.html","hash":"3f5aa80009d6704b646c810620604429f5a7c491","modified":1466013150244},{"_id":"public/archives/2016/04/index.html","hash":"97e3249fe6299504995325a7c49e2ee73da39ef7","modified":1466013150244},{"_id":"public/archives/2016/06/index.html","hash":"90d0e78d15450ca3d194975e781959a36bc69564","modified":1466013150244},{"_id":"public/blog/page/6/index.html","hash":"40c08386bf993daf989207d3f184217d881baaff","modified":1466013150245},{"_id":"public/categories/javascript/index.html","hash":"2b0803fb86bd74323afdad77507f2c3136f1bf9d","modified":1466013150245},{"_id":"public/categories/javascript/page/2/index.html","hash":"f5e8cf05d3503809d5a1489b7bca95935727b6b6","modified":1466013150245},{"_id":"public/categories/javascript/page/3/index.html","hash":"fb0a434b219184e7f7052024aa60368c996e8e9f","modified":1466013150245},{"_id":"public/categories/linux/index.html","hash":"99812774f548f5b7a79b1c1d8f129a88b6d7263b","modified":1466013150245},{"_id":"public/categories/linux/page/2/index.html","hash":"e87d045caf29c2ad793b6595b860e103170cb856","modified":1466013150245},{"_id":"public/categories/life/index.html","hash":"030192fba0627ea4813e216d736e5903da36f7a8","modified":1466013150245},{"_id":"public/categories/vim/index.html","hash":"f72a05c16d43bc1051179e19353c63642cbedf7b","modified":1466013150245},{"_id":"public/page/6/index.html","hash":"ef63ccba45c090475efa2854c1b19313d59a88fa","modified":1466013150245},{"_id":"public/tags/async/index.html","hash":"6a53fca625e5a80d986e825f2f259c414610c480","modified":1466013150245},{"_id":"public/tags/js/index.html","hash":"481a166e2e3b0c1cf36444b391b3b9757f9e22ba","modified":1466013150245},{"_id":"public/tags/js/page/2/index.html","hash":"b6f82e57ea28e5ff2dc39cfd0bd688409037ccde","modified":1466013150245},{"_id":"public/tags/js/page/3/index.html","hash":"6b4f9a327b49a298e2a2860a32f6740a43cbfbfd","modified":1466013150245},{"_id":"public/tags/learning/index.html","hash":"aa0e79f4c55c8dbc2f298fa4cca99c741b7b56d2","modified":1466013150245},{"_id":"public/tags/node/index.html","hash":"4e223c7bd965b227d564afbf40e2fff576cfbd24","modified":1466013150245},{"_id":"public/tags/node/page/2/index.html","hash":"6153c179d8d422a71c59751f1f2cb81b32137e6a","modified":1466013150245},{"_id":"public/tags/command-line/index.html","hash":"afbce9a7912cd1b835b0898276d95337a65f2039","modified":1466013150245},{"_id":"public/tags/tips/index.html","hash":"85007e75905add0ffd202706654508b12805e234","modified":1466013150245},{"_id":"public/tags/testing/index.html","hash":"1c6dbdf681c94ce835c3205e3b51e1e0a9f36ac4","modified":1466013150245},{"_id":"public/tags/open-source/index.html","hash":"a8e2ab7956cc1016d4d7f9d1d38b548cb474b15a","modified":1466013150245},{"_id":"public/tags/open-source/page/2/index.html","hash":"7b0b73d5f1138e81271ebe8c96370d6cee5924ea","modified":1466013150246},{"_id":"public/tags/npm/index.html","hash":"332ab7bb38e2214e7cb243dd1c4d8a1aab14835f","modified":1466013150246},{"_id":"public/tags/arch-linux/index.html","hash":"576bdba8d76f30a58985b2b27010796149c76da7","modified":1466013150246},{"_id":"public/tags/meta/index.html","hash":"8c5456ce5d205ef0b4b280a047602692b5f6ac6a","modified":1466013150246},{"_id":"public/tags/mdn/index.html","hash":"9811b2d5e77c1e7ee64bd0fd290542e5cc679218","modified":1466013150246},{"_id":"public/tags/fs/index.html","hash":"c6e090c512bb71aca42c51ee57a0005fff1a759d","modified":1466013150246},{"_id":"public/tags/snippets/index.html","hash":"0ee2ba1a94ab45b4b6c543703c43de95a4f5e9dd","modified":1466013150246},{"_id":"public/tags/vim/index.html","hash":"5ac863fa8c77323888de6ff20a1307d9991ae433","modified":1466013150246},{"_id":"public/tags/react/index.html","hash":"a9eb6cca65be72a2d07614d94dca5afdb0af7783","modified":1466013150246},{"_id":"public/tags/es6/index.html","hash":"186ffb9a2adf6c7a2b22b59c145658a9b3a66762","modified":1466013150246},{"_id":"public/tags/neovim/index.html","hash":"c084c8cb1c70817971cb8baf2cea315609ec4bea","modified":1466013150246},{"_id":"public/tags/autocompletion/index.html","hash":"e86096218d6d5820eaadc2392d8945a121d9a139","modified":1466013150246},{"_id":"public/tags/dotfiles/index.html","hash":"ad869da3db9042ce90b781a279177fc75bb8118d","modified":1466013150246},{"_id":"public/tags/style/index.html","hash":"3d12a379376b52cbbe0066816cbe7899c69d982e","modified":1466013150246},{"_id":"public/tags/crockford/index.html","hash":"c3fca9e34d0685369b0b2333fcec6de4d3ee14dd","modified":1466013150246},{"_id":"public/tags/linux/index.html","hash":"0a9039014b780c8d401096064e220e6940315fe1","modified":1466013150246},{"_id":"public/tags/git/index.html","hash":"4c56204c35c97d4f94eba89908ce9a7c728d416b","modified":1466013150246},{"_id":"public/tags/version-control/index.html","hash":"4dd08af47e4c050d309b5431158ca15428e4fcac","modified":1466013150246},{"_id":"public/tags/hexo/index.html","hash":"8dbdc90cf2fe8b9c8fd4718ced42dc978624045a","modified":1466013150246},{"_id":"public/tags/mailgun/index.html","hash":"bd4f1ad60a082a9920ebd4a011eb0ade904d8cb0","modified":1466013150246},{"_id":"public/tags/vps/index.html","hash":"d4206842ef72835ec2a28ccfa7ad309b180f5e3e","modified":1466013150247},{"_id":"public/tags/scraping/index.html","hash":"6a08ee2221c802aa211810b9c70d620ce2c43ca3","modified":1466013150247},{"_id":"public/tags/awk/index.html","hash":"6d1ea7debc0a8509fb0c431f13fbe3c711f0f1a3","modified":1466013150247},{"_id":"public/tags/shell/index.html","hash":"ca87fd4c195a4c9714e0b793224124a496556445","modified":1466013150247},{"_id":"public/tags/promises/index.html","hash":"6768f40941934cc925a45edbbdff1a768b54ac36","modified":1466013150247},{"_id":"public/tags/kyle-simpson/index.html","hash":"d27865dd784b5920ed1316f82909cdeb2bef3b79","modified":1466013150247},{"_id":"public/tags/linting/index.html","hash":"d862463deec4dbb8dbab412577db1c7b7ea8c88c","modified":1466013150247},{"_id":"public/tags/bash/index.html","hash":"bfa3a8cc297cebfe6057a4f9b7f52e0add45f2d7","modified":1466013150247},{"_id":"public/tags/pacman/index.html","hash":"faa558968f5e96de0dc3b9a1c50ea6579c3da01d","modified":1466013150247},{"_id":"public/tags/opinion/index.html","hash":"676159a3fd5aae4ccf3cb59d6a38d21a10c6979a","modified":1466013150247},{"_id":"public/tags/rms/index.html","hash":"21ae6116586feb8c85f1b9cb4d8ab7e94c844afa","modified":1466013150247},{"_id":"public/tags/free-software/index.html","hash":"671af88e2fb22886f33d38ec56fcd3d974c9ca2a","modified":1466013150247},{"_id":"public/tags/interview/index.html","hash":"ca7b0e3d1e18052d5d904c5cb350f84c48aebef8","modified":1466013150247},{"_id":"public/index.html","hash":"8f554e56b4a6ae56dbf83bcd734a78617b3d6137","modified":1466013150247},{"_id":"public/blog/index.html","hash":"f23ce837de98d695895fdaa4bb0b554512531f8f","modified":1466013150247},{"_id":"public/javascript/2016/checking-whether-a-file-directory-exists-without-using-fs-exists/index.html","hash":"f063edc0c92f81c345763fb328c2eaccb0cbb499","modified":1466013150247},{"_id":"public/javascript/2016/writing-a-fibonacci-implementation-in-javascript/index.html","hash":"50853b59686cbb1951438c7bd8e1d4ef12735939","modified":1466013150247},{"_id":"public/vim/2016/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/index.html","hash":"6be87a7caff8834a969976f2695c46b337be7a05","modified":1466013150247},{"_id":"public/javascript/2015/asynchronous-tests-in-mocha-using-before-and-after-blocks/index.html","hash":"4313ab08109d6bfb67c903b47f37c7a234157ff8","modified":1466013150248},{"_id":"public/archives/index.html","hash":"65835aad480e5c5758cf6f37bf2bf4cae5366d8f","modified":1466013150248},{"_id":"public/archives/page/2/index.html","hash":"07cc8ad59d88274d90f5d43a46625038e9ab5da1","modified":1466013150248},{"_id":"public/archives/page/3/index.html","hash":"fc1d643e5404be29945592e254b66707a7ff40f2","modified":1466013150248},{"_id":"public/archives/2015/index.html","hash":"20e5d78d1c6ec087c6b5d2de6d934a2ba0b74307","modified":1466013150248},{"_id":"public/archives/2015/page/2/index.html","hash":"77fa7b9b4097d02c8cdb040d4d5eb50782aa7624","modified":1466013150248},{"_id":"public/archives/2015/11/index.html","hash":"4130848824cd8154e0cbd318c0760f814a3e15d1","modified":1466013150248},{"_id":"public/archives/2016/index.html","hash":"37378681a21b0c2135bcb6fc8219f59beefd6211","modified":1466013150248},{"_id":"public/blog/page/2/index.html","hash":"f5e2043c3921663797e81d4f7a191da5c892ef81","modified":1466013150248},{"_id":"public/blog/page/4/index.html","hash":"5b741ca74ddf0deb112200fbf1bac20dc2db54b8","modified":1466013150248},{"_id":"public/blog/page/5/index.html","hash":"1e2b7ea7a4b7fd7b29c730f0e63c8653196ed4d7","modified":1466013150248},{"_id":"public/blog/page/3/index.html","hash":"d35e3d7ca130b631e8e55d69613fc293ef0339a4","modified":1466013150248},{"_id":"public/page/2/index.html","hash":"6e375fce8c32e391e3c502c9cb2caa658ec63747","modified":1466013150248},{"_id":"public/page/3/index.html","hash":"12961968bde1ab3a64686dce9f76ed4061519075","modified":1466013150248},{"_id":"public/page/4/index.html","hash":"b1217a2233122b4873af692380a632c29ae3c6b7","modified":1466013150248},{"_id":"public/page/5/index.html","hash":"00c98a9f32034df0e6bef0140b698630fb4f15ab","modified":1466013150248},{"_id":"public/images/favicon.png","hash":"8d85d2a2e2ef8b99d5f1245e9d8ecb1de704d24b","modified":1466013150261},{"_id":"public/images/icon-reorder@2x.png","hash":"dda25f0988cd759b200d0c05af30cc9475621060","modified":1466013150261},{"_id":"public/fonts/kanit-v1-latin-200.eot","hash":"d0eb1797755930c1f11a95c463926496c2db3c39","modified":1466013150261},{"_id":"public/fonts/kanit-v1-latin-200.svg","hash":"cf98771fe071ed3189441e5c4228a9c72b873f51","modified":1466013150261},{"_id":"public/fonts/kanit-v1-latin-200.woff","hash":"9d31f283c439e74db0dc3c4642620e9e8f117564","modified":1466013150261},{"_id":"public/fonts/kanit-v1-latin-200.woff2","hash":"798e3cc32bc4c0d20b9ffea18a6b162df4cef3d9","modified":1466013150261},{"_id":"public/fonts/kanit-v1-latin-700.eot","hash":"6247810da774967b3b9b16f6a4dcacb399250935","modified":1466013150261},{"_id":"public/fonts/kanit-v1-latin-700.svg","hash":"bb8c4ae54a1b19a2bb6b96b045578e02b1508392","modified":1466013150261},{"_id":"public/fonts/kanit-v1-latin-200.ttf","hash":"78d32ce60dc58ca502dce5fbf77a4b5062cc69be","modified":1466013150261},{"_id":"public/fonts/kanit-v1-latin-700.woff","hash":"057609c3a50aa88b5ac1f055f0d15b2d034f8bdb","modified":1466013150262},{"_id":"public/fonts/kanit-v1-latin-700.woff2","hash":"e93531f44858ba558aef9f5542b5eb6a6a3b666d","modified":1466013150263},{"_id":"public/fonts/source-code-pro-v6-latin-300.eot","hash":"b3812b62f7214628a120bb765d0e6d8f70be0083","modified":1466013150263},{"_id":"public/fonts/source-code-pro-v6-latin-300.svg","hash":"dc25f57c4de0fcae035012eb8e653bebe5e830a7","modified":1466013150263},{"_id":"public/fonts/source-code-pro-v6-latin-300.ttf","hash":"7cff2137b93e7234127f4170454d410547655ea3","modified":1466013150263},{"_id":"public/fonts/kanit-v1-latin-700.ttf","hash":"efa9359e8a4f1b379c500c3d177c257aac5891ea","modified":1466013150263},{"_id":"public/fonts/source-code-pro-v6-latin-300.woff","hash":"2e5c154e241a723a799c488a7d11df77ba54ebba","modified":1466013150263},{"_id":"public/fonts/source-code-pro-v6-latin-300.woff2","hash":"93d4a71e32d661852e4b593ea69ff32c08a894ea","modified":1466013150263},{"_id":"public/fonts/source-code-pro-v6-latin-regular.eot","hash":"990b93fab2f97331eba0276199d385e4c4f3dac9","modified":1466013150263},{"_id":"public/fonts/source-code-pro-v6-latin-regular.svg","hash":"756e3862ff91e7c5b7886009c3aaebbeda14f57e","modified":1466013150263},{"_id":"public/fonts/source-code-pro-v6-latin-regular.woff","hash":"2ec709fdf8a05fee9ca636d26eb2559dccdb6ea5","modified":1466013150263},{"_id":"public/fonts/source-code-pro-v6-latin-regular.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1466013150263},{"_id":"public/fonts/source-code-pro-v6-latin-regular.ttf","hash":"bcf6fb82b8f333297cbbc9fae9c48d2c5fe807f6","modified":1466013150263},{"_id":"public/javascript/2015/asynchronous-tests-in-mocha-using-before-and-after-blocks/screen.png","hash":"d89d6fbfa671c338a1b5f053f399cf9f360ba606","modified":1466013150264},{"_id":"public/linux/2016/command-line-mdn-or-how-to-make-a-great-thing-even-greater/example.gif","hash":"14ede092fbb393a39ea6c52b94524d0b02202d9f","modified":1466013150264},{"_id":"public/javascript/2016/checking-whether-a-file-directory-exists-without-using-fs-exists/nodejs-new-pantone-black.png","hash":"ebd53ef02265153fdf582212dae6875eb1f0ddfe","modified":1466013150264},{"_id":"public/vim/2016/do-yourself-a-favor-and-modularize-your-vimrc-init-vim/tools.jpg","hash":"a46bfc5fa6edf66c2084a489fc532e0e11c52a2a","modified":1466013150264},{"_id":"public/javascript/2015/hexo-easy-edit-1-1-0-colors-drafts-and-dates/screen.png","hash":"a39e475d4d0105d727c91f84f664c516391dee62","modified":1466013150264},{"_id":"public/vim/2015/hexo-tag-plugin-snippets-for-everyone/screenshot.png","hash":"b2db157a04527bb16cce0660de44adc439138c94","modified":1466013150264},{"_id":"public/linux/2015/forwarding-mail-to-your-gmail-account-with-mailgun/DO.logo.png","hash":"6636c09ba5cac64c9a4537ddfb99f11cddd0e715","modified":1466013150264},{"_id":"public/linux/2015/how-to-set-up-mailgun-on-digital-ocean/mailgun.png","hash":"3d27f5fe37b79502d0ceb791189ea00ce265a009","modified":1466013150264},{"_id":"public/linux/2015/huge-arch-update/arch-update.png","hash":"dbf3b66dfc8b520e66596f6b54a3d4fa3c17ae5f","modified":1466013150264},{"_id":"public/javascript/2015/i-wrote-a-hexo-plugin-hexo-easy-edit/hexo-easy-edit.png","hash":"fa3fc66723514188db753dbc50e3afb4fcb89393","modified":1466013150264},{"_id":"public/javascript/2016/kyle-simpson-s-advanced-javascript-course/You-dont-know-JS.png","hash":"5abde845ff0717b914047254e90cbdd9e0b6cd5d","modified":1466013150264},{"_id":"public/vim/2015/lint-as-you-type-with-neovim-and-neomake/autocmd.png","hash":"31e0f9e3f078b0570a230fa2a324843186be7428","modified":1466013150264},{"_id":"public/vim/2015/linting-code-with-neomake-and-neovim/neomake_example.png","hash":"66cf7e7ebff40f655acd3f2cea1209b6475adadd","modified":1466013150264},{"_id":"public/linux/2015/quick-command-line-tips-and-tricks2-finding-and-processing-files/commandline.png","hash":"4040e46ff5dea669fcad3cc88995bc50284e8a02","modified":1466013150264},{"_id":"public/life/2015/the-new-on-github-blues-and-my-new-project-local-command-line-arch-wiki/think.jpg","hash":"ddb198a8042f8def52f0f86fefa78b39b54a1d95","modified":1466013150264},{"_id":"public/linux/2015/fixing-the-reappearing-folders-problem-in-your-home-directory/my-home-dir.png","hash":"f89dfb565c6cb4e012603fd067c1d5b9f9d64957","modified":1466013150264},{"_id":"public/linux/2015/fixing-the-reappearing-folders-problem-in-your-home-directory/user-dirs.dirs.png","hash":"6520f1b0b4560b24e3c943d597d5c3a642438849","modified":1466013150264},{"_id":"public/linux/2016/playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process/mpv.jpg","hash":"d2e4e8636a0b689ba10b62dd63f76745a4708cdd","modified":1466013150264},{"_id":"public/javascript/2016/awman-arch-wiki-man-man-the-arch-wiki-offline/helpscreen.png","hash":"61d15a418d7df4e80acb4855421280a00e7f041e","modified":1466013150264},{"_id":"public/javascript/2016/awman-arch-wiki-man-man-the-arch-wiki-offline/manscreen.png","hash":"0157ecc3fc1e706f15ddf30ecc779db3f3361522","modified":1466013150265},{"_id":"public/javascript/2016/awman-arch-wiki-man-man-the-arch-wiki-offline/menu.png","hash":"1e355447f8634ca68febddc678177b7a92ff76b7","modified":1466013150265},{"_id":"public/vim/2016/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/autocompletion.png","hash":"b702b4974c59958f43ffaf777f64a7dc5c91e364","modified":1466013150265},{"_id":"public/vim/2016/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/autotern.png","hash":"52acb11a79d9b727e953465e5ba8d36aadb60221","modified":1466013150265},{"_id":"public/vim/2016/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/beautiful.png","hash":"c13671fd259f039085e59f3d022b8136938963a6","modified":1466013150265},{"_id":"public/javascript/2016/how-to-rename-a-published-npm-module/broken.jpg","hash":"3068af5ee1daf9ab8298887feed66cff28f01a7c","modified":1466013150265},{"_id":"public/javascript/2016/how-to-rename-a-published-npm-module/communicate.jpg","hash":"a3a7d99cec8a090ce8a9d67de9a70cf09345111c","modified":1466013150265},{"_id":"public/javascript/2016/how-to-rename-a-published-npm-module/npm-logo.svg","hash":"306192099eb433c8f2cd3839a074b46bc30593e0","modified":1466013150265},{"_id":"public/images/pic.jpg","hash":"9e02681d98502ed15890a4444249302319dc974e","modified":1466013150265},{"_id":"public/linux/2016/playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process/mpv.website.jpg","hash":"19074555cb4245b48f9aa92fd95d9c2838692316","modified":1466013150948},{"_id":"public/js/app.js","hash":"a7471d846ca22c03dd446ffde65b1feff03d61ad","modified":1466013151121},{"_id":"public/js/preact.min.js","hash":"1d6e7338f15f4d37cdcaf873401c7de1126359c5","modified":1466013151121},{"_id":"public/js/archive.js","hash":"1b5c749cccba53afd4369a697c366d7099db61c1","modified":1466013151122},{"_id":"public/css/style.css","hash":"79070eec5be0867db1e4561fcfa2a9d4926cb70f","modified":1466013151129},{"_id":"public/life/2015/richard-stallman-on-piracy/gnu.png","hash":"c126801e2aae5020cbc2b07b0e4f6822543841d9","modified":1466013151145}],"Category":[{"name":"javascript","_id":"ciph6dk1o0006knz9xgbwr2cw"},{"name":"linux","_id":"ciph6dk1v000bknz9qilwaev3"},{"name":"life","_id":"ciph6dk28000lknz917phpsy0"},{"name":"vim","_id":"ciph6dk2f000rknz9mj04w41e"}],"Data":[],"Page":[{"layout":"index","_content":"","source":"index.md","raw":"layout: index\n---\n","date":"2015-12-18T15:50:16.336Z","updated":"2015-12-18T15:50:16.332Z","path":"index.html","title":"","comments":1,"_id":"ciph6djyw0000knz9of03l319","content":"","excerpt":"","more":""},{"title":"404","date":"2015-10-27T00:28:27.000Z","_content":"","source":"404/index.md","raw":"title: 404\ndate: 2015-10-27 00:28:27\n---\n","updated":"2015-10-27T00:28:27.556Z","path":"404/index.html","comments":1,"layout":"page","_id":"ciph6dk1b0001knz9vu70o86x","content":"","excerpt":"","more":""},{"title":"blog","layout":"blog","per_page":8,"comments":0,"_content":"","source":"blog/index.md","raw":"title: blog\nlayout: blog\nper_page: 8\ncomments: false\n---\n","date":"2015-12-18T17:04:30.395Z","updated":"2015-12-18T17:04:30.391Z","path":"blog/index.html","_id":"ciph6dk1j0003knz9i4olxada","content":"","excerpt":"","more":""}],"Post":[{"title":"Promisifying asynchronous callbacks with Bluebird","_content":"\nPromises are great, but not every Node.js library uses them. The overwhelming majority of Node code on the web uses the traditional callback model. Does that mean that promises are really the callbacks of the future and that we can't use them in our present code?\n\nNope! Just install the popular [bluebird](http://bluebirdjs.com/docs/api/promise.promisify.html) module (or an equivalent library such as [es6-promisify](https://www.npmjs.com/package/es6-promisify) if you want es6 promises) and promisify your callback-based JavaScript into futuristic promises!\n\nHere's a little example of how promisifying callbacks can improve the readability of common (anti-)patterns. Without promisification:\n\n{% codeblock lang:javascript %}\nvar fs = require('fs');\nvar path = '...'; // (some path to some file)\n\nfs.stat(path, function(err, stats) {\n  if (err) {\n    throw err;\n  }\n\n  if (stats.isFile()) {\n    fs.readFile(path, 'utf8', function(err, contents) {\n      if (err) {\n        throw err;\n      }\n\n      console.log(contents);\n    });\n  }\n});\n{% endcodeblock %}\n\nWith promisification:\n\n{% codeblock lang:javascript %}\nvar Promise = require('bluebird');\nvar path = './test.txt';\n\nvar fsStat = Promise.promisify(require('fs').stat);\nvar fsReadFile = Promise.promisify(require('fs').readFile);\n\nfsStat(path).then(function(stats) {\n  if (stats.isFile()) {\n    fsReadFile(path, 'utf8').then(function(contents) {\n      console.log(contents);\n    }).catch(function(err) {\n      // handle ReadFile errors\n    });\n  }\n}).catch(function(err) {\n  // handle Stat errors\n});\n{% endcodeblock %}\n\n\n\n","source":"_drafts/promisifying-asynchronous-callbacks-with-bluebird.md","raw":"title: Promisifying asynchronous callbacks with Bluebird\ncategories: javascript\ntags:\n- async\n- js\n- learning\n- node\n---\n\nPromises are great, but not every Node.js library uses them. The overwhelming majority of Node code on the web uses the traditional callback model. Does that mean that promises are really the callbacks of the future and that we can't use them in our present code?\n\nNope! Just install the popular [bluebird](http://bluebirdjs.com/docs/api/promise.promisify.html) module (or an equivalent library such as [es6-promisify](https://www.npmjs.com/package/es6-promisify) if you want es6 promises) and promisify your callback-based JavaScript into futuristic promises!\n\nHere's a little example of how promisifying callbacks can improve the readability of common (anti-)patterns. Without promisification:\n\n{% codeblock lang:javascript %}\nvar fs = require('fs');\nvar path = '...'; // (some path to some file)\n\nfs.stat(path, function(err, stats) {\n  if (err) {\n    throw err;\n  }\n\n  if (stats.isFile()) {\n    fs.readFile(path, 'utf8', function(err, contents) {\n      if (err) {\n        throw err;\n      }\n\n      console.log(contents);\n    });\n  }\n});\n{% endcodeblock %}\n\nWith promisification:\n\n{% codeblock lang:javascript %}\nvar Promise = require('bluebird');\nvar path = './test.txt';\n\nvar fsStat = Promise.promisify(require('fs').stat);\nvar fsReadFile = Promise.promisify(require('fs').readFile);\n\nfsStat(path).then(function(stats) {\n  if (stats.isFile()) {\n    fsReadFile(path, 'utf8').then(function(contents) {\n      console.log(contents);\n    }).catch(function(err) {\n      // handle ReadFile errors\n    });\n  }\n}).catch(function(err) {\n  // handle Stat errors\n});\n{% endcodeblock %}\n\n\n\n","slug":"promisifying-asynchronous-callbacks-with-bluebird","published":0,"date":"2015-11-11T16:34:06.434Z","updated":"2015-11-11T16:34:06.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk1d0002knz9rp5whtix","content":"<p>Promises are great, but not every Node.js library uses them. The overwhelming majority of Node code on the web uses the traditional callback model. Does that mean that promises are really the callbacks of the future and that we can’t use them in our present code?</p>\n<p>Nope! Just install the popular <a href=\"http://bluebirdjs.com/docs/api/promise.promisify.html\" target=\"_blank\" rel=\"external\">bluebird</a> module (or an equivalent library such as <a href=\"https://www.npmjs.com/package/es6-promisify\" target=\"_blank\" rel=\"external\">es6-promisify</a> if you want es6 promises) and promisify your callback-based JavaScript into futuristic promises!</p>\n<p>Here’s a little example of how promisifying callbacks can improve the readability of common (anti-)patterns. Without promisification:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"string\">'...'</span>; <span class=\"comment\">// (some path to some file)</span></div><div class=\"line\"></div><div class=\"line\">fs.stat(path, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stats</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> err;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (stats.isFile()) &#123;</div><div class=\"line\">    fs.readFile(path, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> err;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(contents);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>With promisification:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"string\">'./test.txt'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fsStat = <span class=\"built_in\">Promise</span>.promisify(<span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>).stat);</div><div class=\"line\"><span class=\"keyword\">var</span> fsReadFile = <span class=\"built_in\">Promise</span>.promisify(<span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>).readFile);</div><div class=\"line\"></div><div class=\"line\">fsStat(path).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">stats</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (stats.isFile()) &#123;</div><div class=\"line\">    fsReadFile(path, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">contents</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(contents);</div><div class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// handle ReadFile errors</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// handle Stat errors</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>Promises are great, but not every Node.js library uses them. The overwhelming majority of Node code on the web uses the traditional callback model. Does that mean that promises are really the callbacks of the future and that we can’t use them in our present code?</p>\n<p>Nope! Just install the popular <a href=\"http://bluebirdjs.com/docs/api/promise.promisify.html\">bluebird</a> module (or an equivalent library such as <a href=\"https://www.npmjs.com/package/es6-promisify\">es6-promisify</a> if you want es6 promises) and promisify your callback-based JavaScript into futuristic promises!</p>\n<p>Here’s a little example of how promisifying callbacks can improve the readability of common (anti-)patterns. Without promisification:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"string\">'...'</span>; <span class=\"comment\">// (some path to some file)</span></div><div class=\"line\"></div><div class=\"line\">fs.stat(path, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stats</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> err;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (stats.isFile()) &#123;</div><div class=\"line\">    fs.readFile(path, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> err;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(contents);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>With promisification:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"string\">'./test.txt'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fsStat = <span class=\"built_in\">Promise</span>.promisify(<span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>).stat);</div><div class=\"line\"><span class=\"keyword\">var</span> fsReadFile = <span class=\"built_in\">Promise</span>.promisify(<span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>).readFile);</div><div class=\"line\"></div><div class=\"line\">fsStat(path).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">stats</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (stats.isFile()) &#123;</div><div class=\"line\">    fsReadFile(path, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">contents</span>) </span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(contents);</div><div class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// handle ReadFile errors</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// handle Stat errors</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"A few quick command-line tips and tricks","date":"2015-11-16T16:07:52.000Z","_content":"\nI'll probably be updating this blog a bit less the coming week as I'm about to leave for a short trip to belgium, where I grew up.\n\nOf course I'll be visiting my parents and a few friends, but this Wednesday I'll also have the pleasure to see the [one and only Richard Stallman](https://rms.sexy) deliver a [lecture about the free software philosophy in Gent](http://freeasinfreedom.be/). This will be my first time seeing RMS in person and I'm quite excited!\n\nI wasn't so sure what to put here for a quick post before I go, but I thought I'd just share a few quick tips and tricks for users and lovers of the command-line! For most of you, this will be old news, but I'm sure there are lots of people out there for whom any of these quick tips would be a revelation and/or a huge productivity boost. It's unlikely that I will reach those guys and gals through this modest blog of mine, but let me give it a try anyhow!\n\nI'll probably do more of these posts later, this is just a small taste of what's to come! Read on for the first tips!\n\n<!-- more -->\n\n### Refer to previous commands\n\nEver typed a command, then realized you forgot to `sudo` it, and then typed again? No longer!\n\n{% codeblock lang:bash line_number:false %}\n# to repeat the previous command with sudo:\nsudo !!\n\n# to see a list of your previous commands\nhistory\n\n# to repeat any numbered command in the history\n!x    # where x is the number of the command\n{% endcodeblock %}\n\nAlso, to do a reverse history search, press `CTRL+R` on the command line, then type part of the command you want to repeat. Browse through multiple matches by pressing `CTRL+R` again. This will revolutionize your command-line workflow!\n\n### Emacs or vi key bindings\n\nBy default, the bash shell will support emacs key bindings. Now, I'm a *huge* vim fanatic, but on the command-line I'll use these. Still, if you prefer to use vim key bindings (allowing you to go into command mode to modify your commands among other things), put this in your `~/.bashrc`, `~/.profile` or `~/.zshrc` (or whatever..):\n\n{% codeblock lang:bash line_number:false ~/.bashrc %}\nset -o vi\n\n# or, to make sure you're using emacs mode:\nset -o emacs\n{% endcodeblock %}\n\nThen source the file and you'll have vi or emacs mode enabled.\n\nIf you set your bash prompt to vi-mode, I'm sure you know how to use it. Still, as I mentioned earlier, even as a vim junkie, I still use emacs mode simply because I find it more convenient on the command line. Here are a couple of key bindings I use **all** the time:\n\n- `CTRL-A` : move cursor to beginning of line\n- `CTRL-E` : move cursor to end of line\n- `CTRL-U` : delete the line entirely\n- `CTRL-W` : delete the previous word\n- `ALT-D`  : delete current word up to the next whitespace\n- `CTRL-F` : move forward one character\n- `CTRL-B` : move backward one character\n- `ALT-F`  : move forward one word\n- `ALT-B`  : move backward one word\n- `CTRL-P` : go to previous command in history\n- `CTRL-N` : go to next command in history\n\nNow, there is a *lot* more where this came from, but this is it for now as I need to run and catch my plane. Hopefully this was helpful in some way to *someone* out there. I'll make more posts like this in the future. Wish me a safe flight and I'll be back next week!\n","source":"_posts/a-few-quick-command-line-tips-and-tricks.md","raw":"title: A few quick command-line tips and tricks\ndate: 2015-11-16 16:07:52\ncategories: linux\ntags:\n- command line\n- tips\n---\n\nI'll probably be updating this blog a bit less the coming week as I'm about to leave for a short trip to belgium, where I grew up.\n\nOf course I'll be visiting my parents and a few friends, but this Wednesday I'll also have the pleasure to see the [one and only Richard Stallman](https://rms.sexy) deliver a [lecture about the free software philosophy in Gent](http://freeasinfreedom.be/). This will be my first time seeing RMS in person and I'm quite excited!\n\nI wasn't so sure what to put here for a quick post before I go, but I thought I'd just share a few quick tips and tricks for users and lovers of the command-line! For most of you, this will be old news, but I'm sure there are lots of people out there for whom any of these quick tips would be a revelation and/or a huge productivity boost. It's unlikely that I will reach those guys and gals through this modest blog of mine, but let me give it a try anyhow!\n\nI'll probably do more of these posts later, this is just a small taste of what's to come! Read on for the first tips!\n\n<!-- more -->\n\n### Refer to previous commands\n\nEver typed a command, then realized you forgot to `sudo` it, and then typed again? No longer!\n\n{% codeblock lang:bash line_number:false %}\n# to repeat the previous command with sudo:\nsudo !!\n\n# to see a list of your previous commands\nhistory\n\n# to repeat any numbered command in the history\n!x    # where x is the number of the command\n{% endcodeblock %}\n\nAlso, to do a reverse history search, press `CTRL+R` on the command line, then type part of the command you want to repeat. Browse through multiple matches by pressing `CTRL+R` again. This will revolutionize your command-line workflow!\n\n### Emacs or vi key bindings\n\nBy default, the bash shell will support emacs key bindings. Now, I'm a *huge* vim fanatic, but on the command-line I'll use these. Still, if you prefer to use vim key bindings (allowing you to go into command mode to modify your commands among other things), put this in your `~/.bashrc`, `~/.profile` or `~/.zshrc` (or whatever..):\n\n{% codeblock lang:bash line_number:false ~/.bashrc %}\nset -o vi\n\n# or, to make sure you're using emacs mode:\nset -o emacs\n{% endcodeblock %}\n\nThen source the file and you'll have vi or emacs mode enabled.\n\nIf you set your bash prompt to vi-mode, I'm sure you know how to use it. Still, as I mentioned earlier, even as a vim junkie, I still use emacs mode simply because I find it more convenient on the command line. Here are a couple of key bindings I use **all** the time:\n\n- `CTRL-A` : move cursor to beginning of line\n- `CTRL-E` : move cursor to end of line\n- `CTRL-U` : delete the line entirely\n- `CTRL-W` : delete the previous word\n- `ALT-D`  : delete current word up to the next whitespace\n- `CTRL-F` : move forward one character\n- `CTRL-B` : move backward one character\n- `ALT-F`  : move forward one word\n- `ALT-B`  : move backward one word\n- `CTRL-P` : go to previous command in history\n- `CTRL-N` : go to next command in history\n\nNow, there is a *lot* more where this came from, but this is it for now as I need to run and catch my plane. Hopefully this was helpful in some way to *someone* out there. I'll make more posts like this in the future. Wish me a safe flight and I'll be back next week!\n","slug":"a-few-quick-command-line-tips-and-tricks","published":1,"updated":"2015-11-21T14:07:16.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk1k0004knz9qdf0i441","content":"<p>I’ll probably be updating this blog a bit less the coming week as I’m about to leave for a short trip to belgium, where I grew up.</p>\n<p>Of course I’ll be visiting my parents and a few friends, but this Wednesday I’ll also have the pleasure to see the <a href=\"https://rms.sexy\" target=\"_blank\" rel=\"external\">one and only Richard Stallman</a> deliver a <a href=\"http://freeasinfreedom.be/\" target=\"_blank\" rel=\"external\">lecture about the free software philosophy in Gent</a>. This will be my first time seeing RMS in person and I’m quite excited!</p>\n<p>I wasn’t so sure what to put here for a quick post before I go, but I thought I’d just share a few quick tips and tricks for users and lovers of the command-line! For most of you, this will be old news, but I’m sure there are lots of people out there for whom any of these quick tips would be a revelation and/or a huge productivity boost. It’s unlikely that I will reach those guys and gals through this modest blog of mine, but let me give it a try anyhow!</p>\n<p>I’ll probably do more of these posts later, this is just a small taste of what’s to come! Read on for the first tips!</p>\n<a id=\"more\"></a>\n<h3 id=\"Refer-to-previous-commands\"><a href=\"#Refer-to-previous-commands\" class=\"headerlink\" title=\"Refer to previous commands\"></a>Refer to previous commands</h3><p>Ever typed a command, then realized you forgot to <code>sudo</code> it, and then typed again? No longer!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># to repeat the previous command with sudo:</span></div><div class=\"line\">sudo !!</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># to see a list of your previous commands</span></div><div class=\"line\"><span class=\"built_in\">history</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># to repeat any numbered command in the history</span></div><div class=\"line\">!x    <span class=\"comment\"># where x is the number of the command</span></div></pre></td></tr></table></figure>\n<p>Also, to do a reverse history search, press <code>CTRL+R</code> on the command line, then type part of the command you want to repeat. Browse through multiple matches by pressing <code>CTRL+R</code> again. This will revolutionize your command-line workflow!</p>\n<h3 id=\"Emacs-or-vi-key-bindings\"><a href=\"#Emacs-or-vi-key-bindings\" class=\"headerlink\" title=\"Emacs or vi key bindings\"></a>Emacs or vi key bindings</h3><p>By default, the bash shell will support emacs key bindings. Now, I’m a <em>huge</em> vim fanatic, but on the command-line I’ll use these. Still, if you prefer to use vim key bindings (allowing you to go into command mode to modify your commands among other things), put this in your <code>~/.bashrc</code>, <code>~/.profile</code> or <code>~/.zshrc</code> (or whatever..):</p>\n<figure class=\"highlight bash\"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span> -o vi</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># or, to make sure you're using emacs mode:</span></div><div class=\"line\"><span class=\"built_in\">set</span> -o emacs</div></pre></td></tr></table></figure>\n<p>Then source the file and you’ll have vi or emacs mode enabled.</p>\n<p>If you set your bash prompt to vi-mode, I’m sure you know how to use it. Still, as I mentioned earlier, even as a vim junkie, I still use emacs mode simply because I find it more convenient on the command line. Here are a couple of key bindings I use <strong>all</strong> the time:</p>\n<ul>\n<li><code>CTRL-A</code> : move cursor to beginning of line</li>\n<li><code>CTRL-E</code> : move cursor to end of line</li>\n<li><code>CTRL-U</code> : delete the line entirely</li>\n<li><code>CTRL-W</code> : delete the previous word</li>\n<li><code>ALT-D</code>  : delete current word up to the next whitespace</li>\n<li><code>CTRL-F</code> : move forward one character</li>\n<li><code>CTRL-B</code> : move backward one character</li>\n<li><code>ALT-F</code>  : move forward one word</li>\n<li><code>ALT-B</code>  : move backward one word</li>\n<li><code>CTRL-P</code> : go to previous command in history</li>\n<li><code>CTRL-N</code> : go to next command in history</li>\n</ul>\n<p>Now, there is a <em>lot</em> more where this came from, but this is it for now as I need to run and catch my plane. Hopefully this was helpful in some way to <em>someone</em> out there. I’ll make more posts like this in the future. Wish me a safe flight and I’ll be back next week!</p>","excerpt":"<p>I’ll probably be updating this blog a bit less the coming week as I’m about to leave for a short trip to belgium, where I grew up.</p>\n<p>Of course I’ll be visiting my parents and a few friends, but this Wednesday I’ll also have the pleasure to see the <a href=\"https://rms.sexy\">one and only Richard Stallman</a> deliver a <a href=\"http://freeasinfreedom.be/\">lecture about the free software philosophy in Gent</a>. This will be my first time seeing RMS in person and I’m quite excited!</p>\n<p>I wasn’t so sure what to put here for a quick post before I go, but I thought I’d just share a few quick tips and tricks for users and lovers of the command-line! For most of you, this will be old news, but I’m sure there are lots of people out there for whom any of these quick tips would be a revelation and/or a huge productivity boost. It’s unlikely that I will reach those guys and gals through this modest blog of mine, but let me give it a try anyhow!</p>\n<p>I’ll probably do more of these posts later, this is just a small taste of what’s to come! Read on for the first tips!</p>","more":"<h3 id=\"Refer-to-previous-commands\"><a href=\"#Refer-to-previous-commands\" class=\"headerlink\" title=\"Refer to previous commands\"></a>Refer to previous commands</h3><p>Ever typed a command, then realized you forgot to <code>sudo</code> it, and then typed again? No longer!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># to repeat the previous command with sudo:</span></div><div class=\"line\">sudo !!</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># to see a list of your previous commands</span></div><div class=\"line\"><span class=\"built_in\">history</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># to repeat any numbered command in the history</span></div><div class=\"line\">!x    <span class=\"comment\"># where x is the number of the command</span></div></pre></td></tr></table></figure>\n<p>Also, to do a reverse history search, press <code>CTRL+R</code> on the command line, then type part of the command you want to repeat. Browse through multiple matches by pressing <code>CTRL+R</code> again. This will revolutionize your command-line workflow!</p>\n<h3 id=\"Emacs-or-vi-key-bindings\"><a href=\"#Emacs-or-vi-key-bindings\" class=\"headerlink\" title=\"Emacs or vi key bindings\"></a>Emacs or vi key bindings</h3><p>By default, the bash shell will support emacs key bindings. Now, I’m a <em>huge</em> vim fanatic, but on the command-line I’ll use these. Still, if you prefer to use vim key bindings (allowing you to go into command mode to modify your commands among other things), put this in your <code>~/.bashrc</code>, <code>~/.profile</code> or <code>~/.zshrc</code> (or whatever..):</p>\n<figure class=\"highlight bash\"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">set</span> -o vi</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># or, to make sure you're using emacs mode:</span></div><div class=\"line\"><span class=\"built_in\">set</span> -o emacs</div></pre></td></tr></table></figure>\n<p>Then source the file and you’ll have vi or emacs mode enabled.</p>\n<p>If you set your bash prompt to vi-mode, I’m sure you know how to use it. Still, as I mentioned earlier, even as a vim junkie, I still use emacs mode simply because I find it more convenient on the command line. Here are a couple of key bindings I use <strong>all</strong> the time:</p>\n<ul>\n<li><code>CTRL-A</code> : move cursor to beginning of line</li>\n<li><code>CTRL-E</code> : move cursor to end of line</li>\n<li><code>CTRL-U</code> : delete the line entirely</li>\n<li><code>CTRL-W</code> : delete the previous word</li>\n<li><code>ALT-D</code>  : delete current word up to the next whitespace</li>\n<li><code>CTRL-F</code> : move forward one character</li>\n<li><code>CTRL-B</code> : move backward one character</li>\n<li><code>ALT-F</code>  : move forward one word</li>\n<li><code>ALT-B</code>  : move backward one word</li>\n<li><code>CTRL-P</code> : go to previous command in history</li>\n<li><code>CTRL-N</code> : go to next command in history</li>\n</ul>\n<p>Now, there is a <em>lot</em> more where this came from, but this is it for now as I need to run and catch my plane. Hopefully this was helpful in some way to <em>someone</em> out there. I’ll make more posts like this in the future. Wish me a safe flight and I’ll be back next week!</p>"},{"title":"Asynchronous tests in Mocha using before and after blocks","date":"2015-11-27T14:19:27.000Z","_content":"\nWhile writing [my hexo plugin](http://gregjs.com/javascript/2015/hexo-easy-edit-1-2-0-pages-cleanup-rename/), I resolved to switch my coding style for my next project from _whatever works_ to _BDD/TDD_. I'd wasted a bit too much time pushing buggy code and fixing it after the fact. Unit testing was the obvious solution.\n\nHonestly, I still don't understand what exactly the difference is between Test- and Behavior-Driven Development, other than the usage of different syntax (TDD uses `assert` and BDD uses `expect` or `should`, or at least, this _seems_ to be the case). I'll look into it more later, but for now I just wanted to get test on.\n\nWriting tests with Mocha and Chai before writing any code for my new Node project was a bit of a culture-shock, but it was relatively easy and painless. That is, until I ran into asynchronicity issues. Suddenly, my tests started timing out and it took quite some time (despite great documentation) to finally get them right.\n\n{% asset_img screen.png 'Mocha tests screenshot' %}\n\nI suppose others out there could benefit from reading how I structured my async test cases. I'm obviously not saying I'm an expert, since I only just started to seriously use Mocha myself. But this works, and if it so happens that you you are pulling your hair out in despair from being met by failing async unit tests and by some stroke of chance (or through some adept googling) you arrive on this website, this just might be your ticket to sanity.\n\n<!-- more -->\n\nAnyway, what I've got here are some test cases for a `save` function I wrote. The function takes an `article` object as its first parameter (which has an `md` and a `title` property), and an optional second parameter for the path. If the second parameter is not supplied, the article's markdown content (`article.md`) will get saved in the `./content/_content` directory, using `article.title + '.md'` for its title.\n\nThis well-commented snippet has a few unit tests to test this function and to help you along with your own. Of course I have more to test the optional parameter etc, but I wanted to keep this short. Take a look, incorporate the ideas in your own projects or comment if you see me making glaring mistakes. Good luck and keep on testing :-)\n\n{% codeblock lang:javascript test.js %}\n// I'm using BDD-style expect\nvar expect = require('chai').expect;\n\n// Pulling in the function I'm testing\nvar save = require('../lib/save');\n\n// Promisify all the things.. It's just easier to work with .then functions, compared to callbacks\nvar Promise = require('bluebird');\nvar fsUnlink = Promise.promisify(require('fs').unlink);\nvar fsStat = Promise.promisify(require('fs').stat);\nvar fsReadFile = Promise.promisify(require('fs').readFile);\n\nvar path = require('path');\n\ndescribe('save.js', function() {\n  describe('saving files to default directory', function() {\n\n    // Setting up what should be the correct default save path\n    var dest = path.join(process.cwd(), 'content', '_content', 'test title.md');\n\n    // Making a fake article to test the function with\n    var article = { md: 'some content', title: 'test title' };\n\n    // Everything inside this before block will execute before the two tests in this describe block\n    // Note the done parameter. This signifies asynchronous control flow\n    // I resolve the promise to save my fake article, then call the done callback\n    // Mocha will wait for this done callback before moving on to the next block\n    before(function(done) {\n      return Promise.resolve(save(article)).then(function() {\n        done();\n      });\n    });\n\n    // Now the fake article has been saved and the tests begin to run\n    // I'm using asynchronous fs-functions here, so again I need to use done()\n    // Here I'm just making sure that the default path for this fake article exists and is a file\n    it('saves files in the right directory', function(done) {\n      fsStat(dest).then(function(stats) {\n        expect(stats.isFile()).to.be.true;\n        done();\n      });\n    });\n\n    // Same as above, this test will only resolve after the done callback has been called\n    // Here I'm checking whether the content of the mock destination file equals what I set it up with\n    it('saves the content correctly', function(done) {\n      fsReadFile(dest, 'utf8').then(function(content) {\n        expect(content).to.equal('some content');\n        done();\n      });\n    });\n\n    // Whatever is in the after block will run after the tests have completed\n    // Since I made and saved a fake article, I will now have to delete it again\n    // Yet again, the code is asynchronous (though you could use the synchronous fs versions if you prefer..)\n    after(function(done) {\n      fsUnlink(dest).then(function() {\n        done();\n      });\n    });\n  }\n});\n{% endcodeblock %}\n\n\n\n\n","source":"_posts/asynchronous-tests-in-mocha-using-before-and-after-blocks.md","raw":"title: Asynchronous tests in Mocha using before and after blocks\ndate: 2015-11-27 14:19:27\ncategories: javascript\ntags:\n- js\n- testing\n- async\n- node\n---\n\nWhile writing [my hexo plugin](http://gregjs.com/javascript/2015/hexo-easy-edit-1-2-0-pages-cleanup-rename/), I resolved to switch my coding style for my next project from _whatever works_ to _BDD/TDD_. I'd wasted a bit too much time pushing buggy code and fixing it after the fact. Unit testing was the obvious solution.\n\nHonestly, I still don't understand what exactly the difference is between Test- and Behavior-Driven Development, other than the usage of different syntax (TDD uses `assert` and BDD uses `expect` or `should`, or at least, this _seems_ to be the case). I'll look into it more later, but for now I just wanted to get test on.\n\nWriting tests with Mocha and Chai before writing any code for my new Node project was a bit of a culture-shock, but it was relatively easy and painless. That is, until I ran into asynchronicity issues. Suddenly, my tests started timing out and it took quite some time (despite great documentation) to finally get them right.\n\n{% asset_img screen.png 'Mocha tests screenshot' %}\n\nI suppose others out there could benefit from reading how I structured my async test cases. I'm obviously not saying I'm an expert, since I only just started to seriously use Mocha myself. But this works, and if it so happens that you you are pulling your hair out in despair from being met by failing async unit tests and by some stroke of chance (or through some adept googling) you arrive on this website, this just might be your ticket to sanity.\n\n<!-- more -->\n\nAnyway, what I've got here are some test cases for a `save` function I wrote. The function takes an `article` object as its first parameter (which has an `md` and a `title` property), and an optional second parameter for the path. If the second parameter is not supplied, the article's markdown content (`article.md`) will get saved in the `./content/_content` directory, using `article.title + '.md'` for its title.\n\nThis well-commented snippet has a few unit tests to test this function and to help you along with your own. Of course I have more to test the optional parameter etc, but I wanted to keep this short. Take a look, incorporate the ideas in your own projects or comment if you see me making glaring mistakes. Good luck and keep on testing :-)\n\n{% codeblock lang:javascript test.js %}\n// I'm using BDD-style expect\nvar expect = require('chai').expect;\n\n// Pulling in the function I'm testing\nvar save = require('../lib/save');\n\n// Promisify all the things.. It's just easier to work with .then functions, compared to callbacks\nvar Promise = require('bluebird');\nvar fsUnlink = Promise.promisify(require('fs').unlink);\nvar fsStat = Promise.promisify(require('fs').stat);\nvar fsReadFile = Promise.promisify(require('fs').readFile);\n\nvar path = require('path');\n\ndescribe('save.js', function() {\n  describe('saving files to default directory', function() {\n\n    // Setting up what should be the correct default save path\n    var dest = path.join(process.cwd(), 'content', '_content', 'test title.md');\n\n    // Making a fake article to test the function with\n    var article = { md: 'some content', title: 'test title' };\n\n    // Everything inside this before block will execute before the two tests in this describe block\n    // Note the done parameter. This signifies asynchronous control flow\n    // I resolve the promise to save my fake article, then call the done callback\n    // Mocha will wait for this done callback before moving on to the next block\n    before(function(done) {\n      return Promise.resolve(save(article)).then(function() {\n        done();\n      });\n    });\n\n    // Now the fake article has been saved and the tests begin to run\n    // I'm using asynchronous fs-functions here, so again I need to use done()\n    // Here I'm just making sure that the default path for this fake article exists and is a file\n    it('saves files in the right directory', function(done) {\n      fsStat(dest).then(function(stats) {\n        expect(stats.isFile()).to.be.true;\n        done();\n      });\n    });\n\n    // Same as above, this test will only resolve after the done callback has been called\n    // Here I'm checking whether the content of the mock destination file equals what I set it up with\n    it('saves the content correctly', function(done) {\n      fsReadFile(dest, 'utf8').then(function(content) {\n        expect(content).to.equal('some content');\n        done();\n      });\n    });\n\n    // Whatever is in the after block will run after the tests have completed\n    // Since I made and saved a fake article, I will now have to delete it again\n    // Yet again, the code is asynchronous (though you could use the synchronous fs versions if you prefer..)\n    after(function(done) {\n      fsUnlink(dest).then(function() {\n        done();\n      });\n    });\n  }\n});\n{% endcodeblock %}\n\n\n\n\n","slug":"asynchronous-tests-in-mocha-using-before-and-after-blocks","published":1,"updated":"2015-11-27T15:21:07.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk1p0007knz9u0o62eq8","content":"<p>While writing <a href=\"http://gregjs.com/javascript/2015/hexo-easy-edit-1-2-0-pages-cleanup-rename/\" target=\"_blank\" rel=\"external\">my hexo plugin</a>, I resolved to switch my coding style for my next project from <em>whatever works</em> to <em>BDD/TDD</em>. I’d wasted a bit too much time pushing buggy code and fixing it after the fact. Unit testing was the obvious solution.</p>\n<p>Honestly, I still don’t understand what exactly the difference is between Test- and Behavior-Driven Development, other than the usage of different syntax (TDD uses <code>assert</code> and BDD uses <code>expect</code> or <code>should</code>, or at least, this <em>seems</em> to be the case). I’ll look into it more later, but for now I just wanted to get test on.</p>\n<p>Writing tests with Mocha and Chai before writing any code for my new Node project was a bit of a culture-shock, but it was relatively easy and painless. That is, until I ran into asynchronicity issues. Suddenly, my tests started timing out and it took quite some time (despite great documentation) to finally get them right.</p>\n<img src=\"/javascript/2015/asynchronous-tests-in-mocha-using-before-and-after-blocks/screen.png\" alt=\"Mocha tests screenshot\" title=\"Mocha tests screenshot\">\n<p>I suppose others out there could benefit from reading how I structured my async test cases. I’m obviously not saying I’m an expert, since I only just started to seriously use Mocha myself. But this works, and if it so happens that you you are pulling your hair out in despair from being met by failing async unit tests and by some stroke of chance (or through some adept googling) you arrive on this website, this just might be your ticket to sanity.</p>\n<a id=\"more\"></a>\n<p>Anyway, what I’ve got here are some test cases for a <code>save</code> function I wrote. The function takes an <code>article</code> object as its first parameter (which has an <code>md</code> and a <code>title</code> property), and an optional second parameter for the path. If the second parameter is not supplied, the article’s markdown content (<code>article.md</code>) will get saved in the <code>./content/_content</code> directory, using <code>article.title + &#39;.md&#39;</code> for its title.</p>\n<p>This well-commented snippet has a few unit tests to test this function and to help you along with your own. Of course I have more to test the optional parameter etc, but I wanted to keep this short. Take a look, incorporate the ideas in your own projects or comment if you see me making glaring mistakes. Good luck and keep on testing :-)</p>\n<figure class=\"highlight javascript\"><figcaption><span>test.js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// I'm using BDD-style expect</span></div><div class=\"line\"><span class=\"keyword\">var</span> expect = <span class=\"built_in\">require</span>(<span class=\"string\">'chai'</span>).expect;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Pulling in the function I'm testing</span></div><div class=\"line\"><span class=\"keyword\">var</span> save = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/save'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promisify all the things.. It's just easier to work with .then functions, compared to callbacks</span></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fsUnlink = <span class=\"built_in\">Promise</span>.promisify(<span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>).unlink);</div><div class=\"line\"><span class=\"keyword\">var</span> fsStat = <span class=\"built_in\">Promise</span>.promisify(<span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>).stat);</div><div class=\"line\"><span class=\"keyword\">var</span> fsReadFile = <span class=\"built_in\">Promise</span>.promisify(<span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>).readFile);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">'save.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  describe(<span class=\"string\">'saving files to default directory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Setting up what should be the correct default save path</span></div><div class=\"line\">    <span class=\"keyword\">var</span> dest = path.join(process.cwd(), <span class=\"string\">'content'</span>, <span class=\"string\">'_content'</span>, <span class=\"string\">'test title.md'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Making a fake article to test the function with</span></div><div class=\"line\">    <span class=\"keyword\">var</span> article = &#123; md: <span class=\"string\">'some content'</span>, title: <span class=\"string\">'test title'</span> &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Everything inside this before block will execute before the two tests in this describe block</span></div><div class=\"line\">    <span class=\"comment\">// Note the done parameter. This signifies asynchronous control flow</span></div><div class=\"line\">    <span class=\"comment\">// I resolve the promise to save my fake article, then call the done callback</span></div><div class=\"line\">    <span class=\"comment\">// Mocha will wait for this done callback before moving on to the next block</span></div><div class=\"line\">    before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(save(article)).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        done();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Now the fake article has been saved and the tests begin to run</span></div><div class=\"line\">    <span class=\"comment\">// I'm using asynchronous fs-functions here, so again I need to use done()</span></div><div class=\"line\">    <span class=\"comment\">// Here I'm just making sure that the default path for this fake article exists and is a file</span></div><div class=\"line\">    it(<span class=\"string\">'saves files in the right directory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">      fsStat(dest).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">stats</span>) </span>&#123;</div><div class=\"line\">        expect(stats.isFile()).to.be.true;</div><div class=\"line\">        done();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Same as above, this test will only resolve after the done callback has been called</span></div><div class=\"line\">    <span class=\"comment\">// Here I'm checking whether the content of the mock destination file equals what I set it up with</span></div><div class=\"line\">    it(<span class=\"string\">'saves the content correctly'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">      fsReadFile(dest, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">        expect(content).to.equal(<span class=\"string\">'some content'</span>);</div><div class=\"line\">        done();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Whatever is in the after block will run after the tests have completed</span></div><div class=\"line\">    <span class=\"comment\">// Since I made and saved a fake article, I will now have to delete it again</span></div><div class=\"line\">    <span class=\"comment\">// Yet again, the code is asynchronous (though you could use the synchronous fs versions if you prefer..)</span></div><div class=\"line\">    after(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">      fsUnlink(dest).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        done();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","excerpt":"<p>While writing <a href=\"http://gregjs.com/javascript/2015/hexo-easy-edit-1-2-0-pages-cleanup-rename/\">my hexo plugin</a>, I resolved to switch my coding style for my next project from <em>whatever works</em> to <em>BDD/TDD</em>. I’d wasted a bit too much time pushing buggy code and fixing it after the fact. Unit testing was the obvious solution.</p>\n<p>Honestly, I still don’t understand what exactly the difference is between Test- and Behavior-Driven Development, other than the usage of different syntax (TDD uses <code>assert</code> and BDD uses <code>expect</code> or <code>should</code>, or at least, this <em>seems</em> to be the case). I’ll look into it more later, but for now I just wanted to get test on.</p>\n<p>Writing tests with Mocha and Chai before writing any code for my new Node project was a bit of a culture-shock, but it was relatively easy and painless. That is, until I ran into asynchronicity issues. Suddenly, my tests started timing out and it took quite some time (despite great documentation) to finally get them right.</p>\n<img src=\"/javascript/2015/asynchronous-tests-in-mocha-using-before-and-after-blocks/screen.png\" alt=\"Mocha tests screenshot\" title=\"Mocha tests screenshot\">\n<p>I suppose others out there could benefit from reading how I structured my async test cases. I’m obviously not saying I’m an expert, since I only just started to seriously use Mocha myself. But this works, and if it so happens that you you are pulling your hair out in despair from being met by failing async unit tests and by some stroke of chance (or through some adept googling) you arrive on this website, this just might be your ticket to sanity.</p>","more":"<p>Anyway, what I’ve got here are some test cases for a <code>save</code> function I wrote. The function takes an <code>article</code> object as its first parameter (which has an <code>md</code> and a <code>title</code> property), and an optional second parameter for the path. If the second parameter is not supplied, the article’s markdown content (<code>article.md</code>) will get saved in the <code>./content/_content</code> directory, using <code>article.title + &#39;.md&#39;</code> for its title.</p>\n<p>This well-commented snippet has a few unit tests to test this function and to help you along with your own. Of course I have more to test the optional parameter etc, but I wanted to keep this short. Take a look, incorporate the ideas in your own projects or comment if you see me making glaring mistakes. Good luck and keep on testing :-)</p>\n<figure class=\"highlight javascript\"><figcaption><span>test.js</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// I'm using BDD-style expect</span></div><div class=\"line\"><span class=\"keyword\">var</span> expect = <span class=\"built_in\">require</span>(<span class=\"string\">'chai'</span>).expect;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Pulling in the function I'm testing</span></div><div class=\"line\"><span class=\"keyword\">var</span> save = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/save'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Promisify all the things.. It's just easier to work with .then functions, compared to callbacks</span></div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fsUnlink = <span class=\"built_in\">Promise</span>.promisify(<span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>).unlink);</div><div class=\"line\"><span class=\"keyword\">var</span> fsStat = <span class=\"built_in\">Promise</span>.promisify(<span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>).stat);</div><div class=\"line\"><span class=\"keyword\">var</span> fsReadFile = <span class=\"built_in\">Promise</span>.promisify(<span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>).readFile);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">'save.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  describe(<span class=\"string\">'saving files to default directory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Setting up what should be the correct default save path</span></div><div class=\"line\">    <span class=\"keyword\">var</span> dest = path.join(process.cwd(), <span class=\"string\">'content'</span>, <span class=\"string\">'_content'</span>, <span class=\"string\">'test title.md'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Making a fake article to test the function with</span></div><div class=\"line\">    <span class=\"keyword\">var</span> article = &#123; md: <span class=\"string\">'some content'</span>, title: <span class=\"string\">'test title'</span> &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Everything inside this before block will execute before the two tests in this describe block</span></div><div class=\"line\">    <span class=\"comment\">// Note the done parameter. This signifies asynchronous control flow</span></div><div class=\"line\">    <span class=\"comment\">// I resolve the promise to save my fake article, then call the done callback</span></div><div class=\"line\">    <span class=\"comment\">// Mocha will wait for this done callback before moving on to the next block</span></div><div class=\"line\">    before(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(save(article)).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        done();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Now the fake article has been saved and the tests begin to run</span></div><div class=\"line\">    <span class=\"comment\">// I'm using asynchronous fs-functions here, so again I need to use done()</span></div><div class=\"line\">    <span class=\"comment\">// Here I'm just making sure that the default path for this fake article exists and is a file</span></div><div class=\"line\">    it(<span class=\"string\">'saves files in the right directory'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">      fsStat(dest).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">stats</span>) </span>&#123;</div><div class=\"line\">        expect(stats.isFile()).to.be.true;</div><div class=\"line\">        done();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Same as above, this test will only resolve after the done callback has been called</span></div><div class=\"line\">    <span class=\"comment\">// Here I'm checking whether the content of the mock destination file equals what I set it up with</span></div><div class=\"line\">    it(<span class=\"string\">'saves the content correctly'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">      fsReadFile(dest, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">        expect(content).to.equal(<span class=\"string\">'some content'</span>);</div><div class=\"line\">        done();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Whatever is in the after block will run after the tests have completed</span></div><div class=\"line\">    <span class=\"comment\">// Since I made and saved a fake article, I will now have to delete it again</span></div><div class=\"line\">    <span class=\"comment\">// Yet again, the code is asynchronous (though you could use the synchronous fs versions if you prefer..)</span></div><div class=\"line\">    after(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>) </span>&#123;</div><div class=\"line\">      fsUnlink(dest).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        done();</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"awman 1.1.1: AUR, multi-language support, better formatting and more","date":"2016-02-15T20:06:16.000Z","_content":"\nIt's been a while since my last update. Some of that is due to falling ill yet again. The rest is because my `arch-wiki-man`/`awman` project turned out to be quite a bit more in demand than I thought it would be.\n\nMy cautious announcement about it was greeted by a pretty enthusiastic response, a number of questions, a few feature requests and even a bug report. As someone who is still relatively new to programming, I have to say I felt rather overwhelmed - and overjoyed!\n\nJust in case some of you are interested, here's what's changed in the past week and a half:\n\n<!-- more -->\n\n+ **Using the API**: When someone asked me why I was going through so much trouble scraping and parsing pages from the wiki for my underlying [offline-arch-wiki](https://github.com/greg-js/offline-arch-wiki) project, my response was, somewhat embarrassingly, \"_OMG there's an API?!_\". Turns out there most definitely is one and I'm now using it. Oh man, if only I'd known earlier..\n+ **Multi-language support**: Instead of 2.000-ish English articles, the database now holds over 4.000 articles in over a dozen languages. By default, searches are in English, but you can search in any of the other languages with `awman -l <language>` - look at the available languages with `awman --list-languages`. Not all of them have been implemented correctly yet though. Just the ones that are hosted on the same URL.\n+ **On the AUR**: A few people expressed a desire to be able to install the package through the [Arch User Repository](https://aur.archlinux.org/) rather than npm. So I decided to figure out how to do that and am now [maintaining the package there](https://aur.archlinux.org/packages/arch-wiki-man/) as well. In fact, if you're on Arch (and if you're interested in this package, you probably are), this is probably the most straightforward way to install it now, although I'll only be updating this once a week instead of once every two days for the npm package.\n+ **Better formatting**: I worked out a number of kinks in the formatting. There are still a few left though. And unfortunately, I spent a whole lot of time trying to get my own wikitext parser going to greatly simplify things but got very stuck somewhere. I'll be working on that some more later and hopefully will get an even better (as in, much faster) version out soon.\n\nThat's probably about the most important stuff. I still have a bunch of things on my todo-list for this project, but first I need to get healthy again.. Once I do, I'll tackle the task of writing my own markdown to troff parser to make the project a **lot** lighter.\n\nLet me end with a huge thank you to everyone who's using my code, and especially thanks to all those who have given advice, posted enthusiastic comments, requested features, submitted bugs, starred me on GitHub and voted for me on the AUR! I know most or all of you I want to thank aren't reading this, but for those who do, seriously, you don't know how much it means to me!\n","source":"_posts/awman-1-1-1-multi-language-support-better-formatting-and-more.md","raw":"title: 'awman 1.1.1: AUR, multi-language support, better formatting and more'\ndate: 2016-02-15 20:06:16\ncategories: javascript\ntags:\n- open source\n- js\n- npm\n- arch linux\n---\n\nIt's been a while since my last update. Some of that is due to falling ill yet again. The rest is because my `arch-wiki-man`/`awman` project turned out to be quite a bit more in demand than I thought it would be.\n\nMy cautious announcement about it was greeted by a pretty enthusiastic response, a number of questions, a few feature requests and even a bug report. As someone who is still relatively new to programming, I have to say I felt rather overwhelmed - and overjoyed!\n\nJust in case some of you are interested, here's what's changed in the past week and a half:\n\n<!-- more -->\n\n+ **Using the API**: When someone asked me why I was going through so much trouble scraping and parsing pages from the wiki for my underlying [offline-arch-wiki](https://github.com/greg-js/offline-arch-wiki) project, my response was, somewhat embarrassingly, \"_OMG there's an API?!_\". Turns out there most definitely is one and I'm now using it. Oh man, if only I'd known earlier..\n+ **Multi-language support**: Instead of 2.000-ish English articles, the database now holds over 4.000 articles in over a dozen languages. By default, searches are in English, but you can search in any of the other languages with `awman -l <language>` - look at the available languages with `awman --list-languages`. Not all of them have been implemented correctly yet though. Just the ones that are hosted on the same URL.\n+ **On the AUR**: A few people expressed a desire to be able to install the package through the [Arch User Repository](https://aur.archlinux.org/) rather than npm. So I decided to figure out how to do that and am now [maintaining the package there](https://aur.archlinux.org/packages/arch-wiki-man/) as well. In fact, if you're on Arch (and if you're interested in this package, you probably are), this is probably the most straightforward way to install it now, although I'll only be updating this once a week instead of once every two days for the npm package.\n+ **Better formatting**: I worked out a number of kinks in the formatting. There are still a few left though. And unfortunately, I spent a whole lot of time trying to get my own wikitext parser going to greatly simplify things but got very stuck somewhere. I'll be working on that some more later and hopefully will get an even better (as in, much faster) version out soon.\n\nThat's probably about the most important stuff. I still have a bunch of things on my todo-list for this project, but first I need to get healthy again.. Once I do, I'll tackle the task of writing my own markdown to troff parser to make the project a **lot** lighter.\n\nLet me end with a huge thank you to everyone who's using my code, and especially thanks to all those who have given advice, posted enthusiastic comments, requested features, submitted bugs, starred me on GitHub and voted for me on the AUR! I know most or all of you I want to thank aren't reading this, but for those who do, seriously, you don't know how much it means to me!\n","slug":"awman-1-1-1-multi-language-support-better-formatting-and-more","published":1,"updated":"2016-02-16T04:16:17.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk1r0008knz95ze31gy5","content":"<p>It’s been a while since my last update. Some of that is due to falling ill yet again. The rest is because my <code>arch-wiki-man</code>/<code>awman</code> project turned out to be quite a bit more in demand than I thought it would be.</p>\n<p>My cautious announcement about it was greeted by a pretty enthusiastic response, a number of questions, a few feature requests and even a bug report. As someone who is still relatively new to programming, I have to say I felt rather overwhelmed - and overjoyed!</p>\n<p>Just in case some of you are interested, here’s what’s changed in the past week and a half:</p>\n<a id=\"more\"></a>\n<ul>\n<li><strong>Using the API</strong>: When someone asked me why I was going through so much trouble scraping and parsing pages from the wiki for my underlying <a href=\"https://github.com/greg-js/offline-arch-wiki\" target=\"_blank\" rel=\"external\">offline-arch-wiki</a> project, my response was, somewhat embarrassingly, “<em>OMG there’s an API?!</em>“. Turns out there most definitely is one and I’m now using it. Oh man, if only I’d known earlier..</li>\n<li><strong>Multi-language support</strong>: Instead of 2.000-ish English articles, the database now holds over 4.000 articles in over a dozen languages. By default, searches are in English, but you can search in any of the other languages with <code>awman -l &lt;language&gt;</code> - look at the available languages with <code>awman --list-languages</code>. Not all of them have been implemented correctly yet though. Just the ones that are hosted on the same URL.</li>\n<li><strong>On the AUR</strong>: A few people expressed a desire to be able to install the package through the <a href=\"https://aur.archlinux.org/\" target=\"_blank\" rel=\"external\">Arch User Repository</a> rather than npm. So I decided to figure out how to do that and am now <a href=\"https://aur.archlinux.org/packages/arch-wiki-man/\" target=\"_blank\" rel=\"external\">maintaining the package there</a> as well. In fact, if you’re on Arch (and if you’re interested in this package, you probably are), this is probably the most straightforward way to install it now, although I’ll only be updating this once a week instead of once every two days for the npm package.</li>\n<li><strong>Better formatting</strong>: I worked out a number of kinks in the formatting. There are still a few left though. And unfortunately, I spent a whole lot of time trying to get my own wikitext parser going to greatly simplify things but got very stuck somewhere. I’ll be working on that some more later and hopefully will get an even better (as in, much faster) version out soon.</li>\n</ul>\n<p>That’s probably about the most important stuff. I still have a bunch of things on my todo-list for this project, but first I need to get healthy again.. Once I do, I’ll tackle the task of writing my own markdown to troff parser to make the project a <strong>lot</strong> lighter.</p>\n<p>Let me end with a huge thank you to everyone who’s using my code, and especially thanks to all those who have given advice, posted enthusiastic comments, requested features, submitted bugs, starred me on GitHub and voted for me on the AUR! I know most or all of you I want to thank aren’t reading this, but for those who do, seriously, you don’t know how much it means to me!</p>","excerpt":"<p>It’s been a while since my last update. Some of that is due to falling ill yet again. The rest is because my <code>arch-wiki-man</code>/<code>awman</code> project turned out to be quite a bit more in demand than I thought it would be.</p>\n<p>My cautious announcement about it was greeted by a pretty enthusiastic response, a number of questions, a few feature requests and even a bug report. As someone who is still relatively new to programming, I have to say I felt rather overwhelmed - and overjoyed!</p>\n<p>Just in case some of you are interested, here’s what’s changed in the past week and a half:</p>","more":"<ul>\n<li><strong>Using the API</strong>: When someone asked me why I was going through so much trouble scraping and parsing pages from the wiki for my underlying <a href=\"https://github.com/greg-js/offline-arch-wiki\">offline-arch-wiki</a> project, my response was, somewhat embarrassingly, “<em>OMG there’s an API?!</em>“. Turns out there most definitely is one and I’m now using it. Oh man, if only I’d known earlier..</li>\n<li><strong>Multi-language support</strong>: Instead of 2.000-ish English articles, the database now holds over 4.000 articles in over a dozen languages. By default, searches are in English, but you can search in any of the other languages with <code>awman -l &lt;language&gt;</code> - look at the available languages with <code>awman --list-languages</code>. Not all of them have been implemented correctly yet though. Just the ones that are hosted on the same URL.</li>\n<li><strong>On the AUR</strong>: A few people expressed a desire to be able to install the package through the <a href=\"https://aur.archlinux.org/\">Arch User Repository</a> rather than npm. So I decided to figure out how to do that and am now <a href=\"https://aur.archlinux.org/packages/arch-wiki-man/\">maintaining the package there</a> as well. In fact, if you’re on Arch (and if you’re interested in this package, you probably are), this is probably the most straightforward way to install it now, although I’ll only be updating this once a week instead of once every two days for the npm package.</li>\n<li><strong>Better formatting</strong>: I worked out a number of kinks in the formatting. There are still a few left though. And unfortunately, I spent a whole lot of time trying to get my own wikitext parser going to greatly simplify things but got very stuck somewhere. I’ll be working on that some more later and hopefully will get an even better (as in, much faster) version out soon.</li>\n</ul>\n<p>That’s probably about the most important stuff. I still have a bunch of things on my todo-list for this project, but first I need to get healthy again.. Once I do, I’ll tackle the task of writing my own markdown to troff parser to make the project a <strong>lot</strong> lighter.</p>\n<p>Let me end with a huge thank you to everyone who’s using my code, and especially thanks to all those who have given advice, posted enthusiastic comments, requested features, submitted bugs, starred me on GitHub and voted for me on the AUR! I know most or all of you I want to thank aren’t reading this, but for those who do, seriously, you don’t know how much it means to me!</p>"},{"title":"Back from holiday and how to use dead time","date":"2016-03-08T12:00:50.000Z","_content":"\nIt's been while since my last activity here. The reason is I've been out visiting my parents across the English Channel, hiking with my girlfriend in German-speaking Belgium, and then I topped it all off with a long weekend trip with friends in the sunny south of Spain.\n\nIt was my original intention to keep working and posting while abroad, but while there I ended up deciding against it, partly due to just being too tired at the end of every day, and partly to give my mind a rest from JS on my time away from the PC -- though I did lug around a Chromebook with SSH access to a dev server everywhere I went.\n\nSo I've not been coding much for over two weeks now and I feel a little rusty. After I submit this post, I will gather my thoughts and once again attack my now neglected to-do list. Said list will need a few more tasks added first though, because I discovered that travel-time abroad, while not good for doing actual sit-down work, is actually great for other things important to a budding coder.\n\n<!-- more -->\n\nTraveling is great, but often there is a lot of dead time. Sitting in airplanes, trains and buses, waiting for flights and rides, waiting for travel-mates to all take a shower before heading out to town.. You can't use that time for doing real work, but you *can* listen to podcasts or catch up on articles, so that's what I did. A lot of.\n\nWhat I'm saying is that even with the best of intentions, trying to solve complex problems while on holiday is probably a big mistake. Dead travel time is unpredictable, variable in length and often occurs in loud, distracting environments, while any programmer knows that the *coding zone* is not something one just snaps in and out of at will.\n\nPerhaps I'm just stating the obvious here, but to me it was a revelation. I was worried before I left that I would spend over two weeks doing nothing, so promised myself I'd work. But when I tried to use dead time for work, it turned out to be more of an exercise in frustration. When I switched to podcasts and articles instead, everything clicked again. My dead time was useful. I moved through my huge backlog of articles and tutorials and I caught up on my podcast playlist.\n\nConclusion: if you're on holiday and feel like you should be doing *something* useful during the dead parts of the day, but struggle with getting into the zone, open your bookmarks or your podcast app instead! As for me, I may not have solved any problems or contributed to open source in the ~16 days I've been gone, but hey, all that dead time adds up so I've used it to read dozens of articles I feared I would never get to, caught up on [JS-Jabber](https://devchat.tv/js-jabber) and [The Changelog](https://changelog.com) episodes I'd missed and went through half of the [Getting Started With Elixir](http://elixir-lang.org/getting-started/introduction.html) tutorial. Not too shabby!\n\nBut now, back to the real world! Next post I'll be back to actual content again, I swear!\n","source":"_posts/back-from-holiday-and-how-to-use-dead-time.md","raw":"title: \"Back from holiday and how to use dead time\"\ndate: 2016-03-08 12:00:50\ncategories: life\ntags:\n  - meta\n---\n\nIt's been while since my last activity here. The reason is I've been out visiting my parents across the English Channel, hiking with my girlfriend in German-speaking Belgium, and then I topped it all off with a long weekend trip with friends in the sunny south of Spain.\n\nIt was my original intention to keep working and posting while abroad, but while there I ended up deciding against it, partly due to just being too tired at the end of every day, and partly to give my mind a rest from JS on my time away from the PC -- though I did lug around a Chromebook with SSH access to a dev server everywhere I went.\n\nSo I've not been coding much for over two weeks now and I feel a little rusty. After I submit this post, I will gather my thoughts and once again attack my now neglected to-do list. Said list will need a few more tasks added first though, because I discovered that travel-time abroad, while not good for doing actual sit-down work, is actually great for other things important to a budding coder.\n\n<!-- more -->\n\nTraveling is great, but often there is a lot of dead time. Sitting in airplanes, trains and buses, waiting for flights and rides, waiting for travel-mates to all take a shower before heading out to town.. You can't use that time for doing real work, but you *can* listen to podcasts or catch up on articles, so that's what I did. A lot of.\n\nWhat I'm saying is that even with the best of intentions, trying to solve complex problems while on holiday is probably a big mistake. Dead travel time is unpredictable, variable in length and often occurs in loud, distracting environments, while any programmer knows that the *coding zone* is not something one just snaps in and out of at will.\n\nPerhaps I'm just stating the obvious here, but to me it was a revelation. I was worried before I left that I would spend over two weeks doing nothing, so promised myself I'd work. But when I tried to use dead time for work, it turned out to be more of an exercise in frustration. When I switched to podcasts and articles instead, everything clicked again. My dead time was useful. I moved through my huge backlog of articles and tutorials and I caught up on my podcast playlist.\n\nConclusion: if you're on holiday and feel like you should be doing *something* useful during the dead parts of the day, but struggle with getting into the zone, open your bookmarks or your podcast app instead! As for me, I may not have solved any problems or contributed to open source in the ~16 days I've been gone, but hey, all that dead time adds up so I've used it to read dozens of articles I feared I would never get to, caught up on [JS-Jabber](https://devchat.tv/js-jabber) and [The Changelog](https://changelog.com) episodes I'd missed and went through half of the [Getting Started With Elixir](http://elixir-lang.org/getting-started/introduction.html) tutorial. Not too shabby!\n\nBut now, back to the real world! Next post I'll be back to actual content again, I swear!\n","slug":"back-from-holiday-and-how-to-use-dead-time","published":1,"updated":"2016-03-08T12:38:25.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk1t000aknz9af838m32","content":"<p>It’s been while since my last activity here. The reason is I’ve been out visiting my parents across the English Channel, hiking with my girlfriend in German-speaking Belgium, and then I topped it all off with a long weekend trip with friends in the sunny south of Spain.</p>\n<p>It was my original intention to keep working and posting while abroad, but while there I ended up deciding against it, partly due to just being too tired at the end of every day, and partly to give my mind a rest from JS on my time away from the PC – though I did lug around a Chromebook with SSH access to a dev server everywhere I went.</p>\n<p>So I’ve not been coding much for over two weeks now and I feel a little rusty. After I submit this post, I will gather my thoughts and once again attack my now neglected to-do list. Said list will need a few more tasks added first though, because I discovered that travel-time abroad, while not good for doing actual sit-down work, is actually great for other things important to a budding coder.</p>\n<a id=\"more\"></a>\n<p>Traveling is great, but often there is a lot of dead time. Sitting in airplanes, trains and buses, waiting for flights and rides, waiting for travel-mates to all take a shower before heading out to town.. You can’t use that time for doing real work, but you <em>can</em> listen to podcasts or catch up on articles, so that’s what I did. A lot of.</p>\n<p>What I’m saying is that even with the best of intentions, trying to solve complex problems while on holiday is probably a big mistake. Dead travel time is unpredictable, variable in length and often occurs in loud, distracting environments, while any programmer knows that the <em>coding zone</em> is not something one just snaps in and out of at will.</p>\n<p>Perhaps I’m just stating the obvious here, but to me it was a revelation. I was worried before I left that I would spend over two weeks doing nothing, so promised myself I’d work. But when I tried to use dead time for work, it turned out to be more of an exercise in frustration. When I switched to podcasts and articles instead, everything clicked again. My dead time was useful. I moved through my huge backlog of articles and tutorials and I caught up on my podcast playlist.</p>\n<p>Conclusion: if you’re on holiday and feel like you should be doing <em>something</em> useful during the dead parts of the day, but struggle with getting into the zone, open your bookmarks or your podcast app instead! As for me, I may not have solved any problems or contributed to open source in the ~16 days I’ve been gone, but hey, all that dead time adds up so I’ve used it to read dozens of articles I feared I would never get to, caught up on <a href=\"https://devchat.tv/js-jabber\" target=\"_blank\" rel=\"external\">JS-Jabber</a> and <a href=\"https://changelog.com\" target=\"_blank\" rel=\"external\">The Changelog</a> episodes I’d missed and went through half of the <a href=\"http://elixir-lang.org/getting-started/introduction.html\" target=\"_blank\" rel=\"external\">Getting Started With Elixir</a> tutorial. Not too shabby!</p>\n<p>But now, back to the real world! Next post I’ll be back to actual content again, I swear!</p>","excerpt":"<p>It’s been while since my last activity here. The reason is I’ve been out visiting my parents across the English Channel, hiking with my girlfriend in German-speaking Belgium, and then I topped it all off with a long weekend trip with friends in the sunny south of Spain.</p>\n<p>It was my original intention to keep working and posting while abroad, but while there I ended up deciding against it, partly due to just being too tired at the end of every day, and partly to give my mind a rest from JS on my time away from the PC – though I did lug around a Chromebook with SSH access to a dev server everywhere I went.</p>\n<p>So I’ve not been coding much for over two weeks now and I feel a little rusty. After I submit this post, I will gather my thoughts and once again attack my now neglected to-do list. Said list will need a few more tasks added first though, because I discovered that travel-time abroad, while not good for doing actual sit-down work, is actually great for other things important to a budding coder.</p>","more":"<p>Traveling is great, but often there is a lot of dead time. Sitting in airplanes, trains and buses, waiting for flights and rides, waiting for travel-mates to all take a shower before heading out to town.. You can’t use that time for doing real work, but you <em>can</em> listen to podcasts or catch up on articles, so that’s what I did. A lot of.</p>\n<p>What I’m saying is that even with the best of intentions, trying to solve complex problems while on holiday is probably a big mistake. Dead travel time is unpredictable, variable in length and often occurs in loud, distracting environments, while any programmer knows that the <em>coding zone</em> is not something one just snaps in and out of at will.</p>\n<p>Perhaps I’m just stating the obvious here, but to me it was a revelation. I was worried before I left that I would spend over two weeks doing nothing, so promised myself I’d work. But when I tried to use dead time for work, it turned out to be more of an exercise in frustration. When I switched to podcasts and articles instead, everything clicked again. My dead time was useful. I moved through my huge backlog of articles and tutorials and I caught up on my podcast playlist.</p>\n<p>Conclusion: if you’re on holiday and feel like you should be doing <em>something</em> useful during the dead parts of the day, but struggle with getting into the zone, open your bookmarks or your podcast app instead! As for me, I may not have solved any problems or contributed to open source in the ~16 days I’ve been gone, but hey, all that dead time adds up so I’ve used it to read dozens of articles I feared I would never get to, caught up on <a href=\"https://devchat.tv/js-jabber\">JS-Jabber</a> and <a href=\"https://changelog.com\">The Changelog</a> episodes I’d missed and went through half of the <a href=\"http://elixir-lang.org/getting-started/introduction.html\">Getting Started With Elixir</a> tutorial. Not too shabby!</p>\n<p>But now, back to the real world! Next post I’ll be back to actual content again, I swear!</p>"},{"title":"awman / arch-wiki-man: man the Arch Wiki offline","date":"2016-02-04T17:19:56.000Z","_content":"\n**Note**: Kyle from [kmkeen.com](http://kmkeen.com) pointed me to an existing project which solves the same problem this project was trying to solve. It's super fast and Python-based, [check it out](http://kmkeen.com/arch-wiki-lite/). Read on to read about `arch-wiki-man` if you prefer a Node-based solution or want a somewhat fancier menu.\n\n{% raw %}\n<hr />\n{% endraw %}\n\nI got round to finishing my [command-line Arch Wiki reader](https://www.npmjs.com/package/arch-wiki-man) the other day. Basically, it comes with a dependency on my [`arch-wiki-md-repo`](https://www.npmjs.com/package/arch-wiki-md-repo), which gives you a local (frequently and automatically updated) copy of the entire (English) Arch Wiki in markdown format. It also gives you an `awman` command (as in `arch-wiki-man`) to `man` or `apropos` the wiki. This works by querying a local database and then converting markdown to [troff](https://en.wikipedia.org/wiki/Troff) on the fly, saving it to a temporary file and spawning a `man` process to open it.\n\n{% asset_img helpscreen.png image title %}\n\nI personally find it useful to quickly consult the Arch Wiki without having to head to my browser, but another good use case might be if you think you won't have internet access later but know you will probably want to check the wiki. But mostly, I just made it for learning purposes and because I really wanted this for myself and the existing solutions didn't work for me at all.\n\n<!-- more -->\n\n## Install\n\nMake sure you have Node and npm and install my package globally:\n\n{% codeblock lang:bash %}\nnpm install -g arch-wiki-man\n{% endcodeblock %}\n\nIt will take a minute or two because of the rather meaty ([but freaking fantastic](https://github.com/wooorm/remark)) markdown parser it comes bundled with.\n\n## Use\n\nDo an `awman --help` or `awman -h` to get some quick help. Basically, feed it one or more search terms and it will query the local database for matches in the title. Use the `-d` or `--desc-search` option for searching in descriptions and the `-k` or `--apropos` option for searching in the entire contents (which makes the search run slower).\n\nIf just one article matches your search, it gets converted into `troff`, saved to a temporary file and opened with `man`.\n\n{% asset_img manscreen.png man screenshot %}\n\nAnd if multiple articles match, you get a little selection screen:\n\n{% asset_img menu.png Menu screenshot %}\n\nWhen inside the `man` page, press `h` to get help on key bindings but the most important ones are: `j` for one line down, `k` for one line up, `d` for half a page down, `u` for half a page up, `/` for search, `n` for next, `N` for previous and `q` for quit. Oh, and to exit the menu without selecting anything, just do a `ctrl+c`.\n\n## Update\n\nI maintain an npm module with the latest updates to the wiki and push updates every two days. Using semantic versioning, I set it up so `arch-wiki-man` fetches the last version whenever you reinstall the package. This means the easiest way to get the last updates to the wiki into your local copy is:\n\n{% codeblock lang:bash %}\nnpm install -g arch-wiki-man\n{% endcodeblock %}\n\n\nThere we go, I hope it proves useful to someone out there who isn't me! If you like it, star it [on GitHub](https://github.com/greg-js/arch-wiki-man) and if it doesn't work for you, make a pull request or file an issue! Or just send me some hate mail <3\n","source":"_posts/awman-arch-wiki-man-man-the-arch-wiki-offline.md","raw":"title: \"awman / arch-wiki-man: man the Arch Wiki offline\"\ndate: 2016-02-04 17:19:56\ncategories: javascript\ntags:\n- open source\n- js\n- npm\n---\n\n**Note**: Kyle from [kmkeen.com](http://kmkeen.com) pointed me to an existing project which solves the same problem this project was trying to solve. It's super fast and Python-based, [check it out](http://kmkeen.com/arch-wiki-lite/). Read on to read about `arch-wiki-man` if you prefer a Node-based solution or want a somewhat fancier menu.\n\n{% raw %}\n<hr />\n{% endraw %}\n\nI got round to finishing my [command-line Arch Wiki reader](https://www.npmjs.com/package/arch-wiki-man) the other day. Basically, it comes with a dependency on my [`arch-wiki-md-repo`](https://www.npmjs.com/package/arch-wiki-md-repo), which gives you a local (frequently and automatically updated) copy of the entire (English) Arch Wiki in markdown format. It also gives you an `awman` command (as in `arch-wiki-man`) to `man` or `apropos` the wiki. This works by querying a local database and then converting markdown to [troff](https://en.wikipedia.org/wiki/Troff) on the fly, saving it to a temporary file and spawning a `man` process to open it.\n\n{% asset_img helpscreen.png image title %}\n\nI personally find it useful to quickly consult the Arch Wiki without having to head to my browser, but another good use case might be if you think you won't have internet access later but know you will probably want to check the wiki. But mostly, I just made it for learning purposes and because I really wanted this for myself and the existing solutions didn't work for me at all.\n\n<!-- more -->\n\n## Install\n\nMake sure you have Node and npm and install my package globally:\n\n{% codeblock lang:bash %}\nnpm install -g arch-wiki-man\n{% endcodeblock %}\n\nIt will take a minute or two because of the rather meaty ([but freaking fantastic](https://github.com/wooorm/remark)) markdown parser it comes bundled with.\n\n## Use\n\nDo an `awman --help` or `awman -h` to get some quick help. Basically, feed it one or more search terms and it will query the local database for matches in the title. Use the `-d` or `--desc-search` option for searching in descriptions and the `-k` or `--apropos` option for searching in the entire contents (which makes the search run slower).\n\nIf just one article matches your search, it gets converted into `troff`, saved to a temporary file and opened with `man`.\n\n{% asset_img manscreen.png man screenshot %}\n\nAnd if multiple articles match, you get a little selection screen:\n\n{% asset_img menu.png Menu screenshot %}\n\nWhen inside the `man` page, press `h` to get help on key bindings but the most important ones are: `j` for one line down, `k` for one line up, `d` for half a page down, `u` for half a page up, `/` for search, `n` for next, `N` for previous and `q` for quit. Oh, and to exit the menu without selecting anything, just do a `ctrl+c`.\n\n## Update\n\nI maintain an npm module with the latest updates to the wiki and push updates every two days. Using semantic versioning, I set it up so `arch-wiki-man` fetches the last version whenever you reinstall the package. This means the easiest way to get the last updates to the wiki into your local copy is:\n\n{% codeblock lang:bash %}\nnpm install -g arch-wiki-man\n{% endcodeblock %}\n\n\nThere we go, I hope it proves useful to someone out there who isn't me! If you like it, star it [on GitHub](https://github.com/greg-js/arch-wiki-man) and if it doesn't work for you, make a pull request or file an issue! Or just send me some hate mail <3\n","slug":"awman-arch-wiki-man-man-the-arch-wiki-offline","published":1,"updated":"2016-04-30T12:47:15.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk1w000cknz90myt7vjj","content":"<p><strong>Note</strong>: Kyle from <a href=\"http://kmkeen.com\" target=\"_blank\" rel=\"external\">kmkeen.com</a> pointed me to an existing project which solves the same problem this project was trying to solve. It’s super fast and Python-based, <a href=\"http://kmkeen.com/arch-wiki-lite/\" target=\"_blank\" rel=\"external\">check it out</a>. Read on to read about <code>arch-wiki-man</code> if you prefer a Node-based solution or want a somewhat fancier menu.</p>\n\n<hr>\n\n<p>I got round to finishing my <a href=\"https://www.npmjs.com/package/arch-wiki-man\" target=\"_blank\" rel=\"external\">command-line Arch Wiki reader</a> the other day. Basically, it comes with a dependency on my <a href=\"https://www.npmjs.com/package/arch-wiki-md-repo\" target=\"_blank\" rel=\"external\"><code>arch-wiki-md-repo</code></a>, which gives you a local (frequently and automatically updated) copy of the entire (English) Arch Wiki in markdown format. It also gives you an <code>awman</code> command (as in <code>arch-wiki-man</code>) to <code>man</code> or <code>apropos</code> the wiki. This works by querying a local database and then converting markdown to <a href=\"https://en.wikipedia.org/wiki/Troff\" target=\"_blank\" rel=\"external\">troff</a> on the fly, saving it to a temporary file and spawning a <code>man</code> process to open it.</p>\n<img src=\"/javascript/2016/awman-arch-wiki-man-man-the-arch-wiki-offline/helpscreen.png\" alt=\"image title\" title=\"image title\">\n<p>I personally find it useful to quickly consult the Arch Wiki without having to head to my browser, but another good use case might be if you think you won’t have internet access later but know you will probably want to check the wiki. But mostly, I just made it for learning purposes and because I really wanted this for myself and the existing solutions didn’t work for me at all.</p>\n<a id=\"more\"></a>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><p>Make sure you have Node and npm and install my package globally:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g arch-wiki-man</div></pre></td></tr></table></figure>\n<p>It will take a minute or two because of the rather meaty (<a href=\"https://github.com/wooorm/remark\" target=\"_blank\" rel=\"external\">but freaking fantastic</a>) markdown parser it comes bundled with.</p>\n<h2 id=\"Use\"><a href=\"#Use\" class=\"headerlink\" title=\"Use\"></a>Use</h2><p>Do an <code>awman --help</code> or <code>awman -h</code> to get some quick help. Basically, feed it one or more search terms and it will query the local database for matches in the title. Use the <code>-d</code> or <code>--desc-search</code> option for searching in descriptions and the <code>-k</code> or <code>--apropos</code> option for searching in the entire contents (which makes the search run slower).</p>\n<p>If just one article matches your search, it gets converted into <code>troff</code>, saved to a temporary file and opened with <code>man</code>.</p>\n<img src=\"/javascript/2016/awman-arch-wiki-man-man-the-arch-wiki-offline/manscreen.png\" alt=\"man screenshot\" title=\"man screenshot\">\n<p>And if multiple articles match, you get a little selection screen:</p>\n<img src=\"/javascript/2016/awman-arch-wiki-man-man-the-arch-wiki-offline/menu.png\" alt=\"Menu screenshot\" title=\"Menu screenshot\">\n<p>When inside the <code>man</code> page, press <code>h</code> to get help on key bindings but the most important ones are: <code>j</code> for one line down, <code>k</code> for one line up, <code>d</code> for half a page down, <code>u</code> for half a page up, <code>/</code> for search, <code>n</code> for next, <code>N</code> for previous and <code>q</code> for quit. Oh, and to exit the menu without selecting anything, just do a <code>ctrl+c</code>.</p>\n<h2 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h2><p>I maintain an npm module with the latest updates to the wiki and push updates every two days. Using semantic versioning, I set it up so <code>arch-wiki-man</code> fetches the last version whenever you reinstall the package. This means the easiest way to get the last updates to the wiki into your local copy is:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g arch-wiki-man</div></pre></td></tr></table></figure>\n<p>There we go, I hope it proves useful to someone out there who isn’t me! If you like it, star it <a href=\"https://github.com/greg-js/arch-wiki-man\" target=\"_blank\" rel=\"external\">on GitHub</a> and if it doesn’t work for you, make a pull request or file an issue! Or just send me some hate mail &lt;3</p>","excerpt":"<p><strong>Note</strong>: Kyle from <a href=\"http://kmkeen.com\">kmkeen.com</a> pointed me to an existing project which solves the same problem this project was trying to solve. It’s super fast and Python-based, <a href=\"http://kmkeen.com/arch-wiki-lite/\">check it out</a>. Read on to read about <code>arch-wiki-man</code> if you prefer a Node-based solution or want a somewhat fancier menu.</p>\n\n<hr>\n\n<p>I got round to finishing my <a href=\"https://www.npmjs.com/package/arch-wiki-man\">command-line Arch Wiki reader</a> the other day. Basically, it comes with a dependency on my <a href=\"https://www.npmjs.com/package/arch-wiki-md-repo\"><code>arch-wiki-md-repo</code></a>, which gives you a local (frequently and automatically updated) copy of the entire (English) Arch Wiki in markdown format. It also gives you an <code>awman</code> command (as in <code>arch-wiki-man</code>) to <code>man</code> or <code>apropos</code> the wiki. This works by querying a local database and then converting markdown to <a href=\"https://en.wikipedia.org/wiki/Troff\">troff</a> on the fly, saving it to a temporary file and spawning a <code>man</code> process to open it.</p>\n<img src=\"/javascript/2016/awman-arch-wiki-man-man-the-arch-wiki-offline/helpscreen.png\" alt=\"image title\" title=\"image title\">\n<p>I personally find it useful to quickly consult the Arch Wiki without having to head to my browser, but another good use case might be if you think you won’t have internet access later but know you will probably want to check the wiki. But mostly, I just made it for learning purposes and because I really wanted this for myself and the existing solutions didn’t work for me at all.</p>","more":"<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><p>Make sure you have Node and npm and install my package globally:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g arch-wiki-man</div></pre></td></tr></table></figure>\n<p>It will take a minute or two because of the rather meaty (<a href=\"https://github.com/wooorm/remark\">but freaking fantastic</a>) markdown parser it comes bundled with.</p>\n<h2 id=\"Use\"><a href=\"#Use\" class=\"headerlink\" title=\"Use\"></a>Use</h2><p>Do an <code>awman --help</code> or <code>awman -h</code> to get some quick help. Basically, feed it one or more search terms and it will query the local database for matches in the title. Use the <code>-d</code> or <code>--desc-search</code> option for searching in descriptions and the <code>-k</code> or <code>--apropos</code> option for searching in the entire contents (which makes the search run slower).</p>\n<p>If just one article matches your search, it gets converted into <code>troff</code>, saved to a temporary file and opened with <code>man</code>.</p>\n<img src=\"/javascript/2016/awman-arch-wiki-man-man-the-arch-wiki-offline/manscreen.png\" alt=\"man screenshot\" title=\"man screenshot\">\n<p>And if multiple articles match, you get a little selection screen:</p>\n<img src=\"/javascript/2016/awman-arch-wiki-man-man-the-arch-wiki-offline/menu.png\" alt=\"Menu screenshot\" title=\"Menu screenshot\">\n<p>When inside the <code>man</code> page, press <code>h</code> to get help on key bindings but the most important ones are: <code>j</code> for one line down, <code>k</code> for one line up, <code>d</code> for half a page down, <code>u</code> for half a page up, <code>/</code> for search, <code>n</code> for next, <code>N</code> for previous and <code>q</code> for quit. Oh, and to exit the menu without selecting anything, just do a <code>ctrl+c</code>.</p>\n<h2 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h2><p>I maintain an npm module with the latest updates to the wiki and push updates every two days. Using semantic versioning, I set it up so <code>arch-wiki-man</code> fetches the last version whenever you reinstall the package. This means the easiest way to get the last updates to the wiki into your local copy is:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g arch-wiki-man</div></pre></td></tr></table></figure>\n<p>There we go, I hope it proves useful to someone out there who isn’t me! If you like it, star it <a href=\"https://github.com/greg-js/arch-wiki-man\">on GitHub</a> and if it doesn’t work for you, make a pull request or file an issue! Or just send me some hate mail &lt;3</p>"},{"title":"Command-line mdn, or how to make a great thing even greater","date":"2016-04-01T12:40:00.000Z","_content":"\nHow do you make a fantastic online collaborative resource website even better than it already is? Right! You write a command-line interface for it!\n\nI had been toying with the idea of writing a CLI for everyone's favorite webdev reference site, [MDN](https://developer.mozilla.org/en-US/docs/Web), but never really got round to it. A few days ago, I set out to finally write the thing, but after doing a little bit of work on it, I did what smart people do and searched more thoroughly for existing projects on GitHub.\n\nAnd what do you know, an awesome dev called Rafael Rinaldi had **just** published his own command-line `mdn` tool. Not only that, but his approach was better than mine too! I was thinking more of using `man` to page through the entire contents of a given article, but Rafael's idea to print just the first paragraph of the description along with the API and a link is much better.\n\n{% asset_img example.gif mdn example %}\n\nBesides JavaScript, it also supports searching for CSS definitions and I submitted a few pull requests to add an `-o` option to open the relevant page in your local browser as well as some general formatting fixes.\n\nAnyway, Rafael's `mdn` tool is awesome and it's become an integral part of my workflow already - I mean, come on, with all this new JS stuff coming out every minute, who has time to read stuff in a browser anymore! If you like both MDN and the command-line (and if you're reading this, then you probably do), I highly recommend you use his tool and of course contribute if you can!\n","source":"_posts/command-line-mdn-or-how-to-make-a-great-thing-even-greater.md","raw":"title: \"Command-line mdn, or how to make a great thing even greater\"\ndate: 2016-04-01 13:40:00\ncategories: linux\ntags:\n- js\n- node\n- open source\n- mdn\n---\n\nHow do you make a fantastic online collaborative resource website even better than it already is? Right! You write a command-line interface for it!\n\nI had been toying with the idea of writing a CLI for everyone's favorite webdev reference site, [MDN](https://developer.mozilla.org/en-US/docs/Web), but never really got round to it. A few days ago, I set out to finally write the thing, but after doing a little bit of work on it, I did what smart people do and searched more thoroughly for existing projects on GitHub.\n\nAnd what do you know, an awesome dev called Rafael Rinaldi had **just** published his own command-line `mdn` tool. Not only that, but his approach was better than mine too! I was thinking more of using `man` to page through the entire contents of a given article, but Rafael's idea to print just the first paragraph of the description along with the API and a link is much better.\n\n{% asset_img example.gif mdn example %}\n\nBesides JavaScript, it also supports searching for CSS definitions and I submitted a few pull requests to add an `-o` option to open the relevant page in your local browser as well as some general formatting fixes.\n\nAnyway, Rafael's `mdn` tool is awesome and it's become an integral part of my workflow already - I mean, come on, with all this new JS stuff coming out every minute, who has time to read stuff in a browser anymore! If you like both MDN and the command-line (and if you're reading this, then you probably do), I highly recommend you use his tool and of course contribute if you can!\n","slug":"command-line-mdn-or-how-to-make-a-great-thing-even-greater","published":1,"updated":"2016-04-01T13:14:42.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk1y000eknz9iafg6qyn","content":"<p>How do you make a fantastic online collaborative resource website even better than it already is? Right! You write a command-line interface for it!</p>\n<p>I had been toying with the idea of writing a CLI for everyone’s favorite webdev reference site, <a href=\"https://developer.mozilla.org/en-US/docs/Web\" target=\"_blank\" rel=\"external\">MDN</a>, but never really got round to it. A few days ago, I set out to finally write the thing, but after doing a little bit of work on it, I did what smart people do and searched more thoroughly for existing projects on GitHub.</p>\n<p>And what do you know, an awesome dev called Rafael Rinaldi had <strong>just</strong> published his own command-line <code>mdn</code> tool. Not only that, but his approach was better than mine too! I was thinking more of using <code>man</code> to page through the entire contents of a given article, but Rafael’s idea to print just the first paragraph of the description along with the API and a link is much better.</p>\n<img src=\"/linux/2016/command-line-mdn-or-how-to-make-a-great-thing-even-greater/example.gif\" alt=\"mdn example\" title=\"mdn example\">\n<p>Besides JavaScript, it also supports searching for CSS definitions and I submitted a few pull requests to add an <code>-o</code> option to open the relevant page in your local browser as well as some general formatting fixes.</p>\n<p>Anyway, Rafael’s <code>mdn</code> tool is awesome and it’s become an integral part of my workflow already - I mean, come on, with all this new JS stuff coming out every minute, who has time to read stuff in a browser anymore! If you like both MDN and the command-line (and if you’re reading this, then you probably do), I highly recommend you use his tool and of course contribute if you can!</p>","excerpt":"","more":"<p>How do you make a fantastic online collaborative resource website even better than it already is? Right! You write a command-line interface for it!</p>\n<p>I had been toying with the idea of writing a CLI for everyone’s favorite webdev reference site, <a href=\"https://developer.mozilla.org/en-US/docs/Web\">MDN</a>, but never really got round to it. A few days ago, I set out to finally write the thing, but after doing a little bit of work on it, I did what smart people do and searched more thoroughly for existing projects on GitHub.</p>\n<p>And what do you know, an awesome dev called Rafael Rinaldi had <strong>just</strong> published his own command-line <code>mdn</code> tool. Not only that, but his approach was better than mine too! I was thinking more of using <code>man</code> to page through the entire contents of a given article, but Rafael’s idea to print just the first paragraph of the description along with the API and a link is much better.</p>\n<img src=\"/linux/2016/command-line-mdn-or-how-to-make-a-great-thing-even-greater/example.gif\" alt=\"mdn example\" title=\"mdn example\">\n<p>Besides JavaScript, it also supports searching for CSS definitions and I submitted a few pull requests to add an <code>-o</code> option to open the relevant page in your local browser as well as some general formatting fixes.</p>\n<p>Anyway, Rafael’s <code>mdn</code> tool is awesome and it’s become an integral part of my workflow already - I mean, come on, with all this new JS stuff coming out every minute, who has time to read stuff in a browser anymore! If you like both MDN and the command-line (and if you’re reading this, then you probably do), I highly recommend you use his tool and of course contribute if you can!</p>"},{"title":"Checking whether a file/directory exists without using fs.exists","date":"2016-03-17T18:06:52.000Z","_content":"\nAnyone who has spent any time writing Node has most likely used the [file system module](https://nodejs.org/api/fs.html). One of the methods in this core module though is not only different from all the others, but according to most experts is not even useful at all, despite its popularity with a host of other developers. Because of this, the method has been deprecated for years now. I talk, of course, about [fs.exists](https://nodejs.org/api/fs.html#fs_fs_exists_path_callback) (and [fs.existsSync](https://nodejs.org/api/fs.html#fs_fs_existssync_path)).\n\nFor some people, it's a very contentious issue - see for example [this issue thread](https://github.com/nodejs/node/issues/1592) or [this one](https://github.com/nodejs/node/issues/103). The reason for its deprecation (**way** back in the iojs days of yore) is that, unlike all other file system methods, it doesn't use the canonical nodeback API. Furthermore, its main use case scenario, checking whether a file exists before opening, is actually an antipattern and should be replaced by just trying to open the file and possibly handling the error.\n\n{% asset_img nodejs-new-pantone-black.png node logo %}\n\nBut despite its long-standing (in JS terms at least) deprecation, tons of people still continue to use `fs.exists`, and some newcomers or relative newcomers are surely confused about what to use instead. At least, I myself was when I first ran into this issue.\n\nWhile I agree that the method is often superfluous, and sometimes entirely pointless (checking whether a file exists before doing something with that file is not helpful when race conditions may occur and the file may be deleted in the interim), I and I am sure many others would argue that there **are** legitimate use cases for this method, or at least for what this method *should* have been, had it been designed better.\n\nSo if you are looking for a replacement for `fs.exists(Sync)`, read on, for what follows is a short discussion of how to check whether a file or directory exists without using this deprecated method.\n\n<!-- more -->\n\n## Synchronous exists\n\nFar be it from me to recommend synchronously manipulating the file system, but hey, it *is* more straightforward so let's start with the easy stuff here.\n\nThe official `fs` documentation recommends using [fs.statSync](https://nodejs.org/api/fs.html#fs_fs_statsync_path) or [fs.accessSync](https://nodejs.org/api/fs.html#fs_fs_accesssync_path_mode) instead, so let's go over both.\n\n### fs.accessSync\n\nThis method checks the accessibility of a file and nothing more or less. It throws an error if the file is not accessible and does absolutely nothing if it is.\n\nSo, let's say you want to check for the existence of `myDir`, representing the directory `/path/to/myDir`, before attempting to create it:\n\n{% codeblock lang:javascript %}\ntry {\n  fs.accessSync(myDir);\n} catch (e) {\n  fs.mkdirSync(myDir);\n}\n{% endcodeblock %}\n\nOr, if you prefer to recreate `fs.existsSync` instead:\n\n{% codeblock lang:javascript %}\nfunction fsExistsSync(myDir) {\n  try {\n    fs.accessSync(myDir);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nif (!fsExists(myDir)) {\n  fs.mkdirSync(myDir);\n}\n{% endcodeblock %}\n\n### fs.statSync\n\nThe code above has a problem: what if `myDir` exists, but is not a directory but a file which happens to have the same name? In that case, the path would be accessible, but it wouldn't be a folder, and you might end up screaming at your monitor during a nasty debugging session later on when other things start to fail because of that.\n\nThe solution is to use `fs.statSync` and the `isDirectory` or `isFile` method on the returned `stats` variable. Here's a synchronous function that checks for whether a given path exists **and** is a directory:\n\n{% codeblock lang:javascript %}\nfunction isDirSync(aPath) {\n  try {\n    return fs.statSync(aPath).isDirectory();\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      return false;\n    } else {\n      throw e;\n    }\n  }\n}\n\nif (!isDirSync(myDir)) {\n  fs.mkdirSync(myDir);\n}\n{% endcodeblock %}\n\n`isDirSync` will return `true` if the given path exists and is a directory, and `false` in all other cases. Note that it also throws the error in case a different error is encountered. This is actually not necessary because as far as I know, there really are no other possible errors, but hey, you never know!\n\nThe `ENOENT` error code is what you get when `fs.statSync` throws a `no such file or directory` error. You need to check for this because unlike what you may expect, checking the stats of an non-existing path will **not** give you an empty `stats` object, but rather it will cause the function to fail and throw that error.\n\nYou might also sometimes see people check for the error *number* rather than the error *code*. You're probably better off not doing that because the numbers may be different based on the version of Node you're running and/or the operating system you're running it on.\n\n## Asynchronous exists\n\nIn async world (AKA the real world for us Node people), your alternatives to `fs.exists` are `fs.access` or `fs.stat`. Here we go.\n\n### fs.access\n\nAs per the nodeback API, the first (and in this case only) parameter of `fs.access` is an error object. Let's again check whether a directory already exists before making it:\n\n{% codeblock lang:javascript %}\nfs.access(myDir, function(err) {\n  if (err && err.code === 'ENOENT') {\n    fs.mkdir(myDir);\n  }\n});\n{% endcodeblock %}\n\nNote that I combined checking for the error and the code. An alternative to this particular solution would have been to try to make the dir with `fs.mkdir` first, and then check for an `EEXIST` error code which would have been thrown if the directory was already there.\n\n### fs.stat\n\nAnd of course we can also check for a path's stats and decide what to do based on the results. For example, let's make an asynchronous `checkFile` function, which returns true only if the given path exists and is a file, and false in all other cases:\n\n{% codeblock lang:javascript %}\nfunction checkIfFile(file, cb) {\n  fs.stat(file, function fsStat(err, stats) {\n    if (err) {\n      if (err.code === 'ENOENT') {\n        return cb(null, false);\n      } else {\n        return cb(err);\n      }\n    }\n    return cb(null, stats.isFile());\n  });\n}\n\ncheckIfFile(aPath, function(err, isFile) {\n  if (isFile) {\n    // handle the file\n  }\n});\n{% endcodeblock %}\n\nOr, using promises:\n\n{% codeblock lang:javascript %}\nfunction checkIfFile(file) {\n  return new Promise(function(resolve, reject) {\n    return fsStat(file).then(function(stats) {\n      resolve(stats.isFile());\n    }).catch(function(err) {\n      if (err.code === 'ENOENT') {\n        resolve(false);\n      } else {\n        reject(err);\n      }\n    });\n  });\n}\n\ncheckIfFile(aPath).then(function(isFile) {\n  if (isFile) {\n    // handle the file\n  }\n}).catch(function(e) { throw e; });\n{% endcodeblock %}\n\nThe point of all this is not to get hung up on the details of making a perfect replacement for `fs.exists`, but rather to show that you can accomplish the goals you would have used `exists` for with better, non-deprecated methods.\n\n## But I really want fs.exists!!!\n\nIf you want it, you can keep using it! Just write your own replacement or require/import one of the many user-created packages that have it. [Here's a good one](https://github.com/sindresorhus/path-exists), but feel free to take your pick!\n","source":"_posts/checking-whether-a-file-directory-exists-without-using-fs-exists.md","raw":"title: \"Checking whether a file/directory exists without using fs.exists\"\ndate: 2016-03-17 18:06:52\ncategories: javascript\ntags:\n- js\n- node\n- fs\n- async\n---\n\nAnyone who has spent any time writing Node has most likely used the [file system module](https://nodejs.org/api/fs.html). One of the methods in this core module though is not only different from all the others, but according to most experts is not even useful at all, despite its popularity with a host of other developers. Because of this, the method has been deprecated for years now. I talk, of course, about [fs.exists](https://nodejs.org/api/fs.html#fs_fs_exists_path_callback) (and [fs.existsSync](https://nodejs.org/api/fs.html#fs_fs_existssync_path)).\n\nFor some people, it's a very contentious issue - see for example [this issue thread](https://github.com/nodejs/node/issues/1592) or [this one](https://github.com/nodejs/node/issues/103). The reason for its deprecation (**way** back in the iojs days of yore) is that, unlike all other file system methods, it doesn't use the canonical nodeback API. Furthermore, its main use case scenario, checking whether a file exists before opening, is actually an antipattern and should be replaced by just trying to open the file and possibly handling the error.\n\n{% asset_img nodejs-new-pantone-black.png node logo %}\n\nBut despite its long-standing (in JS terms at least) deprecation, tons of people still continue to use `fs.exists`, and some newcomers or relative newcomers are surely confused about what to use instead. At least, I myself was when I first ran into this issue.\n\nWhile I agree that the method is often superfluous, and sometimes entirely pointless (checking whether a file exists before doing something with that file is not helpful when race conditions may occur and the file may be deleted in the interim), I and I am sure many others would argue that there **are** legitimate use cases for this method, or at least for what this method *should* have been, had it been designed better.\n\nSo if you are looking for a replacement for `fs.exists(Sync)`, read on, for what follows is a short discussion of how to check whether a file or directory exists without using this deprecated method.\n\n<!-- more -->\n\n## Synchronous exists\n\nFar be it from me to recommend synchronously manipulating the file system, but hey, it *is* more straightforward so let's start with the easy stuff here.\n\nThe official `fs` documentation recommends using [fs.statSync](https://nodejs.org/api/fs.html#fs_fs_statsync_path) or [fs.accessSync](https://nodejs.org/api/fs.html#fs_fs_accesssync_path_mode) instead, so let's go over both.\n\n### fs.accessSync\n\nThis method checks the accessibility of a file and nothing more or less. It throws an error if the file is not accessible and does absolutely nothing if it is.\n\nSo, let's say you want to check for the existence of `myDir`, representing the directory `/path/to/myDir`, before attempting to create it:\n\n{% codeblock lang:javascript %}\ntry {\n  fs.accessSync(myDir);\n} catch (e) {\n  fs.mkdirSync(myDir);\n}\n{% endcodeblock %}\n\nOr, if you prefer to recreate `fs.existsSync` instead:\n\n{% codeblock lang:javascript %}\nfunction fsExistsSync(myDir) {\n  try {\n    fs.accessSync(myDir);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nif (!fsExists(myDir)) {\n  fs.mkdirSync(myDir);\n}\n{% endcodeblock %}\n\n### fs.statSync\n\nThe code above has a problem: what if `myDir` exists, but is not a directory but a file which happens to have the same name? In that case, the path would be accessible, but it wouldn't be a folder, and you might end up screaming at your monitor during a nasty debugging session later on when other things start to fail because of that.\n\nThe solution is to use `fs.statSync` and the `isDirectory` or `isFile` method on the returned `stats` variable. Here's a synchronous function that checks for whether a given path exists **and** is a directory:\n\n{% codeblock lang:javascript %}\nfunction isDirSync(aPath) {\n  try {\n    return fs.statSync(aPath).isDirectory();\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      return false;\n    } else {\n      throw e;\n    }\n  }\n}\n\nif (!isDirSync(myDir)) {\n  fs.mkdirSync(myDir);\n}\n{% endcodeblock %}\n\n`isDirSync` will return `true` if the given path exists and is a directory, and `false` in all other cases. Note that it also throws the error in case a different error is encountered. This is actually not necessary because as far as I know, there really are no other possible errors, but hey, you never know!\n\nThe `ENOENT` error code is what you get when `fs.statSync` throws a `no such file or directory` error. You need to check for this because unlike what you may expect, checking the stats of an non-existing path will **not** give you an empty `stats` object, but rather it will cause the function to fail and throw that error.\n\nYou might also sometimes see people check for the error *number* rather than the error *code*. You're probably better off not doing that because the numbers may be different based on the version of Node you're running and/or the operating system you're running it on.\n\n## Asynchronous exists\n\nIn async world (AKA the real world for us Node people), your alternatives to `fs.exists` are `fs.access` or `fs.stat`. Here we go.\n\n### fs.access\n\nAs per the nodeback API, the first (and in this case only) parameter of `fs.access` is an error object. Let's again check whether a directory already exists before making it:\n\n{% codeblock lang:javascript %}\nfs.access(myDir, function(err) {\n  if (err && err.code === 'ENOENT') {\n    fs.mkdir(myDir);\n  }\n});\n{% endcodeblock %}\n\nNote that I combined checking for the error and the code. An alternative to this particular solution would have been to try to make the dir with `fs.mkdir` first, and then check for an `EEXIST` error code which would have been thrown if the directory was already there.\n\n### fs.stat\n\nAnd of course we can also check for a path's stats and decide what to do based on the results. For example, let's make an asynchronous `checkFile` function, which returns true only if the given path exists and is a file, and false in all other cases:\n\n{% codeblock lang:javascript %}\nfunction checkIfFile(file, cb) {\n  fs.stat(file, function fsStat(err, stats) {\n    if (err) {\n      if (err.code === 'ENOENT') {\n        return cb(null, false);\n      } else {\n        return cb(err);\n      }\n    }\n    return cb(null, stats.isFile());\n  });\n}\n\ncheckIfFile(aPath, function(err, isFile) {\n  if (isFile) {\n    // handle the file\n  }\n});\n{% endcodeblock %}\n\nOr, using promises:\n\n{% codeblock lang:javascript %}\nfunction checkIfFile(file) {\n  return new Promise(function(resolve, reject) {\n    return fsStat(file).then(function(stats) {\n      resolve(stats.isFile());\n    }).catch(function(err) {\n      if (err.code === 'ENOENT') {\n        resolve(false);\n      } else {\n        reject(err);\n      }\n    });\n  });\n}\n\ncheckIfFile(aPath).then(function(isFile) {\n  if (isFile) {\n    // handle the file\n  }\n}).catch(function(e) { throw e; });\n{% endcodeblock %}\n\nThe point of all this is not to get hung up on the details of making a perfect replacement for `fs.exists`, but rather to show that you can accomplish the goals you would have used `exists` for with better, non-deprecated methods.\n\n## But I really want fs.exists!!!\n\nIf you want it, you can keep using it! Just write your own replacement or require/import one of the many user-created packages that have it. [Here's a good one](https://github.com/sindresorhus/path-exists), but feel free to take your pick!\n","slug":"checking-whether-a-file-directory-exists-without-using-fs-exists","published":1,"updated":"2016-03-18T14:31:36.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk23000iknz9fwdx8x2t","content":"<p>Anyone who has spent any time writing Node has most likely used the <a href=\"https://nodejs.org/api/fs.html\" target=\"_blank\" rel=\"external\">file system module</a>. One of the methods in this core module though is not only different from all the others, but according to most experts is not even useful at all, despite its popularity with a host of other developers. Because of this, the method has been deprecated for years now. I talk, of course, about <a href=\"https://nodejs.org/api/fs.html#fs_fs_exists_path_callback\" target=\"_blank\" rel=\"external\">fs.exists</a> (and <a href=\"https://nodejs.org/api/fs.html#fs_fs_existssync_path\" target=\"_blank\" rel=\"external\">fs.existsSync</a>).</p>\n<p>For some people, it’s a very contentious issue - see for example <a href=\"https://github.com/nodejs/node/issues/1592\" target=\"_blank\" rel=\"external\">this issue thread</a> or <a href=\"https://github.com/nodejs/node/issues/103\" target=\"_blank\" rel=\"external\">this one</a>. The reason for its deprecation (<strong>way</strong> back in the iojs days of yore) is that, unlike all other file system methods, it doesn’t use the canonical nodeback API. Furthermore, its main use case scenario, checking whether a file exists before opening, is actually an antipattern and should be replaced by just trying to open the file and possibly handling the error.</p>\n<img src=\"/javascript/2016/checking-whether-a-file-directory-exists-without-using-fs-exists/nodejs-new-pantone-black.png\" alt=\"node logo\" title=\"node logo\">\n<p>But despite its long-standing (in JS terms at least) deprecation, tons of people still continue to use <code>fs.exists</code>, and some newcomers or relative newcomers are surely confused about what to use instead. At least, I myself was when I first ran into this issue.</p>\n<p>While I agree that the method is often superfluous, and sometimes entirely pointless (checking whether a file exists before doing something with that file is not helpful when race conditions may occur and the file may be deleted in the interim), I and I am sure many others would argue that there <strong>are</strong> legitimate use cases for this method, or at least for what this method <em>should</em> have been, had it been designed better.</p>\n<p>So if you are looking for a replacement for <code>fs.exists(Sync)</code>, read on, for what follows is a short discussion of how to check whether a file or directory exists without using this deprecated method.</p>\n<a id=\"more\"></a>\n<h2 id=\"Synchronous-exists\"><a href=\"#Synchronous-exists\" class=\"headerlink\" title=\"Synchronous exists\"></a>Synchronous exists</h2><p>Far be it from me to recommend synchronously manipulating the file system, but hey, it <em>is</em> more straightforward so let’s start with the easy stuff here.</p>\n<p>The official <code>fs</code> documentation recommends using <a href=\"https://nodejs.org/api/fs.html#fs_fs_statsync_path\" target=\"_blank\" rel=\"external\">fs.statSync</a> or <a href=\"https://nodejs.org/api/fs.html#fs_fs_accesssync_path_mode\" target=\"_blank\" rel=\"external\">fs.accessSync</a> instead, so let’s go over both.</p>\n<h3 id=\"fs-accessSync\"><a href=\"#fs-accessSync\" class=\"headerlink\" title=\"fs.accessSync\"></a>fs.accessSync</h3><p>This method checks the accessibility of a file and nothing more or less. It throws an error if the file is not accessible and does absolutely nothing if it is.</p>\n<p>So, let’s say you want to check for the existence of <code>myDir</code>, representing the directory <code>/path/to/myDir</code>, before attempting to create it:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  fs.accessSync(myDir);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">  fs.mkdirSync(myDir);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Or, if you prefer to recreate <code>fs.existsSync</code> instead:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fsExistsSync</span>(<span class=\"params\">myDir</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    fs.accessSync(myDir);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!fsExists(myDir)) &#123;</div><div class=\"line\">  fs.mkdirSync(myDir);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"fs-statSync\"><a href=\"#fs-statSync\" class=\"headerlink\" title=\"fs.statSync\"></a>fs.statSync</h3><p>The code above has a problem: what if <code>myDir</code> exists, but is not a directory but a file which happens to have the same name? In that case, the path would be accessible, but it wouldn’t be a folder, and you might end up screaming at your monitor during a nasty debugging session later on when other things start to fail because of that.</p>\n<p>The solution is to use <code>fs.statSync</code> and the <code>isDirectory</code> or <code>isFile</code> method on the returned <code>stats</code> variable. Here’s a synchronous function that checks for whether a given path exists <strong>and</strong> is a directory:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isDirSync</span>(<span class=\"params\">aPath</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fs.statSync(aPath).isDirectory();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (e.code === <span class=\"string\">'ENOENT'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> e;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!isDirSync(myDir)) &#123;</div><div class=\"line\">  fs.mkdirSync(myDir);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>isDirSync</code> will return <code>true</code> if the given path exists and is a directory, and <code>false</code> in all other cases. Note that it also throws the error in case a different error is encountered. This is actually not necessary because as far as I know, there really are no other possible errors, but hey, you never know!</p>\n<p>The <code>ENOENT</code> error code is what you get when <code>fs.statSync</code> throws a <code>no such file or directory</code> error. You need to check for this because unlike what you may expect, checking the stats of an non-existing path will <strong>not</strong> give you an empty <code>stats</code> object, but rather it will cause the function to fail and throw that error.</p>\n<p>You might also sometimes see people check for the error <em>number</em> rather than the error <em>code</em>. You’re probably better off not doing that because the numbers may be different based on the version of Node you’re running and/or the operating system you’re running it on.</p>\n<h2 id=\"Asynchronous-exists\"><a href=\"#Asynchronous-exists\" class=\"headerlink\" title=\"Asynchronous exists\"></a>Asynchronous exists</h2><p>In async world (AKA the real world for us Node people), your alternatives to <code>fs.exists</code> are <code>fs.access</code> or <code>fs.stat</code>. Here we go.</p>\n<h3 id=\"fs-access\"><a href=\"#fs-access\" class=\"headerlink\" title=\"fs.access\"></a>fs.access</h3><p>As per the nodeback API, the first (and in this case only) parameter of <code>fs.access</code> is an error object. Let’s again check whether a directory already exists before making it:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.access(myDir, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err &amp;&amp; err.code === <span class=\"string\">'ENOENT'</span>) &#123;</div><div class=\"line\">    fs.mkdir(myDir);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Note that I combined checking for the error and the code. An alternative to this particular solution would have been to try to make the dir with <code>fs.mkdir</code> first, and then check for an <code>EEXIST</code> error code which would have been thrown if the directory was already there.</p>\n<h3 id=\"fs-stat\"><a href=\"#fs-stat\" class=\"headerlink\" title=\"fs.stat\"></a>fs.stat</h3><p>And of course we can also check for a path’s stats and decide what to do based on the results. For example, let’s make an asynchronous <code>checkFile</code> function, which returns true only if the given path exists and is a file, and false in all other cases:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkIfFile</span>(<span class=\"params\">file, cb</span>) </span>&#123;</div><div class=\"line\">  fs.stat(file, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fsStat</span>(<span class=\"params\">err, stats</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err.code === <span class=\"string\">'ENOENT'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cb(err);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, stats.isFile());</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">checkIfFile(aPath, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, isFile</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isFile) &#123;</div><div class=\"line\">    <span class=\"comment\">// handle the file</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Or, using promises:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkIfFile</span>(<span class=\"params\">file</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fsStat(file).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">stats</span>) </span>&#123;</div><div class=\"line\">      resolve(stats.isFile());</div><div class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err.code === <span class=\"string\">'ENOENT'</span>) &#123;</div><div class=\"line\">        resolve(<span class=\"literal\">false</span>);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        reject(err);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">checkIfFile(aPath).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isFile</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isFile) &#123;</div><div class=\"line\">    <span class=\"comment\">// handle the file</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; <span class=\"keyword\">throw</span> e; &#125;);</div></pre></td></tr></table></figure>\n<p>The point of all this is not to get hung up on the details of making a perfect replacement for <code>fs.exists</code>, but rather to show that you can accomplish the goals you would have used <code>exists</code> for with better, non-deprecated methods.</p>\n<h2 id=\"But-I-really-want-fs-exists\"><a href=\"#But-I-really-want-fs-exists\" class=\"headerlink\" title=\"But I really want fs.exists!!!\"></a>But I really want fs.exists!!!</h2><p>If you want it, you can keep using it! Just write your own replacement or require/import one of the many user-created packages that have it. <a href=\"https://github.com/sindresorhus/path-exists\" target=\"_blank\" rel=\"external\">Here’s a good one</a>, but feel free to take your pick!</p>","excerpt":"<p>Anyone who has spent any time writing Node has most likely used the <a href=\"https://nodejs.org/api/fs.html\">file system module</a>. One of the methods in this core module though is not only different from all the others, but according to most experts is not even useful at all, despite its popularity with a host of other developers. Because of this, the method has been deprecated for years now. I talk, of course, about <a href=\"https://nodejs.org/api/fs.html#fs_fs_exists_path_callback\">fs.exists</a> (and <a href=\"https://nodejs.org/api/fs.html#fs_fs_existssync_path\">fs.existsSync</a>).</p>\n<p>For some people, it’s a very contentious issue - see for example <a href=\"https://github.com/nodejs/node/issues/1592\">this issue thread</a> or <a href=\"https://github.com/nodejs/node/issues/103\">this one</a>. The reason for its deprecation (<strong>way</strong> back in the iojs days of yore) is that, unlike all other file system methods, it doesn’t use the canonical nodeback API. Furthermore, its main use case scenario, checking whether a file exists before opening, is actually an antipattern and should be replaced by just trying to open the file and possibly handling the error.</p>\n<img src=\"/javascript/2016/checking-whether-a-file-directory-exists-without-using-fs-exists/nodejs-new-pantone-black.png\" alt=\"node logo\" title=\"node logo\">\n<p>But despite its long-standing (in JS terms at least) deprecation, tons of people still continue to use <code>fs.exists</code>, and some newcomers or relative newcomers are surely confused about what to use instead. At least, I myself was when I first ran into this issue.</p>\n<p>While I agree that the method is often superfluous, and sometimes entirely pointless (checking whether a file exists before doing something with that file is not helpful when race conditions may occur and the file may be deleted in the interim), I and I am sure many others would argue that there <strong>are</strong> legitimate use cases for this method, or at least for what this method <em>should</em> have been, had it been designed better.</p>\n<p>So if you are looking for a replacement for <code>fs.exists(Sync)</code>, read on, for what follows is a short discussion of how to check whether a file or directory exists without using this deprecated method.</p>","more":"<h2 id=\"Synchronous-exists\"><a href=\"#Synchronous-exists\" class=\"headerlink\" title=\"Synchronous exists\"></a>Synchronous exists</h2><p>Far be it from me to recommend synchronously manipulating the file system, but hey, it <em>is</em> more straightforward so let’s start with the easy stuff here.</p>\n<p>The official <code>fs</code> documentation recommends using <a href=\"https://nodejs.org/api/fs.html#fs_fs_statsync_path\">fs.statSync</a> or <a href=\"https://nodejs.org/api/fs.html#fs_fs_accesssync_path_mode\">fs.accessSync</a> instead, so let’s go over both.</p>\n<h3 id=\"fs-accessSync\"><a href=\"#fs-accessSync\" class=\"headerlink\" title=\"fs.accessSync\"></a>fs.accessSync</h3><p>This method checks the accessibility of a file and nothing more or less. It throws an error if the file is not accessible and does absolutely nothing if it is.</p>\n<p>So, let’s say you want to check for the existence of <code>myDir</code>, representing the directory <code>/path/to/myDir</code>, before attempting to create it:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  fs.accessSync(myDir);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">  fs.mkdirSync(myDir);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Or, if you prefer to recreate <code>fs.existsSync</code> instead:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fsExistsSync</span>(<span class=\"params\">myDir</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    fs.accessSync(myDir);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!fsExists(myDir)) &#123;</div><div class=\"line\">  fs.mkdirSync(myDir);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"fs-statSync\"><a href=\"#fs-statSync\" class=\"headerlink\" title=\"fs.statSync\"></a>fs.statSync</h3><p>The code above has a problem: what if <code>myDir</code> exists, but is not a directory but a file which happens to have the same name? In that case, the path would be accessible, but it wouldn’t be a folder, and you might end up screaming at your monitor during a nasty debugging session later on when other things start to fail because of that.</p>\n<p>The solution is to use <code>fs.statSync</code> and the <code>isDirectory</code> or <code>isFile</code> method on the returned <code>stats</code> variable. Here’s a synchronous function that checks for whether a given path exists <strong>and</strong> is a directory:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isDirSync</span>(<span class=\"params\">aPath</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fs.statSync(aPath).isDirectory();</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (e.code === <span class=\"string\">'ENOENT'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">throw</span> e;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!isDirSync(myDir)) &#123;</div><div class=\"line\">  fs.mkdirSync(myDir);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>isDirSync</code> will return <code>true</code> if the given path exists and is a directory, and <code>false</code> in all other cases. Note that it also throws the error in case a different error is encountered. This is actually not necessary because as far as I know, there really are no other possible errors, but hey, you never know!</p>\n<p>The <code>ENOENT</code> error code is what you get when <code>fs.statSync</code> throws a <code>no such file or directory</code> error. You need to check for this because unlike what you may expect, checking the stats of an non-existing path will <strong>not</strong> give you an empty <code>stats</code> object, but rather it will cause the function to fail and throw that error.</p>\n<p>You might also sometimes see people check for the error <em>number</em> rather than the error <em>code</em>. You’re probably better off not doing that because the numbers may be different based on the version of Node you’re running and/or the operating system you’re running it on.</p>\n<h2 id=\"Asynchronous-exists\"><a href=\"#Asynchronous-exists\" class=\"headerlink\" title=\"Asynchronous exists\"></a>Asynchronous exists</h2><p>In async world (AKA the real world for us Node people), your alternatives to <code>fs.exists</code> are <code>fs.access</code> or <code>fs.stat</code>. Here we go.</p>\n<h3 id=\"fs-access\"><a href=\"#fs-access\" class=\"headerlink\" title=\"fs.access\"></a>fs.access</h3><p>As per the nodeback API, the first (and in this case only) parameter of <code>fs.access</code> is an error object. Let’s again check whether a directory already exists before making it:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.access(myDir, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err &amp;&amp; err.code === <span class=\"string\">'ENOENT'</span>) &#123;</div><div class=\"line\">    fs.mkdir(myDir);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Note that I combined checking for the error and the code. An alternative to this particular solution would have been to try to make the dir with <code>fs.mkdir</code> first, and then check for an <code>EEXIST</code> error code which would have been thrown if the directory was already there.</p>\n<h3 id=\"fs-stat\"><a href=\"#fs-stat\" class=\"headerlink\" title=\"fs.stat\"></a>fs.stat</h3><p>And of course we can also check for a path’s stats and decide what to do based on the results. For example, let’s make an asynchronous <code>checkFile</code> function, which returns true only if the given path exists and is a file, and false in all other cases:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkIfFile</span>(<span class=\"params\">file, cb</span>) </span>&#123;</div><div class=\"line\">  fs.stat(file, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fsStat</span>(<span class=\"params\">err, stats</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err.code === <span class=\"string\">'ENOENT'</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> cb(err);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> cb(<span class=\"literal\">null</span>, stats.isFile());</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">checkIfFile(aPath, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, isFile</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isFile) &#123;</div><div class=\"line\">    <span class=\"comment\">// handle the file</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Or, using promises:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkIfFile</span>(<span class=\"params\">file</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fsStat(file).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">stats</span>) </span>&#123;</div><div class=\"line\">      resolve(stats.isFile());</div><div class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err.code === <span class=\"string\">'ENOENT'</span>) &#123;</div><div class=\"line\">        resolve(<span class=\"literal\">false</span>);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        reject(err);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">checkIfFile(aPath).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isFile</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (isFile) &#123;</div><div class=\"line\">    <span class=\"comment\">// handle the file</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123; <span class=\"keyword\">throw</span> e; &#125;);</div></pre></td></tr></table></figure>\n<p>The point of all this is not to get hung up on the details of making a perfect replacement for <code>fs.exists</code>, but rather to show that you can accomplish the goals you would have used <code>exists</code> for with better, non-deprecated methods.</p>\n<h2 id=\"But-I-really-want-fs-exists\"><a href=\"#But-I-really-want-fs-exists\" class=\"headerlink\" title=\"But I really want fs.exists!!!\"></a>But I really want fs.exists!!!</h2><p>If you want it, you can keep using it! Just write your own replacement or require/import one of the many user-created packages that have it. <a href=\"https://github.com/sindresorhus/path-exists\">Here’s a good one</a>, but feel free to take your pick!</p>"},{"title":"ES6 React UltiSnips snippets for vim","date":"2015-10-27T02:41:05.000Z","_content":"\n\nIf you're a React person and you use vim to edit files, *and* you use the [UltiSnips](https://github.com/SirVer/ultisnips) plugin for inserting snippets, *and* you're also using ES6 syntax to make those sweet, sweet React components you've got there, then you're in luck because I just pushed [some snippets to GitHub](https://github.com/greg-js/vim-react-es6-snippets) just for you!\n\nThe Readme links to the people originally responsible for the other snippets. I just enabled them for UltiSnips users too and updated them to the new ES6 syntax as recommended in the React docs.\n","source":"_posts/es6-react-ultisnips-snippets-for-vim.md","raw":"title: ES6 React UltiSnips snippets for vim\ncategories:\n  - vim\ntags:\n  - snippets\n  - vim\n  - js\n  - react\n  - es6\n  - open source\ndate: 2015-10-27 02:41:05\n---\n\n\nIf you're a React person and you use vim to edit files, *and* you use the [UltiSnips](https://github.com/SirVer/ultisnips) plugin for inserting snippets, *and* you're also using ES6 syntax to make those sweet, sweet React components you've got there, then you're in luck because I just pushed [some snippets to GitHub](https://github.com/greg-js/vim-react-es6-snippets) just for you!\n\nThe Readme links to the people originally responsible for the other snippets. I just enabled them for UltiSnips users too and updated them to the new ES6 syntax as recommended in the React docs.\n","slug":"es6-react-ultisnips-snippets-for-vim","published":1,"updated":"2015-12-18T18:30:40.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk25000kknz9d6ooe9nu","content":"<p>If you’re a React person and you use vim to edit files, <em>and</em> you use the <a href=\"https://github.com/SirVer/ultisnips\" target=\"_blank\" rel=\"external\">UltiSnips</a> plugin for inserting snippets, <em>and</em> you’re also using ES6 syntax to make those sweet, sweet React components you’ve got there, then you’re in luck because I just pushed <a href=\"https://github.com/greg-js/vim-react-es6-snippets\" target=\"_blank\" rel=\"external\">some snippets to GitHub</a> just for you!</p>\n<p>The Readme links to the people originally responsible for the other snippets. I just enabled them for UltiSnips users too and updated them to the new ES6 syntax as recommended in the React docs.</p>","excerpt":"","more":"<p>If you’re a React person and you use vim to edit files, <em>and</em> you use the <a href=\"https://github.com/SirVer/ultisnips\">UltiSnips</a> plugin for inserting snippets, <em>and</em> you’re also using ES6 syntax to make those sweet, sweet React components you’ve got there, then you’re in luck because I just pushed <a href=\"https://github.com/greg-js/vim-react-es6-snippets\">some snippets to GitHub</a> just for you!</p>\n<p>The Readme links to the people originally responsible for the other snippets. I just enabled them for UltiSnips users too and updated them to the new ES6 syntax as recommended in the React docs.</p>"},{"title":"Configuring the deoplete asynchronous keyword completion plugin with tern-for-vim","date":"2016-01-21T15:00:07.000Z","_content":"\nIf you're a vim-user and you have at least a couple of vim plugins installed, chances are you've heard of [Shougo](https://github.com/shougo). While [Tim Pope](https://github.com/tpope) is still probably the most prolific and well-known author of widely used vim plugins, Shougo is way up there along with him.\n\nWhy am I talking about Shougo? Well, like many vim-lovers I have made the move to Neovim, and Shougo had announced over half a year ago that he would create something the people in the Neovim-camp have been waiting for: a high-performing autocompletion plugin that takes advantage of Neovim's built-in asynchronous job control.\n\n{% asset_img autotern.png Autocompletion with tern for vim %}\n\nWell, I'd been using good old [SuperTab](https://github.com/ervandew/supertab) for basic autocompletion while Shougo worked on his plugin (sadly I'm not skilled enough to help him.. yet) but I just checked the other day and it turns out [the wait is over](https://github.com/Shougo/deoplete.nvim)!\n\n<!-- more -->\n\n## Why Deoplete and tern-for-vim?\n\n[Deoplete](https://github.com/Shougo/deoplete.nvim) - *dark powered neo-completion* - is Shougo's new asynchronous keyword completion system and it's pretty darn awesome if you ask me! Pair it up with [Tern for Vim](https://github.com/ternjs/tern_for_vim) and you get some really nifty functionality (along with classic autocompletion, asynchronous-style). Take the screenshot above as a very simple example.\n\nConfiguring Deoplete and tern-for-vim isn't hard. But hey, what's a blogger like me to do? Talk about really hard stuff? Nah, I'll just help you out with the easy stuff is what I'll do! It might save you some time and give me some exposure - everybody wins! ;-)\n\nAnyway, you know what autocompletion is for and you know why it's a great candidate for making use of asynchronous job control, so I'm not going to waste your time belaboring its usefulness. Some of you may be wondering what tern-for-vim is about though.\n\nWell, Tern offers JavaScript code-analysis and brings non-IDE editors like vim and Sublime Text a little closer to what you might expect from actual IDE's like WebStorm, but without the bloat that comes with something like WebStorm (I say this as a former WebStorm license holder who had this program constantly grind his poor pc to a halt). I'll refer you to [the official website](http://ternjs.net/) if you want to know more, but suffice it to say that the tern-for-vim plugin provides some very nice autocompletion and other features to everyone's favorite editor (vim, just in case that wasn't obvious).\n\n{% asset_img autocompletion.png Autocompletion example %}\n\n## Initializing Deoplete and tern-for-vim\n\nYou should use one of the many plugin managers to install the plugins. Shougo made one (of course he did) called [neobundle](https://github.com/Shougo/neobundle.vim), but personally I use [vim-plug](https://github.com/junegunn/vim-plug), so I'll be using that syntax.\n\nInstalling is a breeze with a manager like vim-plug:\n\n{% codeblock lang:vimscript init.vim %}\ncall plug#begin('$HOME/.config/nvim/plugged')\n\nPlug 'Shougo/deoplete.vim'\nPlug 'ternjs/tern_for_vim', { 'do': 'npm install' }\n\ncall plug#end()\n{% endcodeblock %}\n\nNote the `npm install` line there. If your plugin manager doesn't support something like this, you'll have to manually go into the installation folder and do an `npm install` yourself. The reason is that Tern actually spins up a NodeJS server to analyze your code on the fly.\n\nBy the way, to install plugins using vim-plug, source your config files and simply run `:PlugInstall`. Later on, run `:PlugClean` to get rid of deleted plugins, `:PlugUpdate` to update your installed ones and `:PlugUpgrade` to update vim-plug itself.\n\n## Configuration\n\nNow let's configure deoplete. Note that I've made some personal choices here with regards to how I like to do things. Run `:help deoplete` to get the manual for the plugin in case you want to look up how to do things differently. Also, I recommend [splitting up your .vimrc/init.vim file](/vim/2016/do-yourself-a-favor-and-modularize-your-vimrc-init-vim) into multiple configuration files in order to maintain your own sanity in the long run.\n\n{% codeblock lang:vim plugins.vimrc %}\nlet g:deoplete#enable_at_startup = 1\nif !exists('g:deoplete#omni#input_patterns')\n  let g:deoplete#omni#input_patterns = {}\nendif\n\" let g:deoplete#disable_auto_complete = 1\nautocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif\n{% endcodeblock %}\n\nLines 1-4 enable deoplete at startup and make sure the autocompletion will actually trigger using the omnifuncs set later on.\n\nThe commented line 5 would actually *disable* **auto**completion, forcing me to press the trigger to see the autocomplete possibilities. I've been playing with it on and off because I'm not sure I like having my text blocked with lots of possible autocompletes while I type.. YMMV\n\nLine 6 is for automatically closing the scratch window at the top of the vim window on finishing a complete or leaving insert. If you don't have something like this set, you'll have to manually close it with `:pc`, `:pclose` or `:q` with the preview window active.\n\nNow for setting some local omnifunc settings. Of course this depends on what you have installed (if anything).\n\n{% codeblock lang:vim plugins.vimrc %}\n\" omnifuncs\naugroup omnifuncs\n  autocmd!\n  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS\n  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags\n  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS\n  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete\n  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags\naugroup end\n\n\" tern\nif exists('g:plugs[\"tern_for_vim\"]')\n  let g:tern_show_argument_hints = 'on_hold'\n  let g:tern_show_signature_in_pum = 1\n\n  autocmd FileType javascript setlocal omnifunc=tern#Complete\nendif\n{% endcodeblock %}\n\nThe last lines under `\" tern` set the omnifunc for JavaScript to `tern#Complete`, which enables tern *and* makes it fall back to whatever you have set otherwise (in my case set on line 6 here).\n\nAs for the settings on line 13 and 14, check the tern manual (`:help tern`) for more information. There are actually many more things you can do and I have not spent a lot of time there myself, so I may end up writing another post later about other features of this plugin.\n\nAlso note that I wrapped the tern settings in an if-statement. The reason is that I don't have it installed on my server but prefer using the same configuration files. This way I can just copy the config over without it breaking my setup.\n\n## Setting up deoplete to use `<Tab>`\n\nThe default key for autocompletion is `<Ctrl-x><Ctrl-o>` and `<Ctrl-P>` for going up in the list and `<Ctrl-N>` for going down. At least, I think it is, as I changed it to exclusively use `<Tab>` pretty much immediately. Here's how to do it:\n\n{% codeblock lang:vim keys.vimrc %}\n\" deoplete tab-complete\ninoremap <silent><expr> <Tab> pumvisible() ? \"\\<C-n>\" : deoplete#mappings#manual_complete()\n\" ,<Tab> for regular tab\ninoremap <Leader><Tab> <Space><Space>\n\n\" tern\nautocmd FileType javascript nnoremap <silent> <buffer> gb :TernDef<CR>\n{% endcodeblock %}\n\nLine 2 sets `<Tab>` up to do what you most likely want it to do -- autocomplete and cycle from top to bottom.\n\nThis leads to a bit of an issue though! If `<Tab>` is the autocompletion key, it no longer inserts actual tabs (which, in my case is equivalent to two spaces). Rather than come up with some ingenious solution to this problem, I simply remapped `<Leader><Tab>` to `<Space><Space>`. My leader is comma, so comma-tab gives me a normal tab - easy peasy.\n\nLastly, I also set up a `gb` keybinding for moving the cursor straight to a variable definition using Tern's JS code analysis engine.\n\n## Done\n\nI haven't talked about introducing your own sources in this article as I haven't done so myself yet, but I might write another post about that if or when I get to it. But either way, if you followed this, you should have deoplete and tern-for-vim working quite nicely (and speedily) together. Isn't it beautiful?\n\n{% asset_img beautiful.png Another autocompletion example %}\n","source":"_posts/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim.md","raw":"title: Configuring the deoplete asynchronous keyword completion plugin with tern-for-vim\ndate: 2016-01-21 15:00:07\ncategories: vim\ntags:\n  - neovim\n  - autocompletion\n  - dotfiles\n---\n\nIf you're a vim-user and you have at least a couple of vim plugins installed, chances are you've heard of [Shougo](https://github.com/shougo). While [Tim Pope](https://github.com/tpope) is still probably the most prolific and well-known author of widely used vim plugins, Shougo is way up there along with him.\n\nWhy am I talking about Shougo? Well, like many vim-lovers I have made the move to Neovim, and Shougo had announced over half a year ago that he would create something the people in the Neovim-camp have been waiting for: a high-performing autocompletion plugin that takes advantage of Neovim's built-in asynchronous job control.\n\n{% asset_img autotern.png Autocompletion with tern for vim %}\n\nWell, I'd been using good old [SuperTab](https://github.com/ervandew/supertab) for basic autocompletion while Shougo worked on his plugin (sadly I'm not skilled enough to help him.. yet) but I just checked the other day and it turns out [the wait is over](https://github.com/Shougo/deoplete.nvim)!\n\n<!-- more -->\n\n## Why Deoplete and tern-for-vim?\n\n[Deoplete](https://github.com/Shougo/deoplete.nvim) - *dark powered neo-completion* - is Shougo's new asynchronous keyword completion system and it's pretty darn awesome if you ask me! Pair it up with [Tern for Vim](https://github.com/ternjs/tern_for_vim) and you get some really nifty functionality (along with classic autocompletion, asynchronous-style). Take the screenshot above as a very simple example.\n\nConfiguring Deoplete and tern-for-vim isn't hard. But hey, what's a blogger like me to do? Talk about really hard stuff? Nah, I'll just help you out with the easy stuff is what I'll do! It might save you some time and give me some exposure - everybody wins! ;-)\n\nAnyway, you know what autocompletion is for and you know why it's a great candidate for making use of asynchronous job control, so I'm not going to waste your time belaboring its usefulness. Some of you may be wondering what tern-for-vim is about though.\n\nWell, Tern offers JavaScript code-analysis and brings non-IDE editors like vim and Sublime Text a little closer to what you might expect from actual IDE's like WebStorm, but without the bloat that comes with something like WebStorm (I say this as a former WebStorm license holder who had this program constantly grind his poor pc to a halt). I'll refer you to [the official website](http://ternjs.net/) if you want to know more, but suffice it to say that the tern-for-vim plugin provides some very nice autocompletion and other features to everyone's favorite editor (vim, just in case that wasn't obvious).\n\n{% asset_img autocompletion.png Autocompletion example %}\n\n## Initializing Deoplete and tern-for-vim\n\nYou should use one of the many plugin managers to install the plugins. Shougo made one (of course he did) called [neobundle](https://github.com/Shougo/neobundle.vim), but personally I use [vim-plug](https://github.com/junegunn/vim-plug), so I'll be using that syntax.\n\nInstalling is a breeze with a manager like vim-plug:\n\n{% codeblock lang:vimscript init.vim %}\ncall plug#begin('$HOME/.config/nvim/plugged')\n\nPlug 'Shougo/deoplete.vim'\nPlug 'ternjs/tern_for_vim', { 'do': 'npm install' }\n\ncall plug#end()\n{% endcodeblock %}\n\nNote the `npm install` line there. If your plugin manager doesn't support something like this, you'll have to manually go into the installation folder and do an `npm install` yourself. The reason is that Tern actually spins up a NodeJS server to analyze your code on the fly.\n\nBy the way, to install plugins using vim-plug, source your config files and simply run `:PlugInstall`. Later on, run `:PlugClean` to get rid of deleted plugins, `:PlugUpdate` to update your installed ones and `:PlugUpgrade` to update vim-plug itself.\n\n## Configuration\n\nNow let's configure deoplete. Note that I've made some personal choices here with regards to how I like to do things. Run `:help deoplete` to get the manual for the plugin in case you want to look up how to do things differently. Also, I recommend [splitting up your .vimrc/init.vim file](/vim/2016/do-yourself-a-favor-and-modularize-your-vimrc-init-vim) into multiple configuration files in order to maintain your own sanity in the long run.\n\n{% codeblock lang:vim plugins.vimrc %}\nlet g:deoplete#enable_at_startup = 1\nif !exists('g:deoplete#omni#input_patterns')\n  let g:deoplete#omni#input_patterns = {}\nendif\n\" let g:deoplete#disable_auto_complete = 1\nautocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif\n{% endcodeblock %}\n\nLines 1-4 enable deoplete at startup and make sure the autocompletion will actually trigger using the omnifuncs set later on.\n\nThe commented line 5 would actually *disable* **auto**completion, forcing me to press the trigger to see the autocomplete possibilities. I've been playing with it on and off because I'm not sure I like having my text blocked with lots of possible autocompletes while I type.. YMMV\n\nLine 6 is for automatically closing the scratch window at the top of the vim window on finishing a complete or leaving insert. If you don't have something like this set, you'll have to manually close it with `:pc`, `:pclose` or `:q` with the preview window active.\n\nNow for setting some local omnifunc settings. Of course this depends on what you have installed (if anything).\n\n{% codeblock lang:vim plugins.vimrc %}\n\" omnifuncs\naugroup omnifuncs\n  autocmd!\n  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS\n  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags\n  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS\n  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete\n  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags\naugroup end\n\n\" tern\nif exists('g:plugs[\"tern_for_vim\"]')\n  let g:tern_show_argument_hints = 'on_hold'\n  let g:tern_show_signature_in_pum = 1\n\n  autocmd FileType javascript setlocal omnifunc=tern#Complete\nendif\n{% endcodeblock %}\n\nThe last lines under `\" tern` set the omnifunc for JavaScript to `tern#Complete`, which enables tern *and* makes it fall back to whatever you have set otherwise (in my case set on line 6 here).\n\nAs for the settings on line 13 and 14, check the tern manual (`:help tern`) for more information. There are actually many more things you can do and I have not spent a lot of time there myself, so I may end up writing another post later about other features of this plugin.\n\nAlso note that I wrapped the tern settings in an if-statement. The reason is that I don't have it installed on my server but prefer using the same configuration files. This way I can just copy the config over without it breaking my setup.\n\n## Setting up deoplete to use `<Tab>`\n\nThe default key for autocompletion is `<Ctrl-x><Ctrl-o>` and `<Ctrl-P>` for going up in the list and `<Ctrl-N>` for going down. At least, I think it is, as I changed it to exclusively use `<Tab>` pretty much immediately. Here's how to do it:\n\n{% codeblock lang:vim keys.vimrc %}\n\" deoplete tab-complete\ninoremap <silent><expr> <Tab> pumvisible() ? \"\\<C-n>\" : deoplete#mappings#manual_complete()\n\" ,<Tab> for regular tab\ninoremap <Leader><Tab> <Space><Space>\n\n\" tern\nautocmd FileType javascript nnoremap <silent> <buffer> gb :TernDef<CR>\n{% endcodeblock %}\n\nLine 2 sets `<Tab>` up to do what you most likely want it to do -- autocomplete and cycle from top to bottom.\n\nThis leads to a bit of an issue though! If `<Tab>` is the autocompletion key, it no longer inserts actual tabs (which, in my case is equivalent to two spaces). Rather than come up with some ingenious solution to this problem, I simply remapped `<Leader><Tab>` to `<Space><Space>`. My leader is comma, so comma-tab gives me a normal tab - easy peasy.\n\nLastly, I also set up a `gb` keybinding for moving the cursor straight to a variable definition using Tern's JS code analysis engine.\n\n## Done\n\nI haven't talked about introducing your own sources in this article as I haven't done so myself yet, but I might write another post about that if or when I get to it. But either way, if you followed this, you should have deoplete and tern-for-vim working quite nicely (and speedily) together. Isn't it beautiful?\n\n{% asset_img beautiful.png Another autocompletion example %}\n","slug":"configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim","published":1,"updated":"2016-05-16T20:59:21.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk2c000oknz9sej65wti","content":"<p>If you’re a vim-user and you have at least a couple of vim plugins installed, chances are you’ve heard of <a href=\"https://github.com/shougo\" target=\"_blank\" rel=\"external\">Shougo</a>. While <a href=\"https://github.com/tpope\" target=\"_blank\" rel=\"external\">Tim Pope</a> is still probably the most prolific and well-known author of widely used vim plugins, Shougo is way up there along with him.</p>\n<p>Why am I talking about Shougo? Well, like many vim-lovers I have made the move to Neovim, and Shougo had announced over half a year ago that he would create something the people in the Neovim-camp have been waiting for: a high-performing autocompletion plugin that takes advantage of Neovim’s built-in asynchronous job control.</p>\n<img src=\"/vim/2016/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/autotern.png\" alt=\"Autocompletion with tern for vim\" title=\"Autocompletion with tern for vim\">\n<p>Well, I’d been using good old <a href=\"https://github.com/ervandew/supertab\" target=\"_blank\" rel=\"external\">SuperTab</a> for basic autocompletion while Shougo worked on his plugin (sadly I’m not skilled enough to help him.. yet) but I just checked the other day and it turns out <a href=\"https://github.com/Shougo/deoplete.nvim\" target=\"_blank\" rel=\"external\">the wait is over</a>!</p>\n<a id=\"more\"></a>\n<h2 id=\"Why-Deoplete-and-tern-for-vim\"><a href=\"#Why-Deoplete-and-tern-for-vim\" class=\"headerlink\" title=\"Why Deoplete and tern-for-vim?\"></a>Why Deoplete and tern-for-vim?</h2><p><a href=\"https://github.com/Shougo/deoplete.nvim\" target=\"_blank\" rel=\"external\">Deoplete</a> - <em>dark powered neo-completion</em> - is Shougo’s new asynchronous keyword completion system and it’s pretty darn awesome if you ask me! Pair it up with <a href=\"https://github.com/ternjs/tern_for_vim\" target=\"_blank\" rel=\"external\">Tern for Vim</a> and you get some really nifty functionality (along with classic autocompletion, asynchronous-style). Take the screenshot above as a very simple example.</p>\n<p>Configuring Deoplete and tern-for-vim isn’t hard. But hey, what’s a blogger like me to do? Talk about really hard stuff? Nah, I’ll just help you out with the easy stuff is what I’ll do! It might save you some time and give me some exposure - everybody wins! ;-)</p>\n<p>Anyway, you know what autocompletion is for and you know why it’s a great candidate for making use of asynchronous job control, so I’m not going to waste your time belaboring its usefulness. Some of you may be wondering what tern-for-vim is about though.</p>\n<p>Well, Tern offers JavaScript code-analysis and brings non-IDE editors like vim and Sublime Text a little closer to what you might expect from actual IDE’s like WebStorm, but without the bloat that comes with something like WebStorm (I say this as a former WebStorm license holder who had this program constantly grind his poor pc to a halt). I’ll refer you to <a href=\"http://ternjs.net/\" target=\"_blank\" rel=\"external\">the official website</a> if you want to know more, but suffice it to say that the tern-for-vim plugin provides some very nice autocompletion and other features to everyone’s favorite editor (vim, just in case that wasn’t obvious).</p>\n<img src=\"/vim/2016/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/autocompletion.png\" alt=\"Autocompletion example\" title=\"Autocompletion example\">\n<h2 id=\"Initializing-Deoplete-and-tern-for-vim\"><a href=\"#Initializing-Deoplete-and-tern-for-vim\" class=\"headerlink\" title=\"Initializing Deoplete and tern-for-vim\"></a>Initializing Deoplete and tern-for-vim</h2><p>You should use one of the many plugin managers to install the plugins. Shougo made one (of course he did) called <a href=\"https://github.com/Shougo/neobundle.vim\" target=\"_blank\" rel=\"external\">neobundle</a>, but personally I use <a href=\"https://github.com/junegunn/vim-plug\" target=\"_blank\" rel=\"external\">vim-plug</a>, so I’ll be using that syntax.</p>\n<p>Installing is a breeze with a manager like vim-plug:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">call plug#begin(&apos;$HOME/.config/nvim/plugged&apos;)</div><div class=\"line\"></div><div class=\"line\">Plug &apos;Shougo/deoplete.vim&apos;</div><div class=\"line\">Plug &apos;ternjs/tern_for_vim&apos;, &#123; &apos;do&apos;: &apos;npm install&apos; &#125;</div><div class=\"line\"></div><div class=\"line\">call plug#end()</div></pre></td></tr></table></figure>\n<p>Note the <code>npm install</code> line there. If your plugin manager doesn’t support something like this, you’ll have to manually go into the installation folder and do an <code>npm install</code> yourself. The reason is that Tern actually spins up a NodeJS server to analyze your code on the fly.</p>\n<p>By the way, to install plugins using vim-plug, source your config files and simply run <code>:PlugInstall</code>. Later on, run <code>:PlugClean</code> to get rid of deleted plugins, <code>:PlugUpdate</code> to update your installed ones and <code>:PlugUpgrade</code> to update vim-plug itself.</p>\n<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><p>Now let’s configure deoplete. Note that I’ve made some personal choices here with regards to how I like to do things. Run <code>:help deoplete</code> to get the manual for the plugin in case you want to look up how to do things differently. Also, I recommend <a href=\"/vim/2016/do-yourself-a-favor-and-modularize-your-vimrc-init-vim\">splitting up your .vimrc/init.vim file</a> into multiple configuration files in order to maintain your own sanity in the long run.</p>\n<figure class=\"highlight\"><figcaption><span>plugins.vimrc</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">let g:deoplete#enable_at_startup = 1</div><div class=\"line\">if !exists('g:deoplete#omni#input_patterns')</div><div class=\"line\">  let g:deoplete#omni#input_patterns = &#123;&#125;</div><div class=\"line\">endif</div><div class=\"line\">\" let g:deoplete#disable_auto_complete = 1</div><div class=\"line\">autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif</div></pre></td></tr></table></figure>\n<p>Lines 1-4 enable deoplete at startup and make sure the autocompletion will actually trigger using the omnifuncs set later on.</p>\n<p>The commented line 5 would actually <em>disable</em> <strong>auto</strong>completion, forcing me to press the trigger to see the autocomplete possibilities. I’ve been playing with it on and off because I’m not sure I like having my text blocked with lots of possible autocompletes while I type.. YMMV</p>\n<p>Line 6 is for automatically closing the scratch window at the top of the vim window on finishing a complete or leaving insert. If you don’t have something like this set, you’ll have to manually close it with <code>:pc</code>, <code>:pclose</code> or <code>:q</code> with the preview window active.</p>\n<p>Now for setting some local omnifunc settings. Of course this depends on what you have installed (if anything).</p>\n<figure class=\"highlight vim\"><figcaption><span>plugins.vimrc</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\" omnifuncs</span></div><div class=\"line\"><span class=\"keyword\">augroup</span> omnifuncs</div><div class=\"line\">  autocmd!</div><div class=\"line\">  <span class=\"keyword\">autocmd</span> FileType css <span class=\"keyword\">setlocal</span> omnifunc=csscomplete#CompleteCSS</div><div class=\"line\">  <span class=\"keyword\">autocmd</span> FileType html,markdown <span class=\"keyword\">setlocal</span> omnifunc=htmlcomplete#CompleteTags</div><div class=\"line\">  <span class=\"keyword\">autocmd</span> FileType javascript <span class=\"keyword\">setlocal</span> omnifunc=javascriptcomplete#CompleteJS</div><div class=\"line\">  <span class=\"keyword\">autocmd</span> FileType <span class=\"keyword\">python</span> <span class=\"keyword\">setlocal</span> omnifunc=pythoncomplete#Complete</div><div class=\"line\">  <span class=\"keyword\">autocmd</span> FileType xml <span class=\"keyword\">setlocal</span> omnifunc=xmlcomplete#CompleteTags</div><div class=\"line\"><span class=\"keyword\">augroup</span> end</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">\" tern</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">exists</span>(<span class=\"string\">'g:plugs[\"tern_for_vim\"]'</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">g:tern_show_argument_hints</span> = <span class=\"string\">'on_hold'</span></div><div class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">g:tern_show_signature_in_pum</span> = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">autocmd</span> FileType javascript <span class=\"keyword\">setlocal</span> omnifunc=tern#Complete</div><div class=\"line\"><span class=\"keyword\">endif</span></div></pre></td></tr></table></figure>\n<p>The last lines under <code>&quot; tern</code> set the omnifunc for JavaScript to <code>tern#Complete</code>, which enables tern <em>and</em> makes it fall back to whatever you have set otherwise (in my case set on line 6 here).</p>\n<p>As for the settings on line 13 and 14, check the tern manual (<code>:help tern</code>) for more information. There are actually many more things you can do and I have not spent a lot of time there myself, so I may end up writing another post later about other features of this plugin.</p>\n<p>Also note that I wrapped the tern settings in an if-statement. The reason is that I don’t have it installed on my server but prefer using the same configuration files. This way I can just copy the config over without it breaking my setup.</p>\n<h2 id=\"Setting-up-deoplete-to-use-lt-Tab-gt\"><a href=\"#Setting-up-deoplete-to-use-lt-Tab-gt\" class=\"headerlink\" title=\"Setting up deoplete to use &lt;Tab&gt;\"></a>Setting up deoplete to use <code>&lt;Tab&gt;</code></h2><p>The default key for autocompletion is <code>&lt;Ctrl-x&gt;&lt;Ctrl-o&gt;</code> and <code>&lt;Ctrl-P&gt;</code> for going up in the list and <code>&lt;Ctrl-N&gt;</code> for going down. At least, I think it is, as I changed it to exclusively use <code>&lt;Tab&gt;</code> pretty much immediately. Here’s how to do it:</p>\n<figure class=\"highlight\"><figcaption><span>keys.vimrc</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">\" deoplete tab-complete</div><div class=\"line\">inoremap &lt;silent&gt;&lt;expr&gt; &lt;Tab&gt; pumvisible() ? \"\\&lt;C-n&gt;\" : deoplete#mappings#manual_complete()</div><div class=\"line\">\" ,&lt;Tab&gt; for regular tab</div><div class=\"line\">inoremap &lt;Leader&gt;&lt;Tab&gt; &lt;Space&gt;&lt;Space&gt;</div><div class=\"line\"></div><div class=\"line\">\" tern</div><div class=\"line\">autocmd FileType javascript nnoremap &lt;silent&gt; &lt;buffer&gt; gb :TernDef&lt;CR&gt;</div></pre></td></tr></table></figure>\n<p>Line 2 sets <code>&lt;Tab&gt;</code> up to do what you most likely want it to do – autocomplete and cycle from top to bottom.</p>\n<p>This leads to a bit of an issue though! If <code>&lt;Tab&gt;</code> is the autocompletion key, it no longer inserts actual tabs (which, in my case is equivalent to two spaces). Rather than come up with some ingenious solution to this problem, I simply remapped <code>&lt;Leader&gt;&lt;Tab&gt;</code> to <code>&lt;Space&gt;&lt;Space&gt;</code>. My leader is comma, so comma-tab gives me a normal tab - easy peasy.</p>\n<p>Lastly, I also set up a <code>gb</code> keybinding for moving the cursor straight to a variable definition using Tern’s JS code analysis engine.</p>\n<h2 id=\"Done\"><a href=\"#Done\" class=\"headerlink\" title=\"Done\"></a>Done</h2><p>I haven’t talked about introducing your own sources in this article as I haven’t done so myself yet, but I might write another post about that if or when I get to it. But either way, if you followed this, you should have deoplete and tern-for-vim working quite nicely (and speedily) together. Isn’t it beautiful?</p>\n<img src=\"/vim/2016/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/beautiful.png\" alt=\"Another autocompletion example\" title=\"Another autocompletion example\">","excerpt":"<p>If you’re a vim-user and you have at least a couple of vim plugins installed, chances are you’ve heard of <a href=\"https://github.com/shougo\">Shougo</a>. While <a href=\"https://github.com/tpope\">Tim Pope</a> is still probably the most prolific and well-known author of widely used vim plugins, Shougo is way up there along with him.</p>\n<p>Why am I talking about Shougo? Well, like many vim-lovers I have made the move to Neovim, and Shougo had announced over half a year ago that he would create something the people in the Neovim-camp have been waiting for: a high-performing autocompletion plugin that takes advantage of Neovim’s built-in asynchronous job control.</p>\n<img src=\"/vim/2016/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/autotern.png\" alt=\"Autocompletion with tern for vim\" title=\"Autocompletion with tern for vim\">\n<p>Well, I’d been using good old <a href=\"https://github.com/ervandew/supertab\">SuperTab</a> for basic autocompletion while Shougo worked on his plugin (sadly I’m not skilled enough to help him.. yet) but I just checked the other day and it turns out <a href=\"https://github.com/Shougo/deoplete.nvim\">the wait is over</a>!</p>","more":"<h2 id=\"Why-Deoplete-and-tern-for-vim\"><a href=\"#Why-Deoplete-and-tern-for-vim\" class=\"headerlink\" title=\"Why Deoplete and tern-for-vim?\"></a>Why Deoplete and tern-for-vim?</h2><p><a href=\"https://github.com/Shougo/deoplete.nvim\">Deoplete</a> - <em>dark powered neo-completion</em> - is Shougo’s new asynchronous keyword completion system and it’s pretty darn awesome if you ask me! Pair it up with <a href=\"https://github.com/ternjs/tern_for_vim\">Tern for Vim</a> and you get some really nifty functionality (along with classic autocompletion, asynchronous-style). Take the screenshot above as a very simple example.</p>\n<p>Configuring Deoplete and tern-for-vim isn’t hard. But hey, what’s a blogger like me to do? Talk about really hard stuff? Nah, I’ll just help you out with the easy stuff is what I’ll do! It might save you some time and give me some exposure - everybody wins! ;-)</p>\n<p>Anyway, you know what autocompletion is for and you know why it’s a great candidate for making use of asynchronous job control, so I’m not going to waste your time belaboring its usefulness. Some of you may be wondering what tern-for-vim is about though.</p>\n<p>Well, Tern offers JavaScript code-analysis and brings non-IDE editors like vim and Sublime Text a little closer to what you might expect from actual IDE’s like WebStorm, but without the bloat that comes with something like WebStorm (I say this as a former WebStorm license holder who had this program constantly grind his poor pc to a halt). I’ll refer you to <a href=\"http://ternjs.net/\">the official website</a> if you want to know more, but suffice it to say that the tern-for-vim plugin provides some very nice autocompletion and other features to everyone’s favorite editor (vim, just in case that wasn’t obvious).</p>\n<img src=\"/vim/2016/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/autocompletion.png\" alt=\"Autocompletion example\" title=\"Autocompletion example\">\n<h2 id=\"Initializing-Deoplete-and-tern-for-vim\"><a href=\"#Initializing-Deoplete-and-tern-for-vim\" class=\"headerlink\" title=\"Initializing Deoplete and tern-for-vim\"></a>Initializing Deoplete and tern-for-vim</h2><p>You should use one of the many plugin managers to install the plugins. Shougo made one (of course he did) called <a href=\"https://github.com/Shougo/neobundle.vim\">neobundle</a>, but personally I use <a href=\"https://github.com/junegunn/vim-plug\">vim-plug</a>, so I’ll be using that syntax.</p>\n<p>Installing is a breeze with a manager like vim-plug:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">call plug#begin(&apos;$HOME/.config/nvim/plugged&apos;)</div><div class=\"line\"></div><div class=\"line\">Plug &apos;Shougo/deoplete.vim&apos;</div><div class=\"line\">Plug &apos;ternjs/tern_for_vim&apos;, &#123; &apos;do&apos;: &apos;npm install&apos; &#125;</div><div class=\"line\"></div><div class=\"line\">call plug#end()</div></pre></td></tr></table></figure>\n<p>Note the <code>npm install</code> line there. If your plugin manager doesn’t support something like this, you’ll have to manually go into the installation folder and do an <code>npm install</code> yourself. The reason is that Tern actually spins up a NodeJS server to analyze your code on the fly.</p>\n<p>By the way, to install plugins using vim-plug, source your config files and simply run <code>:PlugInstall</code>. Later on, run <code>:PlugClean</code> to get rid of deleted plugins, <code>:PlugUpdate</code> to update your installed ones and <code>:PlugUpgrade</code> to update vim-plug itself.</p>\n<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><p>Now let’s configure deoplete. Note that I’ve made some personal choices here with regards to how I like to do things. Run <code>:help deoplete</code> to get the manual for the plugin in case you want to look up how to do things differently. Also, I recommend <a href=\"/vim/2016/do-yourself-a-favor-and-modularize-your-vimrc-init-vim\">splitting up your .vimrc/init.vim file</a> into multiple configuration files in order to maintain your own sanity in the long run.</p>\n<figure class=\"highlight\"><figcaption><span>plugins.vimrc</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">let g:deoplete#enable_at_startup = 1</div><div class=\"line\">if !exists('g:deoplete#omni#input_patterns')</div><div class=\"line\">  let g:deoplete#omni#input_patterns = &#123;&#125;</div><div class=\"line\">endif</div><div class=\"line\">\" let g:deoplete#disable_auto_complete = 1</div><div class=\"line\">autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif</div></pre></td></tr></table></figure>\n<p>Lines 1-4 enable deoplete at startup and make sure the autocompletion will actually trigger using the omnifuncs set later on.</p>\n<p>The commented line 5 would actually <em>disable</em> <strong>auto</strong>completion, forcing me to press the trigger to see the autocomplete possibilities. I’ve been playing with it on and off because I’m not sure I like having my text blocked with lots of possible autocompletes while I type.. YMMV</p>\n<p>Line 6 is for automatically closing the scratch window at the top of the vim window on finishing a complete or leaving insert. If you don’t have something like this set, you’ll have to manually close it with <code>:pc</code>, <code>:pclose</code> or <code>:q</code> with the preview window active.</p>\n<p>Now for setting some local omnifunc settings. Of course this depends on what you have installed (if anything).</p>\n<figure class=\"highlight vim\"><figcaption><span>plugins.vimrc</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">\" omnifuncs</span></div><div class=\"line\"><span class=\"keyword\">augroup</span> omnifuncs</div><div class=\"line\">  autocmd!</div><div class=\"line\">  <span class=\"keyword\">autocmd</span> FileType css <span class=\"keyword\">setlocal</span> omnifunc=csscomplete#CompleteCSS</div><div class=\"line\">  <span class=\"keyword\">autocmd</span> FileType html,markdown <span class=\"keyword\">setlocal</span> omnifunc=htmlcomplete#CompleteTags</div><div class=\"line\">  <span class=\"keyword\">autocmd</span> FileType javascript <span class=\"keyword\">setlocal</span> omnifunc=javascriptcomplete#CompleteJS</div><div class=\"line\">  <span class=\"keyword\">autocmd</span> FileType <span class=\"keyword\">python</span> <span class=\"keyword\">setlocal</span> omnifunc=pythoncomplete#Complete</div><div class=\"line\">  <span class=\"keyword\">autocmd</span> FileType xml <span class=\"keyword\">setlocal</span> omnifunc=xmlcomplete#CompleteTags</div><div class=\"line\"><span class=\"keyword\">augroup</span> end</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">\" tern</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">exists</span>(<span class=\"string\">'g:plugs[\"tern_for_vim\"]'</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">g:tern_show_argument_hints</span> = <span class=\"string\">'on_hold'</span></div><div class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">g:tern_show_signature_in_pum</span> = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">autocmd</span> FileType javascript <span class=\"keyword\">setlocal</span> omnifunc=tern#Complete</div><div class=\"line\"><span class=\"keyword\">endif</span></div></pre></td></tr></table></figure>\n<p>The last lines under <code>&quot; tern</code> set the omnifunc for JavaScript to <code>tern#Complete</code>, which enables tern <em>and</em> makes it fall back to whatever you have set otherwise (in my case set on line 6 here).</p>\n<p>As for the settings on line 13 and 14, check the tern manual (<code>:help tern</code>) for more information. There are actually many more things you can do and I have not spent a lot of time there myself, so I may end up writing another post later about other features of this plugin.</p>\n<p>Also note that I wrapped the tern settings in an if-statement. The reason is that I don’t have it installed on my server but prefer using the same configuration files. This way I can just copy the config over without it breaking my setup.</p>\n<h2 id=\"Setting-up-deoplete-to-use-lt-Tab-gt\"><a href=\"#Setting-up-deoplete-to-use-lt-Tab-gt\" class=\"headerlink\" title=\"Setting up deoplete to use &lt;Tab&gt;\"></a>Setting up deoplete to use <code>&lt;Tab&gt;</code></h2><p>The default key for autocompletion is <code>&lt;Ctrl-x&gt;&lt;Ctrl-o&gt;</code> and <code>&lt;Ctrl-P&gt;</code> for going up in the list and <code>&lt;Ctrl-N&gt;</code> for going down. At least, I think it is, as I changed it to exclusively use <code>&lt;Tab&gt;</code> pretty much immediately. Here’s how to do it:</p>\n<figure class=\"highlight\"><figcaption><span>keys.vimrc</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">\" deoplete tab-complete</div><div class=\"line\">inoremap &lt;silent&gt;&lt;expr&gt; &lt;Tab&gt; pumvisible() ? \"\\&lt;C-n&gt;\" : deoplete#mappings#manual_complete()</div><div class=\"line\">\" ,&lt;Tab&gt; for regular tab</div><div class=\"line\">inoremap &lt;Leader&gt;&lt;Tab&gt; &lt;Space&gt;&lt;Space&gt;</div><div class=\"line\"></div><div class=\"line\">\" tern</div><div class=\"line\">autocmd FileType javascript nnoremap &lt;silent&gt; &lt;buffer&gt; gb :TernDef&lt;CR&gt;</div></pre></td></tr></table></figure>\n<p>Line 2 sets <code>&lt;Tab&gt;</code> up to do what you most likely want it to do – autocomplete and cycle from top to bottom.</p>\n<p>This leads to a bit of an issue though! If <code>&lt;Tab&gt;</code> is the autocompletion key, it no longer inserts actual tabs (which, in my case is equivalent to two spaces). Rather than come up with some ingenious solution to this problem, I simply remapped <code>&lt;Leader&gt;&lt;Tab&gt;</code> to <code>&lt;Space&gt;&lt;Space&gt;</code>. My leader is comma, so comma-tab gives me a normal tab - easy peasy.</p>\n<p>Lastly, I also set up a <code>gb</code> keybinding for moving the cursor straight to a variable definition using Tern’s JS code analysis engine.</p>\n<h2 id=\"Done\"><a href=\"#Done\" class=\"headerlink\" title=\"Done\"></a>Done</h2><p>I haven’t talked about introducing your own sources in this article as I haven’t done so myself yet, but I might write another post about that if or when I get to it. But either way, if you followed this, you should have deoplete and tern-for-vim working quite nicely (and speedily) together. Isn’t it beautiful?</p>\n<img src=\"/vim/2016/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/beautiful.png\" alt=\"Another autocompletion example\" title=\"Another autocompletion example\">"},{"title":"Do yourself a favor and modularize your .vimrc/init.vim","date":"2016-01-08T15:31:26.000Z","_content":"\nI spend quite a bit of time reading various blogs and forums frequented by vim/neovim users. Of course the topic of the `.vimrc` (or `init.vim` [if you've switched to the new neovim style](/vim/2015/no-more-nvimrc-neovim-folder-now-at-config-nvim/)) file comes up all the time in such circles and I've learned a huge deal from looking at (and stealing parts of) other people's configuration files.\n\n{% asset_img tools.jpg Organized tools %}\n\nThat said, I am often baffled by the lack of organization in people's config files. More often than not it's a total mess, but even when the file has been carefully commented and organized, it's almost always **just one file**.\n\n<!-- more -->\n\nIt's actually even worse than that. I often see people *boasting* about how many lines their `.vimrc`/`init.vim` has, as if it that's somehow a sign of how advanced their setup is. But why? Modularization is not only everywhere, it is universally accepted as a very good thing, so why is it so rare in vim configs?\n\nMind you, my own setup isn't quite the shining example of impeccable organization I would like it to be. Mine too is the result of years-long piecemeal expansion, of adding something here, copy-pasting something there, tweaking something elsewhere. But at least mine isn't a gigantic file with key bindings, plugin initializations, color schemes, UI settings and what not, all mixed in with one another!\n\nMost of us probably tweak our vim config files once every couple of weeks and when that happens, you'll be so glad you've taken taken ten minutes out of your busy schedule to split up your `.vimrc`/`init.vim` into some logical categories. As an example, this is what mine looks like:\n\n{% codeblock lang:vim init.vim %}\nsource $HOME/.config/nvim/config/init.vimrc\nsource $HOME/.config/nvim/config/general.vimrc\nsource $HOME/.config/nvim/config/plugins.vimrc\nsource $HOME/.config/nvim/config/keys.vimrc\nsource $HOME/.config/nvim/config/line.vimrc\n{% endcodeblock %}\n\nDoesn't that make a whole lot more sense?\n\nNow, I'm not saying you should organize yours like mine. Maybe you can come up with something much better than this. In fact, I wouldn't be surprised if you did! But for what it's worth, here's what's in each of these configuration files:\n\n- `init.vimrc` holds my `vim-plug` ([my favorite plugin manager](https://github.com/junegunn/vim-plug)) section, which initializes all my other plugins.\n- `general.vimrc` holds a bunch of general settings which didn't fit in the other categories.\n- `plugins.vimrc` holds all my plugin-specific settings.\n- `keys.vimrc` holds all my custom key-bindings.\n- `line.vimrc` holds my statusline configuration.\n\nIn conclusion, sorry for this maybe somewhat ranting post. It's just that I keep seeing these enormous vim config files everywhere and I just don't get it. I mean, hey, whatever works for you of course, but.. Well, my way is better! ;-)\n\nOh, and just in case you're interested in the content of my vim config files, [feel free to have a look](https://github.com/greg-js/dotfiles/tree/master/.config/nvim).\n","source":"_posts/do-yourself-a-favor-and-modularize-your-vimrc-init-vim.md","raw":"title: Do yourself a favor and modularize your .vimrc/init.vim\ndate: 2016-01-08 15:31:26\ncategories: vim\ntags:\n  - neovim\n  - style\n  - dotfiles\n---\n\nI spend quite a bit of time reading various blogs and forums frequented by vim/neovim users. Of course the topic of the `.vimrc` (or `init.vim` [if you've switched to the new neovim style](/vim/2015/no-more-nvimrc-neovim-folder-now-at-config-nvim/)) file comes up all the time in such circles and I've learned a huge deal from looking at (and stealing parts of) other people's configuration files.\n\n{% asset_img tools.jpg Organized tools %}\n\nThat said, I am often baffled by the lack of organization in people's config files. More often than not it's a total mess, but even when the file has been carefully commented and organized, it's almost always **just one file**.\n\n<!-- more -->\n\nIt's actually even worse than that. I often see people *boasting* about how many lines their `.vimrc`/`init.vim` has, as if it that's somehow a sign of how advanced their setup is. But why? Modularization is not only everywhere, it is universally accepted as a very good thing, so why is it so rare in vim configs?\n\nMind you, my own setup isn't quite the shining example of impeccable organization I would like it to be. Mine too is the result of years-long piecemeal expansion, of adding something here, copy-pasting something there, tweaking something elsewhere. But at least mine isn't a gigantic file with key bindings, plugin initializations, color schemes, UI settings and what not, all mixed in with one another!\n\nMost of us probably tweak our vim config files once every couple of weeks and when that happens, you'll be so glad you've taken taken ten minutes out of your busy schedule to split up your `.vimrc`/`init.vim` into some logical categories. As an example, this is what mine looks like:\n\n{% codeblock lang:vim init.vim %}\nsource $HOME/.config/nvim/config/init.vimrc\nsource $HOME/.config/nvim/config/general.vimrc\nsource $HOME/.config/nvim/config/plugins.vimrc\nsource $HOME/.config/nvim/config/keys.vimrc\nsource $HOME/.config/nvim/config/line.vimrc\n{% endcodeblock %}\n\nDoesn't that make a whole lot more sense?\n\nNow, I'm not saying you should organize yours like mine. Maybe you can come up with something much better than this. In fact, I wouldn't be surprised if you did! But for what it's worth, here's what's in each of these configuration files:\n\n- `init.vimrc` holds my `vim-plug` ([my favorite plugin manager](https://github.com/junegunn/vim-plug)) section, which initializes all my other plugins.\n- `general.vimrc` holds a bunch of general settings which didn't fit in the other categories.\n- `plugins.vimrc` holds all my plugin-specific settings.\n- `keys.vimrc` holds all my custom key-bindings.\n- `line.vimrc` holds my statusline configuration.\n\nIn conclusion, sorry for this maybe somewhat ranting post. It's just that I keep seeing these enormous vim config files everywhere and I just don't get it. I mean, hey, whatever works for you of course, but.. Well, my way is better! ;-)\n\nOh, and just in case you're interested in the content of my vim config files, [feel free to have a look](https://github.com/greg-js/dotfiles/tree/master/.config/nvim).\n","slug":"do-yourself-a-favor-and-modularize-your-vimrc-init-vim","published":1,"updated":"2016-01-08T16:19:19.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk2d000qknz9wxhi48j4","content":"<p>I spend quite a bit of time reading various blogs and forums frequented by vim/neovim users. Of course the topic of the <code>.vimrc</code> (or <code>init.vim</code> <a href=\"/vim/2015/no-more-nvimrc-neovim-folder-now-at-config-nvim/\">if you’ve switched to the new neovim style</a>) file comes up all the time in such circles and I’ve learned a huge deal from looking at (and stealing parts of) other people’s configuration files.</p>\n<img src=\"/vim/2016/do-yourself-a-favor-and-modularize-your-vimrc-init-vim/tools.jpg\" alt=\"Organized tools\" title=\"Organized tools\">\n<p>That said, I am often baffled by the lack of organization in people’s config files. More often than not it’s a total mess, but even when the file has been carefully commented and organized, it’s almost always <strong>just one file</strong>.</p>\n<a id=\"more\"></a>\n<p>It’s actually even worse than that. I often see people <em>boasting</em> about how many lines their <code>.vimrc</code>/<code>init.vim</code> has, as if it that’s somehow a sign of how advanced their setup is. But why? Modularization is not only everywhere, it is universally accepted as a very good thing, so why is it so rare in vim configs?</p>\n<p>Mind you, my own setup isn’t quite the shining example of impeccable organization I would like it to be. Mine too is the result of years-long piecemeal expansion, of adding something here, copy-pasting something there, tweaking something elsewhere. But at least mine isn’t a gigantic file with key bindings, plugin initializations, color schemes, UI settings and what not, all mixed in with one another!</p>\n<p>Most of us probably tweak our vim config files once every couple of weeks and when that happens, you’ll be so glad you’ve taken taken ten minutes out of your busy schedule to split up your <code>.vimrc</code>/<code>init.vim</code> into some logical categories. As an example, this is what mine looks like:</p>\n<figure class=\"highlight vim\"><figcaption><span>init.vim</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">source</span> $HOME/.config/nvim/config/init.vimrc</div><div class=\"line\"><span class=\"keyword\">source</span> $HOME/.config/nvim/config/general.vimrc</div><div class=\"line\"><span class=\"keyword\">source</span> $HOME/.config/nvim/config/plugins.vimrc</div><div class=\"line\"><span class=\"keyword\">source</span> $HOME/.config/nvim/config/<span class=\"built_in\">keys</span>.vimrc</div><div class=\"line\"><span class=\"keyword\">source</span> $HOME/.config/nvim/config/<span class=\"built_in\">line</span>.vimrc</div></pre></td></tr></table></figure>\n<p>Doesn’t that make a whole lot more sense?</p>\n<p>Now, I’m not saying you should organize yours like mine. Maybe you can come up with something much better than this. In fact, I wouldn’t be surprised if you did! But for what it’s worth, here’s what’s in each of these configuration files:</p>\n<ul>\n<li><code>init.vimrc</code> holds my <code>vim-plug</code> (<a href=\"https://github.com/junegunn/vim-plug\" target=\"_blank\" rel=\"external\">my favorite plugin manager</a>) section, which initializes all my other plugins.</li>\n<li><code>general.vimrc</code> holds a bunch of general settings which didn’t fit in the other categories.</li>\n<li><code>plugins.vimrc</code> holds all my plugin-specific settings.</li>\n<li><code>keys.vimrc</code> holds all my custom key-bindings.</li>\n<li><code>line.vimrc</code> holds my statusline configuration.</li>\n</ul>\n<p>In conclusion, sorry for this maybe somewhat ranting post. It’s just that I keep seeing these enormous vim config files everywhere and I just don’t get it. I mean, hey, whatever works for you of course, but.. Well, my way is better! ;-)</p>\n<p>Oh, and just in case you’re interested in the content of my vim config files, <a href=\"https://github.com/greg-js/dotfiles/tree/master/.config/nvim\" target=\"_blank\" rel=\"external\">feel free to have a look</a>.</p>","excerpt":"<p>I spend quite a bit of time reading various blogs and forums frequented by vim/neovim users. Of course the topic of the <code>.vimrc</code> (or <code>init.vim</code> <a href=\"/vim/2015/no-more-nvimrc-neovim-folder-now-at-config-nvim/\">if you’ve switched to the new neovim style</a>) file comes up all the time in such circles and I’ve learned a huge deal from looking at (and stealing parts of) other people’s configuration files.</p>\n<img src=\"/vim/2016/do-yourself-a-favor-and-modularize-your-vimrc-init-vim/tools.jpg\" alt=\"Organized tools\" title=\"Organized tools\">\n<p>That said, I am often baffled by the lack of organization in people’s config files. More often than not it’s a total mess, but even when the file has been carefully commented and organized, it’s almost always <strong>just one file</strong>.</p>","more":"<p>It’s actually even worse than that. I often see people <em>boasting</em> about how many lines their <code>.vimrc</code>/<code>init.vim</code> has, as if it that’s somehow a sign of how advanced their setup is. But why? Modularization is not only everywhere, it is universally accepted as a very good thing, so why is it so rare in vim configs?</p>\n<p>Mind you, my own setup isn’t quite the shining example of impeccable organization I would like it to be. Mine too is the result of years-long piecemeal expansion, of adding something here, copy-pasting something there, tweaking something elsewhere. But at least mine isn’t a gigantic file with key bindings, plugin initializations, color schemes, UI settings and what not, all mixed in with one another!</p>\n<p>Most of us probably tweak our vim config files once every couple of weeks and when that happens, you’ll be so glad you’ve taken taken ten minutes out of your busy schedule to split up your <code>.vimrc</code>/<code>init.vim</code> into some logical categories. As an example, this is what mine looks like:</p>\n<figure class=\"highlight vim\"><figcaption><span>init.vim</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">source</span> $HOME/.config/nvim/config/init.vimrc</div><div class=\"line\"><span class=\"keyword\">source</span> $HOME/.config/nvim/config/general.vimrc</div><div class=\"line\"><span class=\"keyword\">source</span> $HOME/.config/nvim/config/plugins.vimrc</div><div class=\"line\"><span class=\"keyword\">source</span> $HOME/.config/nvim/config/<span class=\"built_in\">keys</span>.vimrc</div><div class=\"line\"><span class=\"keyword\">source</span> $HOME/.config/nvim/config/<span class=\"built_in\">line</span>.vimrc</div></pre></td></tr></table></figure>\n<p>Doesn’t that make a whole lot more sense?</p>\n<p>Now, I’m not saying you should organize yours like mine. Maybe you can come up with something much better than this. In fact, I wouldn’t be surprised if you did! But for what it’s worth, here’s what’s in each of these configuration files:</p>\n<ul>\n<li><code>init.vimrc</code> holds my <code>vim-plug</code> (<a href=\"https://github.com/junegunn/vim-plug\">my favorite plugin manager</a>) section, which initializes all my other plugins.</li>\n<li><code>general.vimrc</code> holds a bunch of general settings which didn’t fit in the other categories.</li>\n<li><code>plugins.vimrc</code> holds all my plugin-specific settings.</li>\n<li><code>keys.vimrc</code> holds all my custom key-bindings.</li>\n<li><code>line.vimrc</code> holds my statusline configuration.</li>\n</ul>\n<p>In conclusion, sorry for this maybe somewhat ranting post. It’s just that I keep seeing these enormous vim config files everywhere and I just don’t get it. I mean, hey, whatever works for you of course, but.. Well, my way is better! ;-)</p>\n<p>Oh, and just in case you’re interested in the content of my vim config files, <a href=\"https://github.com/greg-js/dotfiles/tree/master/.config/nvim\">feel free to have a look</a>.</p>"},{"title":"End IIFEs in })(); or }()); ?","date":"2015-12-09T18:16:32.000Z","_content":"\nBefore I deleted my previous blog, I took a look at my pageview statistics and it turned out that the post that got by far the most views was one about stylistic differences in immediately invoked function expressions (IIFEs). That means that quite a few people are still a little confused about this whole thing, so allow me to clarify it once more.\n\nAn IIFE is an extremely common JavaScript design pattern. It's how you create modules, define private variables and methods and safeguard the global namespace from pollution. Here's what an IIFE looks like:\n\n{% codeblock lang:javascript %}\n(function IIFE() {\n  // ...\n}());\n{% endcodeblock %}\n\nIf you've done any work involving JavaScript relatively recently, you've most likely seen these all over the place. The subject of this post though is the fact that an IIFE can also look like this (note the last line):\n\n{% codeblock lang:javascript %}\n(function IIFE() {\n  // ...\n})();\n{% endcodeblock %}\n\n<!-- more -->\n\nAn IIFE is literally an _immediately invoked function expression_. Or, in other words, it's basically short for this:\n\n{% codeblock lang:javascript %}\nfunction IIFE() {\n  // ...\n}\nIIFE();\n{% endcodeblock %}\n\nUnfortunately, the JavaScript engine doesn't allow immediate execution of a function expression:\n\n{% codeblock lang:javascript %}\nfunction IIFE() {\n  // ...\n}();\n// --> SyntaxError\n{% endcodeblock %}\n\nHence, it gets wrapped in parentheses. It doesn't matter whether you wrap the function expression and then invoke it, or wrap the function expression along with its evocation. The result is exactly the same:\n\n{% codeblock lang:javascript %}\n(function IIFE() {\n  // ...\n}());\n\n// is equivalent to\n\n(function IIFE() {\n  // ...\n})();\n{% endcodeblock %}\n\nSo, which one should you use? Being (almost) functionally equivalent (for one potential difference which will most likely not affect you, read the third post [in this github thread](https://github.com/airbnb/javascript/issues/21)), the choice is a stylistic one. Here are a few arguments for one or the other:\n\n- The AirBnB style guide [recommends outside](https://github.com/airbnb/javascript#7.2).\n- ESLint prescribes the same [by default](http://eslint.org/docs/rules/wrap-iife.html).\n- JSLint [recommends \"inside\" invocation](https://jslinterrors.com/do-not-wrap-function-literals-in-parens), reasoning that doing otherwise produces potentially confusing code.\n- In typically crockfordian fashion, JSLint's Douglas Crockford denigrates outside invocation [using colorful language](https://www.youtube.com/watch?v=eGArABpLy0k).\n\nIt _seems_ that the majority of developers (and most large project, among which Angular and jQuery) prefer outside invocation nowadays, but a lot of people still use the alternative.\n\nSo, again, which one should you use? Whichever you prefer. There are some good arguments on both sides, but in the end one is not objectively better than the other, so take your pick! Me, I put them outside. Dog balls be damned!\n","source":"_posts/end-iifes-in-or.md","raw":"title: 'End IIFEs in })(); or }()); ?'\ndate: 2015-12-09 18:16:32\ncategories: javascript\ntags:\n- js\n- style\n- crockford\n---\n\nBefore I deleted my previous blog, I took a look at my pageview statistics and it turned out that the post that got by far the most views was one about stylistic differences in immediately invoked function expressions (IIFEs). That means that quite a few people are still a little confused about this whole thing, so allow me to clarify it once more.\n\nAn IIFE is an extremely common JavaScript design pattern. It's how you create modules, define private variables and methods and safeguard the global namespace from pollution. Here's what an IIFE looks like:\n\n{% codeblock lang:javascript %}\n(function IIFE() {\n  // ...\n}());\n{% endcodeblock %}\n\nIf you've done any work involving JavaScript relatively recently, you've most likely seen these all over the place. The subject of this post though is the fact that an IIFE can also look like this (note the last line):\n\n{% codeblock lang:javascript %}\n(function IIFE() {\n  // ...\n})();\n{% endcodeblock %}\n\n<!-- more -->\n\nAn IIFE is literally an _immediately invoked function expression_. Or, in other words, it's basically short for this:\n\n{% codeblock lang:javascript %}\nfunction IIFE() {\n  // ...\n}\nIIFE();\n{% endcodeblock %}\n\nUnfortunately, the JavaScript engine doesn't allow immediate execution of a function expression:\n\n{% codeblock lang:javascript %}\nfunction IIFE() {\n  // ...\n}();\n// --> SyntaxError\n{% endcodeblock %}\n\nHence, it gets wrapped in parentheses. It doesn't matter whether you wrap the function expression and then invoke it, or wrap the function expression along with its evocation. The result is exactly the same:\n\n{% codeblock lang:javascript %}\n(function IIFE() {\n  // ...\n}());\n\n// is equivalent to\n\n(function IIFE() {\n  // ...\n})();\n{% endcodeblock %}\n\nSo, which one should you use? Being (almost) functionally equivalent (for one potential difference which will most likely not affect you, read the third post [in this github thread](https://github.com/airbnb/javascript/issues/21)), the choice is a stylistic one. Here are a few arguments for one or the other:\n\n- The AirBnB style guide [recommends outside](https://github.com/airbnb/javascript#7.2).\n- ESLint prescribes the same [by default](http://eslint.org/docs/rules/wrap-iife.html).\n- JSLint [recommends \"inside\" invocation](https://jslinterrors.com/do-not-wrap-function-literals-in-parens), reasoning that doing otherwise produces potentially confusing code.\n- In typically crockfordian fashion, JSLint's Douglas Crockford denigrates outside invocation [using colorful language](https://www.youtube.com/watch?v=eGArABpLy0k).\n\nIt _seems_ that the majority of developers (and most large project, among which Angular and jQuery) prefer outside invocation nowadays, but a lot of people still use the alternative.\n\nSo, again, which one should you use? Whichever you prefer. There are some good arguments on both sides, but in the end one is not objectively better than the other, so take your pick! Me, I put them outside. Dog balls be damned!\n","slug":"end-iifes-in-or","published":1,"updated":"2015-12-09T18:58:08.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk2f000uknz96520o3sx","content":"<p>Before I deleted my previous blog, I took a look at my pageview statistics and it turned out that the post that got by far the most views was one about stylistic differences in immediately invoked function expressions (IIFEs). That means that quite a few people are still a little confused about this whole thing, so allow me to clarify it once more.</p>\n<p>An IIFE is an extremely common JavaScript design pattern. It’s how you create modules, define private variables and methods and safeguard the global namespace from pollution. Here’s what an IIFE looks like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>If you’ve done any work involving JavaScript relatively recently, you’ve most likely seen these all over the place. The subject of this post though is the fact that an IIFE can also look like this (note the last line):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>An IIFE is literally an <em>immediately invoked function expression</em>. Or, in other words, it’s basically short for this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\">IIFE();</div></pre></td></tr></table></figure>\n<p>Unfortunately, the JavaScript engine doesn’t allow immediate execution of a function expression:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;();</div><div class=\"line\"><span class=\"comment\">// --&gt; SyntaxError</span></div></pre></td></tr></table></figure>\n<p>Hence, it gets wrapped in parentheses. It doesn’t matter whether you wrap the function expression and then invoke it, or wrap the function expression along with its evocation. The result is exactly the same:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// is equivalent to</span></div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>So, which one should you use? Being (almost) functionally equivalent (for one potential difference which will most likely not affect you, read the third post <a href=\"https://github.com/airbnb/javascript/issues/21\" target=\"_blank\" rel=\"external\">in this github thread</a>), the choice is a stylistic one. Here are a few arguments for one or the other:</p>\n<ul>\n<li>The AirBnB style guide <a href=\"https://github.com/airbnb/javascript#7.2\" target=\"_blank\" rel=\"external\">recommends outside</a>.</li>\n<li>ESLint prescribes the same <a href=\"http://eslint.org/docs/rules/wrap-iife.html\" target=\"_blank\" rel=\"external\">by default</a>.</li>\n<li>JSLint <a href=\"https://jslinterrors.com/do-not-wrap-function-literals-in-parens\" target=\"_blank\" rel=\"external\">recommends “inside” invocation</a>, reasoning that doing otherwise produces potentially confusing code.</li>\n<li>In typically crockfordian fashion, JSLint’s Douglas Crockford denigrates outside invocation <a href=\"https://www.youtube.com/watch?v=eGArABpLy0k\" target=\"_blank\" rel=\"external\">using colorful language</a>.</li>\n</ul>\n<p>It <em>seems</em> that the majority of developers (and most large project, among which Angular and jQuery) prefer outside invocation nowadays, but a lot of people still use the alternative.</p>\n<p>So, again, which one should you use? Whichever you prefer. There are some good arguments on both sides, but in the end one is not objectively better than the other, so take your pick! Me, I put them outside. Dog balls be damned!</p>","excerpt":"<p>Before I deleted my previous blog, I took a look at my pageview statistics and it turned out that the post that got by far the most views was one about stylistic differences in immediately invoked function expressions (IIFEs). That means that quite a few people are still a little confused about this whole thing, so allow me to clarify it once more.</p>\n<p>An IIFE is an extremely common JavaScript design pattern. It’s how you create modules, define private variables and methods and safeguard the global namespace from pollution. Here’s what an IIFE looks like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>If you’ve done any work involving JavaScript relatively recently, you’ve most likely seen these all over the place. The subject of this post though is the fact that an IIFE can also look like this (note the last line):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>","more":"<p>An IIFE is literally an <em>immediately invoked function expression</em>. Or, in other words, it’s basically short for this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\">IIFE();</div></pre></td></tr></table></figure>\n<p>Unfortunately, the JavaScript engine doesn’t allow immediate execution of a function expression:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;();</div><div class=\"line\"><span class=\"comment\">// --&gt; SyntaxError</span></div></pre></td></tr></table></figure>\n<p>Hence, it gets wrapped in parentheses. It doesn’t matter whether you wrap the function expression and then invoke it, or wrap the function expression along with its evocation. The result is exactly the same:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// is equivalent to</span></div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IIFE</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>So, which one should you use? Being (almost) functionally equivalent (for one potential difference which will most likely not affect you, read the third post <a href=\"https://github.com/airbnb/javascript/issues/21\">in this github thread</a>), the choice is a stylistic one. Here are a few arguments for one or the other:</p>\n<ul>\n<li>The AirBnB style guide <a href=\"https://github.com/airbnb/javascript#7.2\">recommends outside</a>.</li>\n<li>ESLint prescribes the same <a href=\"http://eslint.org/docs/rules/wrap-iife.html\">by default</a>.</li>\n<li>JSLint <a href=\"https://jslinterrors.com/do-not-wrap-function-literals-in-parens\">recommends “inside” invocation</a>, reasoning that doing otherwise produces potentially confusing code.</li>\n<li>In typically crockfordian fashion, JSLint’s Douglas Crockford denigrates outside invocation <a href=\"https://www.youtube.com/watch?v=eGArABpLy0k\">using colorful language</a>.</li>\n</ul>\n<p>It <em>seems</em> that the majority of developers (and most large project, among which Angular and jQuery) prefer outside invocation nowadays, but a lot of people still use the alternative.</p>\n<p>So, again, which one should you use? Whichever you prefer. There are some good arguments on both sides, but in the end one is not objectively better than the other, so take your pick! Me, I put them outside. Dog balls be damned!</p>"},{"title":"Fixing the reappearing folders problem in your home directory","date":"2015-10-28T01:23:42.000Z","_content":"\nWhen I saw someone on Reddit asking about a series of folders constantly reappearing in their home directory, I replied with a quick [link to the relevant Arch wiki article](https://wiki.archlinux.org/index.php/Xdg_user_directories).\n\nJudging from the amount of upvotes that got, and from my own struggles with this annoying problem a few months back, I guess this has quite a few people dumbfounded. So allow me to explain in some more detail what exactly the problem is, and how to fix it.\n\n{% asset_img my-home-dir.png My fixed home dir %}\n\n<!-- more -->\n\n## The problem with the *special* directories\n\nIf you use Linux, chances are that your `$HOME` directory contains a couple of folders: `Desktop`, `Documents`, `Downloads`, `Music`, `Pictures`, `Public`, `Videos` and possibly `Templates` (or translations of these). These directories were there when you first installed your OS, they've got pretty little custom icons in GUI file managers, and they're set as default destinations for certain actions.\n\nThere is a problem though. What if you don't want these folders in your home dir? Or what if you want to rename them? What if you just want to make them all lower-case? Well, if you've ever tried to naively change these dirs, you probably discovered that they will reappear at some point in the future.\n\nNot only do they reappear when you reboot your machine, but they also reappear when you launch certain programs (Firefox for example). Now this is not good. It's your machine, your home directory! Who are *they* to tell you what folders you should keep and how to name? What is this, Russia under the Bolsheviks?!\n\nIf you just want to fix the issue, [skip to below](#How_to_manage_your_user_dirs). If you feel like reading just a little bit more, check out the bad solution below to learn what not to do and why.\n\n## A bad solution\n\nLet's say you want to remove some of the *special* folders altogether - the `Desktop` for example, since it's pretty much useless if you use a window manager like i3. As a Linux person, your first instinct might be to write a tiny script to delete the folder. Then simply call the script using a crontab or systemd timer at regular intervals.\n\nWell, this will work - in fact I did this for a while on my own system for a few of the systems - but it's not ideal. Unless you set your script up to run on a very regular basis, you'll still see the folders from time to time. And forget about it if you just wanted to rename the folders!\n\nSo why is this happening? Well, it turns out that these special user directories are your so-called [XDG user dirs](http://freedesktop.org/wiki/Software/xdg-user-dirs/). Every time you login (or every time they are needed), your OS will create them automatically for you. How nice.\n\n## How to manage your user dirs\n\nSo that's more than enough introduction, how do you fix it? Well, first install the `xdg-user-dirs` package if you don't have it already.\n\nWhen you've got that installed, run `xdg-user-dir DESKTOP`. That should return whatever is set as the *special* desktop dir on your system. From here on out you have a few options.\n\nIf you want to rename some or all of the directories, run `xdg-user-dirs-update`. This should create the file `~/.config/user-dirs.dirs` on your system. Simply open that file and change the paths. Here's a screenshot of my own XDG config file on my home system. Note that I added some extra dirs, because why the hell not.\n\n{% asset_img user-dirs.dirs.png My /etc/xdg/user-dirs.dirs file %}\n\nAnd finally, if you want to get rid of these folders entirely, make sure you do *not* have a `~/.config/user-dirs.dirs` file and change `enabled=True` to `enabled=False` in `/etc/xdg/user-dirs.conf`.\n","source":"_posts/fixing-the-reappearing-folders-problem-in-your-home-directory.md","raw":"title: Fixing the reappearing folders problem in your home directory\ncategories: linux\ntags:\n  - linux\n  - arch linux\ndate: 2015-10-28 01:23:42\n---\n\nWhen I saw someone on Reddit asking about a series of folders constantly reappearing in their home directory, I replied with a quick [link to the relevant Arch wiki article](https://wiki.archlinux.org/index.php/Xdg_user_directories).\n\nJudging from the amount of upvotes that got, and from my own struggles with this annoying problem a few months back, I guess this has quite a few people dumbfounded. So allow me to explain in some more detail what exactly the problem is, and how to fix it.\n\n{% asset_img my-home-dir.png My fixed home dir %}\n\n<!-- more -->\n\n## The problem with the *special* directories\n\nIf you use Linux, chances are that your `$HOME` directory contains a couple of folders: `Desktop`, `Documents`, `Downloads`, `Music`, `Pictures`, `Public`, `Videos` and possibly `Templates` (or translations of these). These directories were there when you first installed your OS, they've got pretty little custom icons in GUI file managers, and they're set as default destinations for certain actions.\n\nThere is a problem though. What if you don't want these folders in your home dir? Or what if you want to rename them? What if you just want to make them all lower-case? Well, if you've ever tried to naively change these dirs, you probably discovered that they will reappear at some point in the future.\n\nNot only do they reappear when you reboot your machine, but they also reappear when you launch certain programs (Firefox for example). Now this is not good. It's your machine, your home directory! Who are *they* to tell you what folders you should keep and how to name? What is this, Russia under the Bolsheviks?!\n\nIf you just want to fix the issue, [skip to below](#How_to_manage_your_user_dirs). If you feel like reading just a little bit more, check out the bad solution below to learn what not to do and why.\n\n## A bad solution\n\nLet's say you want to remove some of the *special* folders altogether - the `Desktop` for example, since it's pretty much useless if you use a window manager like i3. As a Linux person, your first instinct might be to write a tiny script to delete the folder. Then simply call the script using a crontab or systemd timer at regular intervals.\n\nWell, this will work - in fact I did this for a while on my own system for a few of the systems - but it's not ideal. Unless you set your script up to run on a very regular basis, you'll still see the folders from time to time. And forget about it if you just wanted to rename the folders!\n\nSo why is this happening? Well, it turns out that these special user directories are your so-called [XDG user dirs](http://freedesktop.org/wiki/Software/xdg-user-dirs/). Every time you login (or every time they are needed), your OS will create them automatically for you. How nice.\n\n## How to manage your user dirs\n\nSo that's more than enough introduction, how do you fix it? Well, first install the `xdg-user-dirs` package if you don't have it already.\n\nWhen you've got that installed, run `xdg-user-dir DESKTOP`. That should return whatever is set as the *special* desktop dir on your system. From here on out you have a few options.\n\nIf you want to rename some or all of the directories, run `xdg-user-dirs-update`. This should create the file `~/.config/user-dirs.dirs` on your system. Simply open that file and change the paths. Here's a screenshot of my own XDG config file on my home system. Note that I added some extra dirs, because why the hell not.\n\n{% asset_img user-dirs.dirs.png My /etc/xdg/user-dirs.dirs file %}\n\nAnd finally, if you want to get rid of these folders entirely, make sure you do *not* have a `~/.config/user-dirs.dirs` file and change `enabled=True` to `enabled=False` in `/etc/xdg/user-dirs.conf`.\n","slug":"fixing-the-reappearing-folders-problem-in-your-home-directory","published":1,"updated":"2015-12-18T18:14:18.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk2h000xknz9emjh83rd","content":"<p>When I saw someone on Reddit asking about a series of folders constantly reappearing in their home directory, I replied with a quick <a href=\"https://wiki.archlinux.org/index.php/Xdg_user_directories\" target=\"_blank\" rel=\"external\">link to the relevant Arch wiki article</a>.</p>\n<p>Judging from the amount of upvotes that got, and from my own struggles with this annoying problem a few months back, I guess this has quite a few people dumbfounded. So allow me to explain in some more detail what exactly the problem is, and how to fix it.</p>\n<img src=\"/linux/2015/fixing-the-reappearing-folders-problem-in-your-home-directory/my-home-dir.png\" alt=\"My fixed home dir\" title=\"My fixed home dir\">\n<a id=\"more\"></a>\n<h2 id=\"The-problem-with-the-special-directories\"><a href=\"#The-problem-with-the-special-directories\" class=\"headerlink\" title=\"The problem with the special directories\"></a>The problem with the <em>special</em> directories</h2><p>If you use Linux, chances are that your <code>$HOME</code> directory contains a couple of folders: <code>Desktop</code>, <code>Documents</code>, <code>Downloads</code>, <code>Music</code>, <code>Pictures</code>, <code>Public</code>, <code>Videos</code> and possibly <code>Templates</code> (or translations of these). These directories were there when you first installed your OS, they’ve got pretty little custom icons in GUI file managers, and they’re set as default destinations for certain actions.</p>\n<p>There is a problem though. What if you don’t want these folders in your home dir? Or what if you want to rename them? What if you just want to make them all lower-case? Well, if you’ve ever tried to naively change these dirs, you probably discovered that they will reappear at some point in the future.</p>\n<p>Not only do they reappear when you reboot your machine, but they also reappear when you launch certain programs (Firefox for example). Now this is not good. It’s your machine, your home directory! Who are <em>they</em> to tell you what folders you should keep and how to name? What is this, Russia under the Bolsheviks?!</p>\n<p>If you just want to fix the issue, <a href=\"#How_to_manage_your_user_dirs\">skip to below</a>. If you feel like reading just a little bit more, check out the bad solution below to learn what not to do and why.</p>\n<h2 id=\"A-bad-solution\"><a href=\"#A-bad-solution\" class=\"headerlink\" title=\"A bad solution\"></a>A bad solution</h2><p>Let’s say you want to remove some of the <em>special</em> folders altogether - the <code>Desktop</code> for example, since it’s pretty much useless if you use a window manager like i3. As a Linux person, your first instinct might be to write a tiny script to delete the folder. Then simply call the script using a crontab or systemd timer at regular intervals.</p>\n<p>Well, this will work - in fact I did this for a while on my own system for a few of the systems - but it’s not ideal. Unless you set your script up to run on a very regular basis, you’ll still see the folders from time to time. And forget about it if you just wanted to rename the folders!</p>\n<p>So why is this happening? Well, it turns out that these special user directories are your so-called <a href=\"http://freedesktop.org/wiki/Software/xdg-user-dirs/\" target=\"_blank\" rel=\"external\">XDG user dirs</a>. Every time you login (or every time they are needed), your OS will create them automatically for you. How nice.</p>\n<h2 id=\"How-to-manage-your-user-dirs\"><a href=\"#How-to-manage-your-user-dirs\" class=\"headerlink\" title=\"How to manage your user dirs\"></a>How to manage your user dirs</h2><p>So that’s more than enough introduction, how do you fix it? Well, first install the <code>xdg-user-dirs</code> package if you don’t have it already.</p>\n<p>When you’ve got that installed, run <code>xdg-user-dir DESKTOP</code>. That should return whatever is set as the <em>special</em> desktop dir on your system. From here on out you have a few options.</p>\n<p>If you want to rename some or all of the directories, run <code>xdg-user-dirs-update</code>. This should create the file <code>~/.config/user-dirs.dirs</code> on your system. Simply open that file and change the paths. Here’s a screenshot of my own XDG config file on my home system. Note that I added some extra dirs, because why the hell not.</p>\n<img src=\"/linux/2015/fixing-the-reappearing-folders-problem-in-your-home-directory/user-dirs.dirs.png\" alt=\"My /etc/xdg/user-dirs.dirs file\" title=\"My /etc/xdg/user-dirs.dirs file\">\n<p>And finally, if you want to get rid of these folders entirely, make sure you do <em>not</em> have a <code>~/.config/user-dirs.dirs</code> file and change <code>enabled=True</code> to <code>enabled=False</code> in <code>/etc/xdg/user-dirs.conf</code>.</p>","excerpt":"<p>When I saw someone on Reddit asking about a series of folders constantly reappearing in their home directory, I replied with a quick <a href=\"https://wiki.archlinux.org/index.php/Xdg_user_directories\">link to the relevant Arch wiki article</a>.</p>\n<p>Judging from the amount of upvotes that got, and from my own struggles with this annoying problem a few months back, I guess this has quite a few people dumbfounded. So allow me to explain in some more detail what exactly the problem is, and how to fix it.</p>\n<img src=\"/linux/2015/fixing-the-reappearing-folders-problem-in-your-home-directory/my-home-dir.png\" alt=\"My fixed home dir\" title=\"My fixed home dir\">","more":"<h2 id=\"The-problem-with-the-special-directories\"><a href=\"#The-problem-with-the-special-directories\" class=\"headerlink\" title=\"The problem with the special directories\"></a>The problem with the <em>special</em> directories</h2><p>If you use Linux, chances are that your <code>$HOME</code> directory contains a couple of folders: <code>Desktop</code>, <code>Documents</code>, <code>Downloads</code>, <code>Music</code>, <code>Pictures</code>, <code>Public</code>, <code>Videos</code> and possibly <code>Templates</code> (or translations of these). These directories were there when you first installed your OS, they’ve got pretty little custom icons in GUI file managers, and they’re set as default destinations for certain actions.</p>\n<p>There is a problem though. What if you don’t want these folders in your home dir? Or what if you want to rename them? What if you just want to make them all lower-case? Well, if you’ve ever tried to naively change these dirs, you probably discovered that they will reappear at some point in the future.</p>\n<p>Not only do they reappear when you reboot your machine, but they also reappear when you launch certain programs (Firefox for example). Now this is not good. It’s your machine, your home directory! Who are <em>they</em> to tell you what folders you should keep and how to name? What is this, Russia under the Bolsheviks?!</p>\n<p>If you just want to fix the issue, <a href=\"#How_to_manage_your_user_dirs\">skip to below</a>. If you feel like reading just a little bit more, check out the bad solution below to learn what not to do and why.</p>\n<h2 id=\"A-bad-solution\"><a href=\"#A-bad-solution\" class=\"headerlink\" title=\"A bad solution\"></a>A bad solution</h2><p>Let’s say you want to remove some of the <em>special</em> folders altogether - the <code>Desktop</code> for example, since it’s pretty much useless if you use a window manager like i3. As a Linux person, your first instinct might be to write a tiny script to delete the folder. Then simply call the script using a crontab or systemd timer at regular intervals.</p>\n<p>Well, this will work - in fact I did this for a while on my own system for a few of the systems - but it’s not ideal. Unless you set your script up to run on a very regular basis, you’ll still see the folders from time to time. And forget about it if you just wanted to rename the folders!</p>\n<p>So why is this happening? Well, it turns out that these special user directories are your so-called <a href=\"http://freedesktop.org/wiki/Software/xdg-user-dirs/\">XDG user dirs</a>. Every time you login (or every time they are needed), your OS will create them automatically for you. How nice.</p>\n<h2 id=\"How-to-manage-your-user-dirs\"><a href=\"#How-to-manage-your-user-dirs\" class=\"headerlink\" title=\"How to manage your user dirs\"></a>How to manage your user dirs</h2><p>So that’s more than enough introduction, how do you fix it? Well, first install the <code>xdg-user-dirs</code> package if you don’t have it already.</p>\n<p>When you’ve got that installed, run <code>xdg-user-dir DESKTOP</code>. That should return whatever is set as the <em>special</em> desktop dir on your system. From here on out you have a few options.</p>\n<p>If you want to rename some or all of the directories, run <code>xdg-user-dirs-update</code>. This should create the file <code>~/.config/user-dirs.dirs</code> on your system. Simply open that file and change the paths. Here’s a screenshot of my own XDG config file on my home system. Note that I added some extra dirs, because why the hell not.</p>\n<img src=\"/linux/2015/fixing-the-reappearing-folders-problem-in-your-home-directory/user-dirs.dirs.png\" alt=\"My /etc/xdg/user-dirs.dirs file\" title=\"My /etc/xdg/user-dirs.dirs file\">\n<p>And finally, if you want to get rid of these folders entirely, make sure you do <em>not</em> have a <code>~/.config/user-dirs.dirs</code> file and change <code>enabled=True</code> to <code>enabled=False</code> in <code>/etc/xdg/user-dirs.conf</code>.</p>"},{"title":"git undo","date":"2016-01-14T15:39:02.000Z","_content":"\nIn spite of the title of this post, there is no `git undo` command, but I bet many among us wish there was one (given that it could read our minds)! I for one keep having to look stuff up every time I screw up and have to undo something. Was it `reset`? `revert`? `checkout --`??\n\nLuckily, I found this [very handy article](https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things) in a book about git the other day. If you did a `git oops` and need to recover, go read the article! But just for my own (and perhaps your) future reference, here are (some of) the different undo commands collected in one small post (*dangerous* commands may result in losing code if used incorrectly):\n\n{% codeblock lang:bash line_number:false %}\n# to unstage a file:\ngit reset HEAD <file>\n# to undo changes and go back to the latest commit (dangerous!):\ngit checkout -- <file>\n# to add a file you forgot to stage to the previous commit:\ngit add <file> && git commit --amend\n# to go back x amount of commits (dangerous!):\ngit reset HEAD~<x>\n# to go back x amount of commits and create a new commit:\ngit revert HEAD~<x>\n{% endcodeblock %}\n\nDo read the article I linked above before messing with your git tree and `checkout` [this one](https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting/summary/) too for more information about the differences between `reset` and `revert`.\n","source":"_posts/git-undo.md","raw":"title: git undo\ndate: 2016-01-14 15:39:02\ncategories: linux\ntags:\n\t- git\n  - command line\n  - version control\n---\n\nIn spite of the title of this post, there is no `git undo` command, but I bet many among us wish there was one (given that it could read our minds)! I for one keep having to look stuff up every time I screw up and have to undo something. Was it `reset`? `revert`? `checkout --`??\n\nLuckily, I found this [very handy article](https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things) in a book about git the other day. If you did a `git oops` and need to recover, go read the article! But just for my own (and perhaps your) future reference, here are (some of) the different undo commands collected in one small post (*dangerous* commands may result in losing code if used incorrectly):\n\n{% codeblock lang:bash line_number:false %}\n# to unstage a file:\ngit reset HEAD <file>\n# to undo changes and go back to the latest commit (dangerous!):\ngit checkout -- <file>\n# to add a file you forgot to stage to the previous commit:\ngit add <file> && git commit --amend\n# to go back x amount of commits (dangerous!):\ngit reset HEAD~<x>\n# to go back x amount of commits and create a new commit:\ngit revert HEAD~<x>\n{% endcodeblock %}\n\nDo read the article I linked above before messing with your git tree and `checkout` [this one](https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting/summary/) too for more information about the differences between `reset` and `revert`.\n","slug":"git-undo","published":1,"updated":"2016-01-15T16:49:11.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk2j0012knz9ikxwho3l","content":"<p>In spite of the title of this post, there is no <code>git undo</code> command, but I bet many among us wish there was one (given that it could read our minds)! I for one keep having to look stuff up every time I screw up and have to undo something. Was it <code>reset</code>? <code>revert</code>? <code>checkout --</code>??</p>\n<p>Luckily, I found this <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things\" target=\"_blank\" rel=\"external\">very handy article</a> in a book about git the other day. If you did a <code>git oops</code> and need to recover, go read the article! But just for my own (and perhaps your) future reference, here are (some of) the different undo commands collected in one small post (<em>dangerous</em> commands may result in losing code if used incorrectly):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># to unstage a file:</span></div><div class=\"line\">git reset HEAD &lt;file&gt;</div><div class=\"line\"><span class=\"comment\"># to undo changes and go back to the latest commit (dangerous!):</span></div><div class=\"line\">git checkout -- &lt;file&gt;</div><div class=\"line\"><span class=\"comment\"># to add a file you forgot to stage to the previous commit:</span></div><div class=\"line\">git add &lt;file&gt; &amp;&amp; git commit --amend</div><div class=\"line\"><span class=\"comment\"># to go back x amount of commits (dangerous!):</span></div><div class=\"line\">git reset HEAD~&lt;x&gt;</div><div class=\"line\"><span class=\"comment\"># to go back x amount of commits and create a new commit:</span></div><div class=\"line\">git revert HEAD~&lt;x&gt;</div></pre></td></tr></table></figure>\n<p>Do read the article I linked above before messing with your git tree and <code>checkout</code> <a href=\"https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting/summary/\" target=\"_blank\" rel=\"external\">this one</a> too for more information about the differences between <code>reset</code> and <code>revert</code>.</p>","excerpt":"","more":"<p>In spite of the title of this post, there is no <code>git undo</code> command, but I bet many among us wish there was one (given that it could read our minds)! I for one keep having to look stuff up every time I screw up and have to undo something. Was it <code>reset</code>? <code>revert</code>? <code>checkout --</code>??</p>\n<p>Luckily, I found this <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things\">very handy article</a> in a book about git the other day. If you did a <code>git oops</code> and need to recover, go read the article! But just for my own (and perhaps your) future reference, here are (some of) the different undo commands collected in one small post (<em>dangerous</em> commands may result in losing code if used incorrectly):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># to unstage a file:</span></div><div class=\"line\">git reset HEAD &lt;file&gt;</div><div class=\"line\"><span class=\"comment\"># to undo changes and go back to the latest commit (dangerous!):</span></div><div class=\"line\">git checkout -- &lt;file&gt;</div><div class=\"line\"><span class=\"comment\"># to add a file you forgot to stage to the previous commit:</span></div><div class=\"line\">git add &lt;file&gt; &amp;&amp; git commit --amend</div><div class=\"line\"><span class=\"comment\"># to go back x amount of commits (dangerous!):</span></div><div class=\"line\">git reset HEAD~&lt;x&gt;</div><div class=\"line\"><span class=\"comment\"># to go back x amount of commits and create a new commit:</span></div><div class=\"line\">git revert HEAD~&lt;x&gt;</div></pre></td></tr></table></figure>\n<p>Do read the article I linked above before messing with your git tree and <code>checkout</code> <a href=\"https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting/summary/\">this one</a> too for more information about the differences between <code>reset</code> and <code>revert</code>.</p>"},{"title":"hexo-easy-edit 1.1.0: colors, drafts and dates","date":"2015-11-09T16:00:54.000Z","_content":"\n\nI just pushed an update to [my hexo plugin](http://gregjs.com/javascript/2015/i-wrote-a-hexo-plugin-hexo-easy-edit/). Changes:\n\n- Menu output now displays the title instead of the slug. Extra information like published status, date and folder has been added as well for convenience.\n- Output is now color coded.\n- Support added for filtering on before-date (`-b`, `--before`), after-date (`-a`, `--after`) and published status (`-d`, `--draft`).\n- Internals have been promisified for much easier reading :-)\n- Various little tweaks to make command line editing of your hexo blog posts more convenient.\n\n{% asset_img screen.png hexo-easy-edit 1.1.0 screenshot %}\n\nStill on my todo-list for this project:\n\n- Turn simple title regexing into fuzzy search.\n- Add a `remove` command.\n- Improve the `publish` command.\n","source":"_posts/hexo-easy-edit-1-1-0-colors-drafts-and-dates.md","raw":"title: 'hexo-easy-edit 1.1.0: colors, drafts and dates'\ncategories: javascript\ntags:\n  - hexo\n  - node\n  - open source\ndate: 2015-11-09 16:00:54\n---\n\n\nI just pushed an update to [my hexo plugin](http://gregjs.com/javascript/2015/i-wrote-a-hexo-plugin-hexo-easy-edit/). Changes:\n\n- Menu output now displays the title instead of the slug. Extra information like published status, date and folder has been added as well for convenience.\n- Output is now color coded.\n- Support added for filtering on before-date (`-b`, `--before`), after-date (`-a`, `--after`) and published status (`-d`, `--draft`).\n- Internals have been promisified for much easier reading :-)\n- Various little tweaks to make command line editing of your hexo blog posts more convenient.\n\n{% asset_img screen.png hexo-easy-edit 1.1.0 screenshot %}\n\nStill on my todo-list for this project:\n\n- Turn simple title regexing into fuzzy search.\n- Add a `remove` command.\n- Improve the `publish` command.\n","slug":"hexo-easy-edit-1-1-0-colors-drafts-and-dates","published":1,"updated":"2015-11-21T14:07:16.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk2p0015knz9hpd9q552","content":"<p>I just pushed an update to <a href=\"http://gregjs.com/javascript/2015/i-wrote-a-hexo-plugin-hexo-easy-edit/\" target=\"_blank\" rel=\"external\">my hexo plugin</a>. Changes:</p>\n<ul>\n<li>Menu output now displays the title instead of the slug. Extra information like published status, date and folder has been added as well for convenience.</li>\n<li>Output is now color coded.</li>\n<li>Support added for filtering on before-date (<code>-b</code>, <code>--before</code>), after-date (<code>-a</code>, <code>--after</code>) and published status (<code>-d</code>, <code>--draft</code>).</li>\n<li>Internals have been promisified for much easier reading :-)</li>\n<li>Various little tweaks to make command line editing of your hexo blog posts more convenient.</li>\n</ul>\n<img src=\"/javascript/2015/hexo-easy-edit-1-1-0-colors-drafts-and-dates/screen.png\" alt=\"hexo-easy-edit 1.1.0 screenshot\" title=\"hexo-easy-edit 1.1.0 screenshot\">\n<p>Still on my todo-list for this project:</p>\n<ul>\n<li>Turn simple title regexing into fuzzy search.</li>\n<li>Add a <code>remove</code> command.</li>\n<li>Improve the <code>publish</code> command.</li>\n</ul>","excerpt":"","more":"<p>I just pushed an update to <a href=\"http://gregjs.com/javascript/2015/i-wrote-a-hexo-plugin-hexo-easy-edit/\">my hexo plugin</a>. Changes:</p>\n<ul>\n<li>Menu output now displays the title instead of the slug. Extra information like published status, date and folder has been added as well for convenience.</li>\n<li>Output is now color coded.</li>\n<li>Support added for filtering on before-date (<code>-b</code>, <code>--before</code>), after-date (<code>-a</code>, <code>--after</code>) and published status (<code>-d</code>, <code>--draft</code>).</li>\n<li>Internals have been promisified for much easier reading :-)</li>\n<li>Various little tweaks to make command line editing of your hexo blog posts more convenient.</li>\n</ul>\n<img src=\"/javascript/2015/hexo-easy-edit-1-1-0-colors-drafts-and-dates/screen.png\" alt=\"hexo-easy-edit 1.1.0 screenshot\" title=\"hexo-easy-edit 1.1.0 screenshot\">\n<p>Still on my todo-list for this project:</p>\n<ul>\n<li>Turn simple title regexing into fuzzy search.</li>\n<li>Add a <code>remove</code> command.</li>\n<li>Improve the <code>publish</code> command.</li>\n</ul>"},{"title":"hexo-easy-edit 1.2.0 : pages, cleanup & rename","date":"2015-11-11T16:55:40.000Z","_content":"\n\nSo I pushed another minor version (quickly followed by a patch) to my little `hexo-easy-edit` plugin.\n\n`npm install --save hexo-easy-edit` to install it.\n\n`npm update hexo-easy-edit` to update if you already had a previous version installed.\n\nI've noticed people are actually starting to use it, so in the off-chance people will visit this blog to see what changed, here's what's new:\n\n<!-- more -->\n\n- Support added for editing pages. Use the `-p`, `--page` or `--pages` option to search your blog's pages rather than its posts. I actually didn't know earlier that hexo made such a distinction in its internal database, so this is an important update.\n\n- `rename` command has been added. You can now rename posts and pages from the command line using `hexo rename <search terms> <-n \"new title\">` (without the tags obviously). Besides `-n`, `--new` is also accepted, and you'll want to wrap the new title with quotes (single or double) if you want your title to include spaces.\n\n- `rename` will give you a similar search feature and menu selection to find the post you want to modify as with `edit`. You will also get the choice to rename the *filename*, the *title* of the post, or both. I'm guessing some bugs will appear here as I test everything out more over the coming days/weeks.\n\n- Title regexing has been improved significantly. Multiple words are no longer taken literally. Now they're made into an array, mapped to separate regexes and tested one after the other on both the post's title and its slug. This should make your posts and pages easier to find.\n\n- I cleaned up the code and did some refactoring. Everything's now logically split into separate files and the callback pyramid of doom has been reduced thanks to promisification.\n\nStill on the todo-list:\n\n- Add a remove/delete command\n- Improve `publish` (though this looks tough as I'm not sure I can modify the publish command without changing the hexo source, might be that I can only add an event listener after the publishing has already happened)\n\nI'll probably do this tomorrow or the day after and then I'll consider this little project mostly done.\n","source":"_posts/hexo-easy-edit-1-2-0-pages-cleanup-rename.md","raw":"title: 'hexo-easy-edit 1.2.0 : pages, cleanup & rename'\ncategories: javascript\ntags:\n  - hexo\n  - node\n  - open source\ndate: 2015-11-11 16:55:40\n---\n\n\nSo I pushed another minor version (quickly followed by a patch) to my little `hexo-easy-edit` plugin.\n\n`npm install --save hexo-easy-edit` to install it.\n\n`npm update hexo-easy-edit` to update if you already had a previous version installed.\n\nI've noticed people are actually starting to use it, so in the off-chance people will visit this blog to see what changed, here's what's new:\n\n<!-- more -->\n\n- Support added for editing pages. Use the `-p`, `--page` or `--pages` option to search your blog's pages rather than its posts. I actually didn't know earlier that hexo made such a distinction in its internal database, so this is an important update.\n\n- `rename` command has been added. You can now rename posts and pages from the command line using `hexo rename <search terms> <-n \"new title\">` (without the tags obviously). Besides `-n`, `--new` is also accepted, and you'll want to wrap the new title with quotes (single or double) if you want your title to include spaces.\n\n- `rename` will give you a similar search feature and menu selection to find the post you want to modify as with `edit`. You will also get the choice to rename the *filename*, the *title* of the post, or both. I'm guessing some bugs will appear here as I test everything out more over the coming days/weeks.\n\n- Title regexing has been improved significantly. Multiple words are no longer taken literally. Now they're made into an array, mapped to separate regexes and tested one after the other on both the post's title and its slug. This should make your posts and pages easier to find.\n\n- I cleaned up the code and did some refactoring. Everything's now logically split into separate files and the callback pyramid of doom has been reduced thanks to promisification.\n\nStill on the todo-list:\n\n- Add a remove/delete command\n- Improve `publish` (though this looks tough as I'm not sure I can modify the publish command without changing the hexo source, might be that I can only add an event listener after the publishing has already happened)\n\nI'll probably do this tomorrow or the day after and then I'll consider this little project mostly done.\n","slug":"hexo-easy-edit-1-2-0-pages-cleanup-rename","published":1,"updated":"2015-11-21T14:07:16.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk2t0019knz9ovuyltnr","content":"<p>So I pushed another minor version (quickly followed by a patch) to my little <code>hexo-easy-edit</code> plugin.</p>\n<p><code>npm install --save hexo-easy-edit</code> to install it.</p>\n<p><code>npm update hexo-easy-edit</code> to update if you already had a previous version installed.</p>\n<p>I’ve noticed people are actually starting to use it, so in the off-chance people will visit this blog to see what changed, here’s what’s new:</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>Support added for editing pages. Use the <code>-p</code>, <code>--page</code> or <code>--pages</code> option to search your blog’s pages rather than its posts. I actually didn’t know earlier that hexo made such a distinction in its internal database, so this is an important update.</p>\n</li>\n<li><p><code>rename</code> command has been added. You can now rename posts and pages from the command line using <code>hexo rename &lt;search terms&gt; &lt;-n &quot;new title&quot;&gt;</code> (without the tags obviously). Besides <code>-n</code>, <code>--new</code> is also accepted, and you’ll want to wrap the new title with quotes (single or double) if you want your title to include spaces.</p>\n</li>\n<li><p><code>rename</code> will give you a similar search feature and menu selection to find the post you want to modify as with <code>edit</code>. You will also get the choice to rename the <em>filename</em>, the <em>title</em> of the post, or both. I’m guessing some bugs will appear here as I test everything out more over the coming days/weeks.</p>\n</li>\n<li><p>Title regexing has been improved significantly. Multiple words are no longer taken literally. Now they’re made into an array, mapped to separate regexes and tested one after the other on both the post’s title and its slug. This should make your posts and pages easier to find.</p>\n</li>\n<li><p>I cleaned up the code and did some refactoring. Everything’s now logically split into separate files and the callback pyramid of doom has been reduced thanks to promisification.</p>\n</li>\n</ul>\n<p>Still on the todo-list:</p>\n<ul>\n<li>Add a remove/delete command</li>\n<li>Improve <code>publish</code> (though this looks tough as I’m not sure I can modify the publish command without changing the hexo source, might be that I can only add an event listener after the publishing has already happened)</li>\n</ul>\n<p>I’ll probably do this tomorrow or the day after and then I’ll consider this little project mostly done.</p>","excerpt":"<p>So I pushed another minor version (quickly followed by a patch) to my little <code>hexo-easy-edit</code> plugin.</p>\n<p><code>npm install --save hexo-easy-edit</code> to install it.</p>\n<p><code>npm update hexo-easy-edit</code> to update if you already had a previous version installed.</p>\n<p>I’ve noticed people are actually starting to use it, so in the off-chance people will visit this blog to see what changed, here’s what’s new:</p>","more":"<ul>\n<li><p>Support added for editing pages. Use the <code>-p</code>, <code>--page</code> or <code>--pages</code> option to search your blog’s pages rather than its posts. I actually didn’t know earlier that hexo made such a distinction in its internal database, so this is an important update.</p>\n</li>\n<li><p><code>rename</code> command has been added. You can now rename posts and pages from the command line using <code>hexo rename &lt;search terms&gt; &lt;-n &quot;new title&quot;&gt;</code> (without the tags obviously). Besides <code>-n</code>, <code>--new</code> is also accepted, and you’ll want to wrap the new title with quotes (single or double) if you want your title to include spaces.</p>\n</li>\n<li><p><code>rename</code> will give you a similar search feature and menu selection to find the post you want to modify as with <code>edit</code>. You will also get the choice to rename the <em>filename</em>, the <em>title</em> of the post, or both. I’m guessing some bugs will appear here as I test everything out more over the coming days/weeks.</p>\n</li>\n<li><p>Title regexing has been improved significantly. Multiple words are no longer taken literally. Now they’re made into an array, mapped to separate regexes and tested one after the other on both the post’s title and its slug. This should make your posts and pages easier to find.</p>\n</li>\n<li><p>I cleaned up the code and did some refactoring. Everything’s now logically split into separate files and the callback pyramid of doom has been reduced thanks to promisification.</p>\n</li>\n</ul>\n<p>Still on the todo-list:</p>\n<ul>\n<li>Add a remove/delete command</li>\n<li>Improve <code>publish</code> (though this looks tough as I’m not sure I can modify the publish command without changing the hexo source, might be that I can only add an event listener after the publishing has already happened)</li>\n</ul>\n<p>I’ll probably do this tomorrow or the day after and then I’ll consider this little project mostly done.</p>"},{"title":"Hexo tag plugin snippets for everyone","date":"2015-11-05T14:52:52.000Z","_content":"\nAs I noted in my last post about Hexo, I'm not a big fan anymore of fancy CMS-style administration panels for blogging. Nowadays, I do pretty much all my writing in vim using markdown.\n\nThis is actually a pretty big deal for me because I used to be a professional writer/translator, so I've spent a *lot* of time in various administration panels and WYSIWYG editors. If only I'd known back then what I know now: that the combination of vim and markdown blows them all out of the water..\n\nEither way, snippets is what I wanted to talk about here. Since I started blogging again, I've been making new [UltiSnips](https://github.com/SirVer/ultisnips) snippets whenever I came across new opportunities to use them.\n\n{% asset_img screenshot.png hexo-tag-plugin-snippets screenshot %}\n\nI'm blogging with Hexo so most of [my snippets](https://github.com/greg-js/vim-tag-plugin-snippets) are centered around Hexo's tag plugins. But earlier, I decided to clean them up, make sure I got all of them and ported them to [Snipmate](https://github.com/garbas/vim-snipmate) (the other popular format for vim snippets) as well.\n\n<!-- more -->\n\nI had some issues getting Snipmate to play nice with my other plugins so I couldn't test them out. They should work, but in case I got some of the snippet syntax wrong, send me a pull request. Same goes for if you have more snippets to add to the mix.\n\nAnyway, [here are the snippets](https://github.com/greg-js/vim-tag-plugin-snippets). Hope they're of some use to someone. If not, oh well, I'll just use them myself, thank you very much.\n\nOh, and one more thing, these snippets don't include the more obvious markdown syntax. That's just because there are already plenty of other repos for that.\n","source":"_posts/hexo-tag-plugin-snippets-for-everyone.md","raw":"title: Hexo tag plugin snippets for everyone\ncategories: vim\ntags:\n  - snippets\n  - open source\n  - vim\n  - hexo\ndate: 2015-11-05 14:52:52\n---\n\nAs I noted in my last post about Hexo, I'm not a big fan anymore of fancy CMS-style administration panels for blogging. Nowadays, I do pretty much all my writing in vim using markdown.\n\nThis is actually a pretty big deal for me because I used to be a professional writer/translator, so I've spent a *lot* of time in various administration panels and WYSIWYG editors. If only I'd known back then what I know now: that the combination of vim and markdown blows them all out of the water..\n\nEither way, snippets is what I wanted to talk about here. Since I started blogging again, I've been making new [UltiSnips](https://github.com/SirVer/ultisnips) snippets whenever I came across new opportunities to use them.\n\n{% asset_img screenshot.png hexo-tag-plugin-snippets screenshot %}\n\nI'm blogging with Hexo so most of [my snippets](https://github.com/greg-js/vim-tag-plugin-snippets) are centered around Hexo's tag plugins. But earlier, I decided to clean them up, make sure I got all of them and ported them to [Snipmate](https://github.com/garbas/vim-snipmate) (the other popular format for vim snippets) as well.\n\n<!-- more -->\n\nI had some issues getting Snipmate to play nice with my other plugins so I couldn't test them out. They should work, but in case I got some of the snippet syntax wrong, send me a pull request. Same goes for if you have more snippets to add to the mix.\n\nAnyway, [here are the snippets](https://github.com/greg-js/vim-tag-plugin-snippets). Hope they're of some use to someone. If not, oh well, I'll just use them myself, thank you very much.\n\nOh, and one more thing, these snippets don't include the more obvious markdown syntax. That's just because there are already plenty of other repos for that.\n","slug":"hexo-tag-plugin-snippets-for-everyone","published":1,"updated":"2015-12-18T18:30:49.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk2x001dknz916kwc210","content":"<p>As I noted in my last post about Hexo, I’m not a big fan anymore of fancy CMS-style administration panels for blogging. Nowadays, I do pretty much all my writing in vim using markdown.</p>\n<p>This is actually a pretty big deal for me because I used to be a professional writer/translator, so I’ve spent a <em>lot</em> of time in various administration panels and WYSIWYG editors. If only I’d known back then what I know now: that the combination of vim and markdown blows them all out of the water..</p>\n<p>Either way, snippets is what I wanted to talk about here. Since I started blogging again, I’ve been making new <a href=\"https://github.com/SirVer/ultisnips\" target=\"_blank\" rel=\"external\">UltiSnips</a> snippets whenever I came across new opportunities to use them.</p>\n<img src=\"/vim/2015/hexo-tag-plugin-snippets-for-everyone/screenshot.png\" alt=\"hexo-tag-plugin-snippets screenshot\" title=\"hexo-tag-plugin-snippets screenshot\">\n<p>I’m blogging with Hexo so most of <a href=\"https://github.com/greg-js/vim-tag-plugin-snippets\" target=\"_blank\" rel=\"external\">my snippets</a> are centered around Hexo’s tag plugins. But earlier, I decided to clean them up, make sure I got all of them and ported them to <a href=\"https://github.com/garbas/vim-snipmate\" target=\"_blank\" rel=\"external\">Snipmate</a> (the other popular format for vim snippets) as well.</p>\n<a id=\"more\"></a>\n<p>I had some issues getting Snipmate to play nice with my other plugins so I couldn’t test them out. They should work, but in case I got some of the snippet syntax wrong, send me a pull request. Same goes for if you have more snippets to add to the mix.</p>\n<p>Anyway, <a href=\"https://github.com/greg-js/vim-tag-plugin-snippets\" target=\"_blank\" rel=\"external\">here are the snippets</a>. Hope they’re of some use to someone. If not, oh well, I’ll just use them myself, thank you very much.</p>\n<p>Oh, and one more thing, these snippets don’t include the more obvious markdown syntax. That’s just because there are already plenty of other repos for that.</p>","excerpt":"<p>As I noted in my last post about Hexo, I’m not a big fan anymore of fancy CMS-style administration panels for blogging. Nowadays, I do pretty much all my writing in vim using markdown.</p>\n<p>This is actually a pretty big deal for me because I used to be a professional writer/translator, so I’ve spent a <em>lot</em> of time in various administration panels and WYSIWYG editors. If only I’d known back then what I know now: that the combination of vim and markdown blows them all out of the water..</p>\n<p>Either way, snippets is what I wanted to talk about here. Since I started blogging again, I’ve been making new <a href=\"https://github.com/SirVer/ultisnips\">UltiSnips</a> snippets whenever I came across new opportunities to use them.</p>\n<img src=\"/vim/2015/hexo-tag-plugin-snippets-for-everyone/screenshot.png\" alt=\"hexo-tag-plugin-snippets screenshot\" title=\"hexo-tag-plugin-snippets screenshot\">\n<p>I’m blogging with Hexo so most of <a href=\"https://github.com/greg-js/vim-tag-plugin-snippets\">my snippets</a> are centered around Hexo’s tag plugins. But earlier, I decided to clean them up, make sure I got all of them and ported them to <a href=\"https://github.com/garbas/vim-snipmate\">Snipmate</a> (the other popular format for vim snippets) as well.</p>","more":"<p>I had some issues getting Snipmate to play nice with my other plugins so I couldn’t test them out. They should work, but in case I got some of the snippet syntax wrong, send me a pull request. Same goes for if you have more snippets to add to the mix.</p>\n<p>Anyway, <a href=\"https://github.com/greg-js/vim-tag-plugin-snippets\">here are the snippets</a>. Hope they’re of some use to someone. If not, oh well, I’ll just use them myself, thank you very much.</p>\n<p>Oh, and one more thing, these snippets don’t include the more obvious markdown syntax. That’s just because there are already plenty of other repos for that.</p>"},{"title":"Forwarding mail to your Gmail account with Mailgun","date":"2015-12-19T15:18:27.000Z","_content":"\n_also:_ **[How to set up Mailgun on Digital Ocean](/linux/2015/how-to-set-up-mailgun-on-digital-ocean/)**\n\nI've been using Mailgun to send myself e-mails from my server with scraped data, logs, warnings and errors for a while now and it's been working peachy. The free tier offers more than enough to satisfy most non-commercial users and it's all a breeze to use -- especially given the helper libraries the service provides in a host of different languages including NodeJS.\n\n{% asset_img DO.logo.png Digital Ocean logo %}\n\nIn my other article (linked above), I go into a bit more detail on how to set it up [on your own $5/month Digital Ocean server](https://www.digitalocean.com/?refcode=30a11cb68f93), but that focused more on *sending* mail. Just the other day, I configured it to also *receive* mail. Or, rather, to *forward* it to a Gmail account I made just for this.\n\nIt turns out it's really easy, but I did run into some annoying issues that caused me to lose quite some time over this. So let me walk you through troubleshooting said issues just in case the same happens to you.\n\n<!-- more -->\n\n## Set up the domain\n\nWhen you're first setting up your domain on Mailgun, the website will recommend that you use a subdomain such as `mail.mywebsite.com`. The good people at Mailgun will also reassure you with the information that using such a subdomain won't prevent you from sending mail from `something@mywebsite.com` (as opposed to `something@mail.mywebsite.com`).\n\nWell, this is all 100% true for _sending_ mail, but not so much for _receiving_ it. So when you want to receive mail, say at `admin@mywebsite.com`, make sure you have a `mywebsite.com` domain name set up and verified on mailgun! If you only have something like `mail.mywebsite.com` set up, it will tell you it's verified, but the MX records won't be correct and you'll get `5550 5.7.1 Relaying denied` errors returned to you.\n\nAgain, for more information on how to verify a domain, [read my other article](/linux/2015/how-to-set-up-mailgun-on-digital-ocean/) or keep a very close eye on the Zone File information at the bottom of your Digital Ocean DNS setup.\n\n## Open your ports\n\nIf you're using `ufw` for port management and your policy is to deny as much traffic as you can, you need to make sure you're not blocking the ports on your server that Mailgun makes use of. Here's a quick one-liner just for that:\n\n{% codeblock lang:bash line_number:false %}\nsudo ufw allow submission\n{% endcodeblock %}\n\nThis should suffice (if you're even blocking all other ports with your `ufw` firewall in the first place), but Mailgun _may_ in some cases use ports 25 or 2525 as well, just in case this doesn't do the trick. Also note the above line will open port 587 to the world.\n\nIf that poses unacceptable security concerns in your opinion, then you might instead open it only to Mailgun's SMTP/API IP, which is currently `50.56.21.178`. [Read this](https://github.com/miniwark/miniwark-howtos/wiki/Firewall-setup-on-Ubuntu-12.04#user-content-mail-services-setup) to see how, but know that the IP in question could change without warning in the future.\n\n## Create a route in the Mailgun dashboard\n\nFor forwarding mail to a Gmail account, you'll need to create a route under the `Routes` section in your Mailgun dashboard.\n\nUnder `priority`, fill in a low number like 1, under `Filter Expression`, put either something like `match_recipient(\".*@myapp.com\")` or `catch_all()`, and under `Action`, put `forward(\"my.name@gmail.com\")` (obviously you need to change this to match your own server and Gmail names).\n\nThe filter expression will filter messages, in this case on recipient address (but you can filter on basically anything). Whatever gets through will move to what you set as the action, with the _lowest_ priority winning out in case multiple rules apply. This is pretty straightforward if all you want to do is forward mail, but here is some more information [in the Mailgun docs](https://documentation.mailgun.com/api-routes.html) if you're still confused.\n\n## Do not use your own e-mail address for testing!\n\nThis is actually the part I lost an inordinate of time at. I had gone through all the steps and every individual part seemed to be working fine, but whenever I sent a test mail, it would just fail silently! No error message or anything, my mail would simply not get delivered.\n\nOnly after an hour and a half or so did I realize what the problem was: Gmail filters mail that is sent from and routed to the same e-mail address or something. I confess I didn't get to the bottom of why this was happening, but here's the gist of it:\n\n- My test mail is sent from some Gmail address, say `greg@gmail.com`, to a recipient on the server's domain name, say `admin@gregjs.com`\n- My server gets it, and sends it through Mailgun for processing\n- Mailgun runs the filter, and if it gets picked up, it forwards it to the address I set up, in this case **back to** `greg@gmail.com`\n- Gmail doesn't like this and doesn't show you the e-mail\n- I am left scratching my head, wondering why it isn't working\n\nAs you can see from this, the solution is simple: send your test e-mail from a different e-mail address! If you set everything up correctly, it will work this time. Or rather, you will discover that it was working all along.\n\nThere you go. I hope this article resolved your issues if receiving mail through Mailgun wasn't working out for you. Feel free to comment with a question if it still doesn't work, or troubleshoot your issues using [the Mailgun docs](https://documentation.mailgun.com/) or [Digital Ocean tutorials](https://www.digitalocean.com/community/tutorials).\n","source":"_posts/forwarding-mail-to-your-gmail-account-with-mailgun.md","raw":"title: Forwarding mail to your Gmail account with Mailgun\ndate: 2015-12-19 15:18:27\ncategories: linux\ntags:\n- mailgun\n- vps\n---\n\n_also:_ **[How to set up Mailgun on Digital Ocean](/linux/2015/how-to-set-up-mailgun-on-digital-ocean/)**\n\nI've been using Mailgun to send myself e-mails from my server with scraped data, logs, warnings and errors for a while now and it's been working peachy. The free tier offers more than enough to satisfy most non-commercial users and it's all a breeze to use -- especially given the helper libraries the service provides in a host of different languages including NodeJS.\n\n{% asset_img DO.logo.png Digital Ocean logo %}\n\nIn my other article (linked above), I go into a bit more detail on how to set it up [on your own $5/month Digital Ocean server](https://www.digitalocean.com/?refcode=30a11cb68f93), but that focused more on *sending* mail. Just the other day, I configured it to also *receive* mail. Or, rather, to *forward* it to a Gmail account I made just for this.\n\nIt turns out it's really easy, but I did run into some annoying issues that caused me to lose quite some time over this. So let me walk you through troubleshooting said issues just in case the same happens to you.\n\n<!-- more -->\n\n## Set up the domain\n\nWhen you're first setting up your domain on Mailgun, the website will recommend that you use a subdomain such as `mail.mywebsite.com`. The good people at Mailgun will also reassure you with the information that using such a subdomain won't prevent you from sending mail from `something@mywebsite.com` (as opposed to `something@mail.mywebsite.com`).\n\nWell, this is all 100% true for _sending_ mail, but not so much for _receiving_ it. So when you want to receive mail, say at `admin@mywebsite.com`, make sure you have a `mywebsite.com` domain name set up and verified on mailgun! If you only have something like `mail.mywebsite.com` set up, it will tell you it's verified, but the MX records won't be correct and you'll get `5550 5.7.1 Relaying denied` errors returned to you.\n\nAgain, for more information on how to verify a domain, [read my other article](/linux/2015/how-to-set-up-mailgun-on-digital-ocean/) or keep a very close eye on the Zone File information at the bottom of your Digital Ocean DNS setup.\n\n## Open your ports\n\nIf you're using `ufw` for port management and your policy is to deny as much traffic as you can, you need to make sure you're not blocking the ports on your server that Mailgun makes use of. Here's a quick one-liner just for that:\n\n{% codeblock lang:bash line_number:false %}\nsudo ufw allow submission\n{% endcodeblock %}\n\nThis should suffice (if you're even blocking all other ports with your `ufw` firewall in the first place), but Mailgun _may_ in some cases use ports 25 or 2525 as well, just in case this doesn't do the trick. Also note the above line will open port 587 to the world.\n\nIf that poses unacceptable security concerns in your opinion, then you might instead open it only to Mailgun's SMTP/API IP, which is currently `50.56.21.178`. [Read this](https://github.com/miniwark/miniwark-howtos/wiki/Firewall-setup-on-Ubuntu-12.04#user-content-mail-services-setup) to see how, but know that the IP in question could change without warning in the future.\n\n## Create a route in the Mailgun dashboard\n\nFor forwarding mail to a Gmail account, you'll need to create a route under the `Routes` section in your Mailgun dashboard.\n\nUnder `priority`, fill in a low number like 1, under `Filter Expression`, put either something like `match_recipient(\".*@myapp.com\")` or `catch_all()`, and under `Action`, put `forward(\"my.name@gmail.com\")` (obviously you need to change this to match your own server and Gmail names).\n\nThe filter expression will filter messages, in this case on recipient address (but you can filter on basically anything). Whatever gets through will move to what you set as the action, with the _lowest_ priority winning out in case multiple rules apply. This is pretty straightforward if all you want to do is forward mail, but here is some more information [in the Mailgun docs](https://documentation.mailgun.com/api-routes.html) if you're still confused.\n\n## Do not use your own e-mail address for testing!\n\nThis is actually the part I lost an inordinate of time at. I had gone through all the steps and every individual part seemed to be working fine, but whenever I sent a test mail, it would just fail silently! No error message or anything, my mail would simply not get delivered.\n\nOnly after an hour and a half or so did I realize what the problem was: Gmail filters mail that is sent from and routed to the same e-mail address or something. I confess I didn't get to the bottom of why this was happening, but here's the gist of it:\n\n- My test mail is sent from some Gmail address, say `greg@gmail.com`, to a recipient on the server's domain name, say `admin@gregjs.com`\n- My server gets it, and sends it through Mailgun for processing\n- Mailgun runs the filter, and if it gets picked up, it forwards it to the address I set up, in this case **back to** `greg@gmail.com`\n- Gmail doesn't like this and doesn't show you the e-mail\n- I am left scratching my head, wondering why it isn't working\n\nAs you can see from this, the solution is simple: send your test e-mail from a different e-mail address! If you set everything up correctly, it will work this time. Or rather, you will discover that it was working all along.\n\nThere you go. I hope this article resolved your issues if receiving mail through Mailgun wasn't working out for you. Feel free to comment with a question if it still doesn't work, or troubleshoot your issues using [the Mailgun docs](https://documentation.mailgun.com/) or [Digital Ocean tutorials](https://www.digitalocean.com/community/tutorials).\n","slug":"forwarding-mail-to-your-gmail-account-with-mailgun","published":1,"updated":"2015-12-19T18:24:37.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk32001gknz93s5d8faw","content":"<p><em>also:</em> <strong><a href=\"/linux/2015/how-to-set-up-mailgun-on-digital-ocean/\">How to set up Mailgun on Digital Ocean</a></strong></p>\n<p>I’ve been using Mailgun to send myself e-mails from my server with scraped data, logs, warnings and errors for a while now and it’s been working peachy. The free tier offers more than enough to satisfy most non-commercial users and it’s all a breeze to use – especially given the helper libraries the service provides in a host of different languages including NodeJS.</p>\n<img src=\"/linux/2015/forwarding-mail-to-your-gmail-account-with-mailgun/DO.logo.png\" alt=\"Digital Ocean logo\" title=\"Digital Ocean logo\">\n<p>In my other article (linked above), I go into a bit more detail on how to set it up <a href=\"https://www.digitalocean.com/?refcode=30a11cb68f93\" target=\"_blank\" rel=\"external\">on your own $5/month Digital Ocean server</a>, but that focused more on <em>sending</em> mail. Just the other day, I configured it to also <em>receive</em> mail. Or, rather, to <em>forward</em> it to a Gmail account I made just for this.</p>\n<p>It turns out it’s really easy, but I did run into some annoying issues that caused me to lose quite some time over this. So let me walk you through troubleshooting said issues just in case the same happens to you.</p>\n<a id=\"more\"></a>\n<h2 id=\"Set-up-the-domain\"><a href=\"#Set-up-the-domain\" class=\"headerlink\" title=\"Set up the domain\"></a>Set up the domain</h2><p>When you’re first setting up your domain on Mailgun, the website will recommend that you use a subdomain such as <code>mail.mywebsite.com</code>. The good people at Mailgun will also reassure you with the information that using such a subdomain won’t prevent you from sending mail from <code>something@mywebsite.com</code> (as opposed to <code>something@mail.mywebsite.com</code>).</p>\n<p>Well, this is all 100% true for <em>sending</em> mail, but not so much for <em>receiving</em> it. So when you want to receive mail, say at <code>admin@mywebsite.com</code>, make sure you have a <code>mywebsite.com</code> domain name set up and verified on mailgun! If you only have something like <code>mail.mywebsite.com</code> set up, it will tell you it’s verified, but the MX records won’t be correct and you’ll get <code>5550 5.7.1 Relaying denied</code> errors returned to you.</p>\n<p>Again, for more information on how to verify a domain, <a href=\"/linux/2015/how-to-set-up-mailgun-on-digital-ocean/\">read my other article</a> or keep a very close eye on the Zone File information at the bottom of your Digital Ocean DNS setup.</p>\n<h2 id=\"Open-your-ports\"><a href=\"#Open-your-ports\" class=\"headerlink\" title=\"Open your ports\"></a>Open your ports</h2><p>If you’re using <code>ufw</code> for port management and your policy is to deny as much traffic as you can, you need to make sure you’re not blocking the ports on your server that Mailgun makes use of. Here’s a quick one-liner just for that:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo ufw allow submission</div></pre></td></tr></table></figure>\n<p>This should suffice (if you’re even blocking all other ports with your <code>ufw</code> firewall in the first place), but Mailgun <em>may</em> in some cases use ports 25 or 2525 as well, just in case this doesn’t do the trick. Also note the above line will open port 587 to the world.</p>\n<p>If that poses unacceptable security concerns in your opinion, then you might instead open it only to Mailgun’s SMTP/API IP, which is currently <code>50.56.21.178</code>. <a href=\"https://github.com/miniwark/miniwark-howtos/wiki/Firewall-setup-on-Ubuntu-12.04#user-content-mail-services-setup\" target=\"_blank\" rel=\"external\">Read this</a> to see how, but know that the IP in question could change without warning in the future.</p>\n<h2 id=\"Create-a-route-in-the-Mailgun-dashboard\"><a href=\"#Create-a-route-in-the-Mailgun-dashboard\" class=\"headerlink\" title=\"Create a route in the Mailgun dashboard\"></a>Create a route in the Mailgun dashboard</h2><p>For forwarding mail to a Gmail account, you’ll need to create a route under the <code>Routes</code> section in your Mailgun dashboard.</p>\n<p>Under <code>priority</code>, fill in a low number like 1, under <code>Filter Expression</code>, put either something like <code>match_recipient(&quot;.*@myapp.com&quot;)</code> or <code>catch_all()</code>, and under <code>Action</code>, put <code>forward(&quot;my.name@gmail.com&quot;)</code> (obviously you need to change this to match your own server and Gmail names).</p>\n<p>The filter expression will filter messages, in this case on recipient address (but you can filter on basically anything). Whatever gets through will move to what you set as the action, with the <em>lowest</em> priority winning out in case multiple rules apply. This is pretty straightforward if all you want to do is forward mail, but here is some more information <a href=\"https://documentation.mailgun.com/api-routes.html\" target=\"_blank\" rel=\"external\">in the Mailgun docs</a> if you’re still confused.</p>\n<h2 id=\"Do-not-use-your-own-e-mail-address-for-testing\"><a href=\"#Do-not-use-your-own-e-mail-address-for-testing\" class=\"headerlink\" title=\"Do not use your own e-mail address for testing!\"></a>Do not use your own e-mail address for testing!</h2><p>This is actually the part I lost an inordinate of time at. I had gone through all the steps and every individual part seemed to be working fine, but whenever I sent a test mail, it would just fail silently! No error message or anything, my mail would simply not get delivered.</p>\n<p>Only after an hour and a half or so did I realize what the problem was: Gmail filters mail that is sent from and routed to the same e-mail address or something. I confess I didn’t get to the bottom of why this was happening, but here’s the gist of it:</p>\n<ul>\n<li>My test mail is sent from some Gmail address, say <code>greg@gmail.com</code>, to a recipient on the server’s domain name, say <code>admin@gregjs.com</code></li>\n<li>My server gets it, and sends it through Mailgun for processing</li>\n<li>Mailgun runs the filter, and if it gets picked up, it forwards it to the address I set up, in this case <strong>back to</strong> <code>greg@gmail.com</code></li>\n<li>Gmail doesn’t like this and doesn’t show you the e-mail</li>\n<li>I am left scratching my head, wondering why it isn’t working</li>\n</ul>\n<p>As you can see from this, the solution is simple: send your test e-mail from a different e-mail address! If you set everything up correctly, it will work this time. Or rather, you will discover that it was working all along.</p>\n<p>There you go. I hope this article resolved your issues if receiving mail through Mailgun wasn’t working out for you. Feel free to comment with a question if it still doesn’t work, or troubleshoot your issues using <a href=\"https://documentation.mailgun.com/\" target=\"_blank\" rel=\"external\">the Mailgun docs</a> or <a href=\"https://www.digitalocean.com/community/tutorials\" target=\"_blank\" rel=\"external\">Digital Ocean tutorials</a>.</p>","excerpt":"<p><em>also:</em> <strong><a href=\"/linux/2015/how-to-set-up-mailgun-on-digital-ocean/\">How to set up Mailgun on Digital Ocean</a></strong></p>\n<p>I’ve been using Mailgun to send myself e-mails from my server with scraped data, logs, warnings and errors for a while now and it’s been working peachy. The free tier offers more than enough to satisfy most non-commercial users and it’s all a breeze to use – especially given the helper libraries the service provides in a host of different languages including NodeJS.</p>\n<img src=\"/linux/2015/forwarding-mail-to-your-gmail-account-with-mailgun/DO.logo.png\" alt=\"Digital Ocean logo\" title=\"Digital Ocean logo\">\n<p>In my other article (linked above), I go into a bit more detail on how to set it up <a href=\"https://www.digitalocean.com/?refcode=30a11cb68f93\">on your own $5/month Digital Ocean server</a>, but that focused more on <em>sending</em> mail. Just the other day, I configured it to also <em>receive</em> mail. Or, rather, to <em>forward</em> it to a Gmail account I made just for this.</p>\n<p>It turns out it’s really easy, but I did run into some annoying issues that caused me to lose quite some time over this. So let me walk you through troubleshooting said issues just in case the same happens to you.</p>","more":"<h2 id=\"Set-up-the-domain\"><a href=\"#Set-up-the-domain\" class=\"headerlink\" title=\"Set up the domain\"></a>Set up the domain</h2><p>When you’re first setting up your domain on Mailgun, the website will recommend that you use a subdomain such as <code>mail.mywebsite.com</code>. The good people at Mailgun will also reassure you with the information that using such a subdomain won’t prevent you from sending mail from <code>something@mywebsite.com</code> (as opposed to <code>something@mail.mywebsite.com</code>).</p>\n<p>Well, this is all 100% true for <em>sending</em> mail, but not so much for <em>receiving</em> it. So when you want to receive mail, say at <code>admin@mywebsite.com</code>, make sure you have a <code>mywebsite.com</code> domain name set up and verified on mailgun! If you only have something like <code>mail.mywebsite.com</code> set up, it will tell you it’s verified, but the MX records won’t be correct and you’ll get <code>5550 5.7.1 Relaying denied</code> errors returned to you.</p>\n<p>Again, for more information on how to verify a domain, <a href=\"/linux/2015/how-to-set-up-mailgun-on-digital-ocean/\">read my other article</a> or keep a very close eye on the Zone File information at the bottom of your Digital Ocean DNS setup.</p>\n<h2 id=\"Open-your-ports\"><a href=\"#Open-your-ports\" class=\"headerlink\" title=\"Open your ports\"></a>Open your ports</h2><p>If you’re using <code>ufw</code> for port management and your policy is to deny as much traffic as you can, you need to make sure you’re not blocking the ports on your server that Mailgun makes use of. Here’s a quick one-liner just for that:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">sudo ufw allow submission</div></pre></td></tr></table></figure>\n<p>This should suffice (if you’re even blocking all other ports with your <code>ufw</code> firewall in the first place), but Mailgun <em>may</em> in some cases use ports 25 or 2525 as well, just in case this doesn’t do the trick. Also note the above line will open port 587 to the world.</p>\n<p>If that poses unacceptable security concerns in your opinion, then you might instead open it only to Mailgun’s SMTP/API IP, which is currently <code>50.56.21.178</code>. <a href=\"https://github.com/miniwark/miniwark-howtos/wiki/Firewall-setup-on-Ubuntu-12.04#user-content-mail-services-setup\">Read this</a> to see how, but know that the IP in question could change without warning in the future.</p>\n<h2 id=\"Create-a-route-in-the-Mailgun-dashboard\"><a href=\"#Create-a-route-in-the-Mailgun-dashboard\" class=\"headerlink\" title=\"Create a route in the Mailgun dashboard\"></a>Create a route in the Mailgun dashboard</h2><p>For forwarding mail to a Gmail account, you’ll need to create a route under the <code>Routes</code> section in your Mailgun dashboard.</p>\n<p>Under <code>priority</code>, fill in a low number like 1, under <code>Filter Expression</code>, put either something like <code>match_recipient(&quot;.*@myapp.com&quot;)</code> or <code>catch_all()</code>, and under <code>Action</code>, put <code>forward(&quot;my.name@gmail.com&quot;)</code> (obviously you need to change this to match your own server and Gmail names).</p>\n<p>The filter expression will filter messages, in this case on recipient address (but you can filter on basically anything). Whatever gets through will move to what you set as the action, with the <em>lowest</em> priority winning out in case multiple rules apply. This is pretty straightforward if all you want to do is forward mail, but here is some more information <a href=\"https://documentation.mailgun.com/api-routes.html\">in the Mailgun docs</a> if you’re still confused.</p>\n<h2 id=\"Do-not-use-your-own-e-mail-address-for-testing\"><a href=\"#Do-not-use-your-own-e-mail-address-for-testing\" class=\"headerlink\" title=\"Do not use your own e-mail address for testing!\"></a>Do not use your own e-mail address for testing!</h2><p>This is actually the part I lost an inordinate of time at. I had gone through all the steps and every individual part seemed to be working fine, but whenever I sent a test mail, it would just fail silently! No error message or anything, my mail would simply not get delivered.</p>\n<p>Only after an hour and a half or so did I realize what the problem was: Gmail filters mail that is sent from and routed to the same e-mail address or something. I confess I didn’t get to the bottom of why this was happening, but here’s the gist of it:</p>\n<ul>\n<li>My test mail is sent from some Gmail address, say <code>greg@gmail.com</code>, to a recipient on the server’s domain name, say <code>admin@gregjs.com</code></li>\n<li>My server gets it, and sends it through Mailgun for processing</li>\n<li>Mailgun runs the filter, and if it gets picked up, it forwards it to the address I set up, in this case <strong>back to</strong> <code>greg@gmail.com</code></li>\n<li>Gmail doesn’t like this and doesn’t show you the e-mail</li>\n<li>I am left scratching my head, wondering why it isn’t working</li>\n</ul>\n<p>As you can see from this, the solution is simple: send your test e-mail from a different e-mail address! If you set everything up correctly, it will work this time. Or rather, you will discover that it was working all along.</p>\n<p>There you go. I hope this article resolved your issues if receiving mail through Mailgun wasn’t working out for you. Feel free to comment with a question if it still doesn’t work, or troubleshoot your issues using <a href=\"https://documentation.mailgun.com/\">the Mailgun docs</a> or <a href=\"https://www.digitalocean.com/community/tutorials\">Digital Ocean tutorials</a>.</p>"},{"title":"How to rename a published npm module","date":"2016-01-11T14:35:23.000Z","_content":"\nTwo months ago, I wrote a small plugin for the static site generator [Hexo](http://hexo.io). It allowed users to edit posts more conveniently from the command line so I called it [hexo-easy-edit](https://github.com/greg-js/hexo-easy-edit).\n\nToday I added another feature to the plugin, and I realized that the name no longer reflected all that it does. So I renamed the project to [hexo-cli-extras](https://github.com/greg-js/hexo-cli-extras). However, this turned out to be a little more involved than I originally thought because of the way npm works.\n\n{% asset_img npm-logo.svg npm logo %}\n\n<!-- more -->\n\n## Why just renaming a module causes problems\n\nLet's say you naively just rename your npm module and git repo. Congratulations, you've just broken people's workflows (if npm even allows it in the first place!).\n\nThe reason is simple. People who are you using your module have the name hard-coded in their `package.json` and there is no way for them to know that you changed it. You can put all the information in your `README` or GitHub/npm description you want, but that's of no use whatsoever to your users.\n\n{% asset_img broken.jpg everything breaks %}\n\nAll they'll see is that npm will fail to fetch your module for them when they next try to install or update.\n\n## Create new instead of rename\n\nThe way to go is thus to create a new npm module with the new name. I suppose you could link that to your old renamed GitHub repo, but that might confuse users who are still on your old version and now have a broken GitHub link, so you're probably best off to create a new GitHub repo to go along with the new npm module.\n\nCreating a new repo and module is ideal for new users and doesn't break anything, but now you have one more problem: how do you communicate the name change to the people who have an older version installed?\n\n## Communicating with your existing users\n\nUnfortunately there is no way to way yet to automatically inform users of a name change, but you can do it yourself in two ways.\n\n{% asset_img communicate.jpg communicate with your users %}\n\nThe first is obvious: write a message in the `README` for your old repo. Explain that you changed the name, link to the new version and encourage people to move.\n\nThe second is less obvious. Unless your module is very popular (in which case you won't be reading this article), most users won't even think to visit the GitHub page for it. But when they update or install your module, they'll access it through npm. Wouldn't it be nice if you could send them a message when they do so, informing them of a name change?\n\nAnd you guessed it, you can do exactly that. All you need is `npm deprecate` (credit to [Peter Flannery on stackoverflow](http://stackoverflow.com/questions/28371669/renaming-a-published-npm-module) for the idea).\n\nLet's say your old module name is `okay-module`, its latest version is 2.1.0 and your new, renamed module is called `awesome-module`. Then this is the syntax:\n\n{% codeblock lang:bash line_number:false %}\nnpm deprecate okay-module@2.1.0 \"WARNING: This module has been renamed to awesome-module. Please install it instead. See <GitHub page> for more information.\"\n{% endcodeblock %}\n\nObviously you can put whatever you want inside the message, and whenever someone installs the latest version of your old module, they will receive that message in their terminal.\n\nNow, is this a perfect solution? No, unfortunately not. But until a new feature is added to npm to address the issue of renaming modules, this is the best we've got, and hey, it's pretty good!\n","source":"_posts/how-to-rename-a-published-npm-module.md","raw":"title: How to rename a published npm module\ndate: 2016-01-11 14:35:23\ncategories: javascript\ntags:\n  - node\n  - npm\n  - open source\n---\n\nTwo months ago, I wrote a small plugin for the static site generator [Hexo](http://hexo.io). It allowed users to edit posts more conveniently from the command line so I called it [hexo-easy-edit](https://github.com/greg-js/hexo-easy-edit).\n\nToday I added another feature to the plugin, and I realized that the name no longer reflected all that it does. So I renamed the project to [hexo-cli-extras](https://github.com/greg-js/hexo-cli-extras). However, this turned out to be a little more involved than I originally thought because of the way npm works.\n\n{% asset_img npm-logo.svg npm logo %}\n\n<!-- more -->\n\n## Why just renaming a module causes problems\n\nLet's say you naively just rename your npm module and git repo. Congratulations, you've just broken people's workflows (if npm even allows it in the first place!).\n\nThe reason is simple. People who are you using your module have the name hard-coded in their `package.json` and there is no way for them to know that you changed it. You can put all the information in your `README` or GitHub/npm description you want, but that's of no use whatsoever to your users.\n\n{% asset_img broken.jpg everything breaks %}\n\nAll they'll see is that npm will fail to fetch your module for them when they next try to install or update.\n\n## Create new instead of rename\n\nThe way to go is thus to create a new npm module with the new name. I suppose you could link that to your old renamed GitHub repo, but that might confuse users who are still on your old version and now have a broken GitHub link, so you're probably best off to create a new GitHub repo to go along with the new npm module.\n\nCreating a new repo and module is ideal for new users and doesn't break anything, but now you have one more problem: how do you communicate the name change to the people who have an older version installed?\n\n## Communicating with your existing users\n\nUnfortunately there is no way to way yet to automatically inform users of a name change, but you can do it yourself in two ways.\n\n{% asset_img communicate.jpg communicate with your users %}\n\nThe first is obvious: write a message in the `README` for your old repo. Explain that you changed the name, link to the new version and encourage people to move.\n\nThe second is less obvious. Unless your module is very popular (in which case you won't be reading this article), most users won't even think to visit the GitHub page for it. But when they update or install your module, they'll access it through npm. Wouldn't it be nice if you could send them a message when they do so, informing them of a name change?\n\nAnd you guessed it, you can do exactly that. All you need is `npm deprecate` (credit to [Peter Flannery on stackoverflow](http://stackoverflow.com/questions/28371669/renaming-a-published-npm-module) for the idea).\n\nLet's say your old module name is `okay-module`, its latest version is 2.1.0 and your new, renamed module is called `awesome-module`. Then this is the syntax:\n\n{% codeblock lang:bash line_number:false %}\nnpm deprecate okay-module@2.1.0 \"WARNING: This module has been renamed to awesome-module. Please install it instead. See <GitHub page> for more information.\"\n{% endcodeblock %}\n\nObviously you can put whatever you want inside the message, and whenever someone installs the latest version of your old module, they will receive that message in their terminal.\n\nNow, is this a perfect solution? No, unfortunately not. But until a new feature is added to npm to address the issue of renaming modules, this is the best we've got, and hey, it's pretty good!\n","slug":"how-to-rename-a-published-npm-module","published":1,"updated":"2016-01-11T15:29:31.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk36001jknz9j3jusvwz","content":"<p>Two months ago, I wrote a small plugin for the static site generator <a href=\"http://hexo.io\" target=\"_blank\" rel=\"external\">Hexo</a>. It allowed users to edit posts more conveniently from the command line so I called it <a href=\"https://github.com/greg-js/hexo-easy-edit\" target=\"_blank\" rel=\"external\">hexo-easy-edit</a>.</p>\n<p>Today I added another feature to the plugin, and I realized that the name no longer reflected all that it does. So I renamed the project to <a href=\"https://github.com/greg-js/hexo-cli-extras\" target=\"_blank\" rel=\"external\">hexo-cli-extras</a>. However, this turned out to be a little more involved than I originally thought because of the way npm works.</p>\n<img src=\"/javascript/2016/how-to-rename-a-published-npm-module/npm-logo.svg\" alt=\"npm logo\" title=\"npm logo\">\n<a id=\"more\"></a>\n<h2 id=\"Why-just-renaming-a-module-causes-problems\"><a href=\"#Why-just-renaming-a-module-causes-problems\" class=\"headerlink\" title=\"Why just renaming a module causes problems\"></a>Why just renaming a module causes problems</h2><p>Let’s say you naively just rename your npm module and git repo. Congratulations, you’ve just broken people’s workflows (if npm even allows it in the first place!).</p>\n<p>The reason is simple. People who are you using your module have the name hard-coded in their <code>package.json</code> and there is no way for them to know that you changed it. You can put all the information in your <code>README</code> or GitHub/npm description you want, but that’s of no use whatsoever to your users.</p>\n<img src=\"/javascript/2016/how-to-rename-a-published-npm-module/broken.jpg\" alt=\"everything breaks\" title=\"everything breaks\">\n<p>All they’ll see is that npm will fail to fetch your module for them when they next try to install or update.</p>\n<h2 id=\"Create-new-instead-of-rename\"><a href=\"#Create-new-instead-of-rename\" class=\"headerlink\" title=\"Create new instead of rename\"></a>Create new instead of rename</h2><p>The way to go is thus to create a new npm module with the new name. I suppose you could link that to your old renamed GitHub repo, but that might confuse users who are still on your old version and now have a broken GitHub link, so you’re probably best off to create a new GitHub repo to go along with the new npm module.</p>\n<p>Creating a new repo and module is ideal for new users and doesn’t break anything, but now you have one more problem: how do you communicate the name change to the people who have an older version installed?</p>\n<h2 id=\"Communicating-with-your-existing-users\"><a href=\"#Communicating-with-your-existing-users\" class=\"headerlink\" title=\"Communicating with your existing users\"></a>Communicating with your existing users</h2><p>Unfortunately there is no way to way yet to automatically inform users of a name change, but you can do it yourself in two ways.</p>\n<img src=\"/javascript/2016/how-to-rename-a-published-npm-module/communicate.jpg\" alt=\"communicate with your users\" title=\"communicate with your users\">\n<p>The first is obvious: write a message in the <code>README</code> for your old repo. Explain that you changed the name, link to the new version and encourage people to move.</p>\n<p>The second is less obvious. Unless your module is very popular (in which case you won’t be reading this article), most users won’t even think to visit the GitHub page for it. But when they update or install your module, they’ll access it through npm. Wouldn’t it be nice if you could send them a message when they do so, informing them of a name change?</p>\n<p>And you guessed it, you can do exactly that. All you need is <code>npm deprecate</code> (credit to <a href=\"http://stackoverflow.com/questions/28371669/renaming-a-published-npm-module\" target=\"_blank\" rel=\"external\">Peter Flannery on stackoverflow</a> for the idea).</p>\n<p>Let’s say your old module name is <code>okay-module</code>, its latest version is 2.1.0 and your new, renamed module is called <code>awesome-module</code>. Then this is the syntax:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm deprecate okay-module@2.1.0 <span class=\"string\">\"WARNING: This module has been renamed to awesome-module. Please install it instead. See &lt;GitHub page&gt; for more information.\"</span></div></pre></td></tr></table></figure>\n<p>Obviously you can put whatever you want inside the message, and whenever someone installs the latest version of your old module, they will receive that message in their terminal.</p>\n<p>Now, is this a perfect solution? No, unfortunately not. But until a new feature is added to npm to address the issue of renaming modules, this is the best we’ve got, and hey, it’s pretty good!</p>","excerpt":"<p>Two months ago, I wrote a small plugin for the static site generator <a href=\"http://hexo.io\">Hexo</a>. It allowed users to edit posts more conveniently from the command line so I called it <a href=\"https://github.com/greg-js/hexo-easy-edit\">hexo-easy-edit</a>.</p>\n<p>Today I added another feature to the plugin, and I realized that the name no longer reflected all that it does. So I renamed the project to <a href=\"https://github.com/greg-js/hexo-cli-extras\">hexo-cli-extras</a>. However, this turned out to be a little more involved than I originally thought because of the way npm works.</p>\n<img src=\"/javascript/2016/how-to-rename-a-published-npm-module/npm-logo.svg\" alt=\"npm logo\" title=\"npm logo\">","more":"<h2 id=\"Why-just-renaming-a-module-causes-problems\"><a href=\"#Why-just-renaming-a-module-causes-problems\" class=\"headerlink\" title=\"Why just renaming a module causes problems\"></a>Why just renaming a module causes problems</h2><p>Let’s say you naively just rename your npm module and git repo. Congratulations, you’ve just broken people’s workflows (if npm even allows it in the first place!).</p>\n<p>The reason is simple. People who are you using your module have the name hard-coded in their <code>package.json</code> and there is no way for them to know that you changed it. You can put all the information in your <code>README</code> or GitHub/npm description you want, but that’s of no use whatsoever to your users.</p>\n<img src=\"/javascript/2016/how-to-rename-a-published-npm-module/broken.jpg\" alt=\"everything breaks\" title=\"everything breaks\">\n<p>All they’ll see is that npm will fail to fetch your module for them when they next try to install or update.</p>\n<h2 id=\"Create-new-instead-of-rename\"><a href=\"#Create-new-instead-of-rename\" class=\"headerlink\" title=\"Create new instead of rename\"></a>Create new instead of rename</h2><p>The way to go is thus to create a new npm module with the new name. I suppose you could link that to your old renamed GitHub repo, but that might confuse users who are still on your old version and now have a broken GitHub link, so you’re probably best off to create a new GitHub repo to go along with the new npm module.</p>\n<p>Creating a new repo and module is ideal for new users and doesn’t break anything, but now you have one more problem: how do you communicate the name change to the people who have an older version installed?</p>\n<h2 id=\"Communicating-with-your-existing-users\"><a href=\"#Communicating-with-your-existing-users\" class=\"headerlink\" title=\"Communicating with your existing users\"></a>Communicating with your existing users</h2><p>Unfortunately there is no way to way yet to automatically inform users of a name change, but you can do it yourself in two ways.</p>\n<img src=\"/javascript/2016/how-to-rename-a-published-npm-module/communicate.jpg\" alt=\"communicate with your users\" title=\"communicate with your users\">\n<p>The first is obvious: write a message in the <code>README</code> for your old repo. Explain that you changed the name, link to the new version and encourage people to move.</p>\n<p>The second is less obvious. Unless your module is very popular (in which case you won’t be reading this article), most users won’t even think to visit the GitHub page for it. But when they update or install your module, they’ll access it through npm. Wouldn’t it be nice if you could send them a message when they do so, informing them of a name change?</p>\n<p>And you guessed it, you can do exactly that. All you need is <code>npm deprecate</code> (credit to <a href=\"http://stackoverflow.com/questions/28371669/renaming-a-published-npm-module\">Peter Flannery on stackoverflow</a> for the idea).</p>\n<p>Let’s say your old module name is <code>okay-module</code>, its latest version is 2.1.0 and your new, renamed module is called <code>awesome-module</code>. Then this is the syntax:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm deprecate okay-module@2.1.0 <span class=\"string\">\"WARNING: This module has been renamed to awesome-module. Please install it instead. See &lt;GitHub page&gt; for more information.\"</span></div></pre></td></tr></table></figure>\n<p>Obviously you can put whatever you want inside the message, and whenever someone installs the latest version of your old module, they will receive that message in their terminal.</p>\n<p>Now, is this a perfect solution? No, unfortunately not. But until a new feature is added to npm to address the issue of renaming modules, this is the best we’ve got, and hey, it’s pretty good!</p>"},{"title":"How to set up Mailgun on Digital Ocean","date":"2015-10-31T02:50:09.000Z","_content":"\n_also:_ **[Forwarding mail to your Gmail account with Mailgun](/linux/2015/forwarding-mail-to-your-gmail-account-with-mailgun/)**\n\nMailgun is an awesome e-mail service that makes it super easy for developers to automate e-mail sending. I'm not going to spend much time singing its praises here. Just [check it out for yourself](http://www.mailgun.com). Suffice it to say that if you've ever thought about programmatically sending, receiving or tracking e-mail, using just about any programming language under the sun, you *really* should consider using Mailgun.\n\nI'm currently using it for a number of things, such as having my little [$5/month Digital Ocean server](https://www.digitalocean.com/?refcode=30a11cb68f93) (which is also running this website by the way) mailing me sysadmin-related notifications, error logs, updates on some websites I'm regularly scraping and other niceness.\n\n{% asset_img mailgun.png Mailgun logo %}\n\nSo yeah, I *love* Mailgun. But I have to say, it was a bit of a chore to set it up on my server. The official guidelines didn't quite work, and none of the help or blog posts I found online about this seemed up to date. After some experimentation, I got it to work though. Turns out you just have to tweak the settings a little bit to make it work with Digital Ocean.\n\nIn case anyone is finding themselves in the same situation I did: don't despair! Here is how to set it up:\n\n<!-- more -->\n\nIf you've already signed up for Mailgun and you're reading this, you probably know what you need to do already. There are five DNS records you need to add on your server. Two for sending, one for tracking and two for receiving.\n\nThe most straightforward way to get to the settings on Digital Ocean is to log in to your account, go to `Networking` and select your server.\n\nBut here's the rub: if you enter the information like Mailgun tells you to, it won't work. Then you'll probably go online and look for answers, and you'll find plenty of blog posts and even some official Digital Ocean tutorials about this. Problem solved, right?\n\nWell, not quite. The proposed solutions (at least the ones I found, and believe me, I looked) won't work either. Probably something changed recently or something so the solutions are out of date.\n\nThe solution below definitely works right now, but chances are it will go out of date at some point in the future. So if you're struggling with setting it up, try changing the settings as described below. But if it doesn't work, just think about it and look at the output of your zone file and you'll figure it out eventually!\n\nBut anyway, here is how I got it working.\n\n## Digital Ocean DNS setup for Mailgun\n\n### DNS records for sending\n\nFirst of all, you should probably wrap the values (the `v=spf1` one and the `k=rsa` one) in double quotes. I found it worked without the quotes for me, but all the other blogs mention it, so just do it to be safe.\n\nFor the first `v=spf1` TXT setting, do as the Mailgun notification tells you, and put `@` instead of the hostname.\n\nAs for the second `k=rsa` TXT setting, put `mailo._domainkey.`, followed by the subdomain if you set one (like `mail` for example), but do **not** write the hostname. Look at the zone output below, you want the *output* to be the same as what mailgun wants you to *input*.\n\n### DNS record for tracking\n\nSimilar to the `k=rsa` TXT setting above, you'll have to put `email.`, followed by the subdomain if you set it. The hostname will get added automatically.\n\nAlso don't forget to add a `.` after the `mailgun.org` value, so it makes `mailgun.org.`\n\n### DNS records for receiving\n\nThese `MX` records are actually optional (unless you want to use mailgun for receiving mail), but to make it work on Digital Ocean, just add a `.` after the values, just like above.\n\n<hr>\n\nThat's it. That should do it! It can take a while for the DNS changes to propagate so be patient. But just in case it still doesn't work, keep trying and look at the zone file.\n\nThere, I hope this was useful for someone out there! Now draw that shiny new Mailgun of yours and start shooting some mails at your users (or at yourself)!\n","source":"_posts/how-to-set-up-mailgun-on-digital-ocean.md","raw":"title: How to set up Mailgun on Digital Ocean\ncategories: linux\ntags:\n  - vps\n  - linux\n  - mailgun\ndate: 2015-10-31 02:50:09\n---\n\n_also:_ **[Forwarding mail to your Gmail account with Mailgun](/linux/2015/forwarding-mail-to-your-gmail-account-with-mailgun/)**\n\nMailgun is an awesome e-mail service that makes it super easy for developers to automate e-mail sending. I'm not going to spend much time singing its praises here. Just [check it out for yourself](http://www.mailgun.com). Suffice it to say that if you've ever thought about programmatically sending, receiving or tracking e-mail, using just about any programming language under the sun, you *really* should consider using Mailgun.\n\nI'm currently using it for a number of things, such as having my little [$5/month Digital Ocean server](https://www.digitalocean.com/?refcode=30a11cb68f93) (which is also running this website by the way) mailing me sysadmin-related notifications, error logs, updates on some websites I'm regularly scraping and other niceness.\n\n{% asset_img mailgun.png Mailgun logo %}\n\nSo yeah, I *love* Mailgun. But I have to say, it was a bit of a chore to set it up on my server. The official guidelines didn't quite work, and none of the help or blog posts I found online about this seemed up to date. After some experimentation, I got it to work though. Turns out you just have to tweak the settings a little bit to make it work with Digital Ocean.\n\nIn case anyone is finding themselves in the same situation I did: don't despair! Here is how to set it up:\n\n<!-- more -->\n\nIf you've already signed up for Mailgun and you're reading this, you probably know what you need to do already. There are five DNS records you need to add on your server. Two for sending, one for tracking and two for receiving.\n\nThe most straightforward way to get to the settings on Digital Ocean is to log in to your account, go to `Networking` and select your server.\n\nBut here's the rub: if you enter the information like Mailgun tells you to, it won't work. Then you'll probably go online and look for answers, and you'll find plenty of blog posts and even some official Digital Ocean tutorials about this. Problem solved, right?\n\nWell, not quite. The proposed solutions (at least the ones I found, and believe me, I looked) won't work either. Probably something changed recently or something so the solutions are out of date.\n\nThe solution below definitely works right now, but chances are it will go out of date at some point in the future. So if you're struggling with setting it up, try changing the settings as described below. But if it doesn't work, just think about it and look at the output of your zone file and you'll figure it out eventually!\n\nBut anyway, here is how I got it working.\n\n## Digital Ocean DNS setup for Mailgun\n\n### DNS records for sending\n\nFirst of all, you should probably wrap the values (the `v=spf1` one and the `k=rsa` one) in double quotes. I found it worked without the quotes for me, but all the other blogs mention it, so just do it to be safe.\n\nFor the first `v=spf1` TXT setting, do as the Mailgun notification tells you, and put `@` instead of the hostname.\n\nAs for the second `k=rsa` TXT setting, put `mailo._domainkey.`, followed by the subdomain if you set one (like `mail` for example), but do **not** write the hostname. Look at the zone output below, you want the *output* to be the same as what mailgun wants you to *input*.\n\n### DNS record for tracking\n\nSimilar to the `k=rsa` TXT setting above, you'll have to put `email.`, followed by the subdomain if you set it. The hostname will get added automatically.\n\nAlso don't forget to add a `.` after the `mailgun.org` value, so it makes `mailgun.org.`\n\n### DNS records for receiving\n\nThese `MX` records are actually optional (unless you want to use mailgun for receiving mail), but to make it work on Digital Ocean, just add a `.` after the values, just like above.\n\n<hr>\n\nThat's it. That should do it! It can take a while for the DNS changes to propagate so be patient. But just in case it still doesn't work, keep trying and look at the zone file.\n\nThere, I hope this was useful for someone out there! Now draw that shiny new Mailgun of yours and start shooting some mails at your users (or at yourself)!\n","slug":"how-to-set-up-mailgun-on-digital-ocean","published":1,"updated":"2015-12-19T15:27:50.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk38001lknz9lh89gb3j","content":"<p><em>also:</em> <strong><a href=\"/linux/2015/forwarding-mail-to-your-gmail-account-with-mailgun/\">Forwarding mail to your Gmail account with Mailgun</a></strong></p>\n<p>Mailgun is an awesome e-mail service that makes it super easy for developers to automate e-mail sending. I’m not going to spend much time singing its praises here. Just <a href=\"http://www.mailgun.com\" target=\"_blank\" rel=\"external\">check it out for yourself</a>. Suffice it to say that if you’ve ever thought about programmatically sending, receiving or tracking e-mail, using just about any programming language under the sun, you <em>really</em> should consider using Mailgun.</p>\n<p>I’m currently using it for a number of things, such as having my little <a href=\"https://www.digitalocean.com/?refcode=30a11cb68f93\" target=\"_blank\" rel=\"external\">$5/month Digital Ocean server</a> (which is also running this website by the way) mailing me sysadmin-related notifications, error logs, updates on some websites I’m regularly scraping and other niceness.</p>\n<img src=\"/linux/2015/how-to-set-up-mailgun-on-digital-ocean/mailgun.png\" alt=\"Mailgun logo\" title=\"Mailgun logo\">\n<p>So yeah, I <em>love</em> Mailgun. But I have to say, it was a bit of a chore to set it up on my server. The official guidelines didn’t quite work, and none of the help or blog posts I found online about this seemed up to date. After some experimentation, I got it to work though. Turns out you just have to tweak the settings a little bit to make it work with Digital Ocean.</p>\n<p>In case anyone is finding themselves in the same situation I did: don’t despair! Here is how to set it up:</p>\n<a id=\"more\"></a>\n<p>If you’ve already signed up for Mailgun and you’re reading this, you probably know what you need to do already. There are five DNS records you need to add on your server. Two for sending, one for tracking and two for receiving.</p>\n<p>The most straightforward way to get to the settings on Digital Ocean is to log in to your account, go to <code>Networking</code> and select your server.</p>\n<p>But here’s the rub: if you enter the information like Mailgun tells you to, it won’t work. Then you’ll probably go online and look for answers, and you’ll find plenty of blog posts and even some official Digital Ocean tutorials about this. Problem solved, right?</p>\n<p>Well, not quite. The proposed solutions (at least the ones I found, and believe me, I looked) won’t work either. Probably something changed recently or something so the solutions are out of date.</p>\n<p>The solution below definitely works right now, but chances are it will go out of date at some point in the future. So if you’re struggling with setting it up, try changing the settings as described below. But if it doesn’t work, just think about it and look at the output of your zone file and you’ll figure it out eventually!</p>\n<p>But anyway, here is how I got it working.</p>\n<h2 id=\"Digital-Ocean-DNS-setup-for-Mailgun\"><a href=\"#Digital-Ocean-DNS-setup-for-Mailgun\" class=\"headerlink\" title=\"Digital Ocean DNS setup for Mailgun\"></a>Digital Ocean DNS setup for Mailgun</h2><h3 id=\"DNS-records-for-sending\"><a href=\"#DNS-records-for-sending\" class=\"headerlink\" title=\"DNS records for sending\"></a>DNS records for sending</h3><p>First of all, you should probably wrap the values (the <code>v=spf1</code> one and the <code>k=rsa</code> one) in double quotes. I found it worked without the quotes for me, but all the other blogs mention it, so just do it to be safe.</p>\n<p>For the first <code>v=spf1</code> TXT setting, do as the Mailgun notification tells you, and put <code>@</code> instead of the hostname.</p>\n<p>As for the second <code>k=rsa</code> TXT setting, put <code>mailo._domainkey.</code>, followed by the subdomain if you set one (like <code>mail</code> for example), but do <strong>not</strong> write the hostname. Look at the zone output below, you want the <em>output</em> to be the same as what mailgun wants you to <em>input</em>.</p>\n<h3 id=\"DNS-record-for-tracking\"><a href=\"#DNS-record-for-tracking\" class=\"headerlink\" title=\"DNS record for tracking\"></a>DNS record for tracking</h3><p>Similar to the <code>k=rsa</code> TXT setting above, you’ll have to put <code>email.</code>, followed by the subdomain if you set it. The hostname will get added automatically.</p>\n<p>Also don’t forget to add a <code>.</code> after the <code>mailgun.org</code> value, so it makes <code>mailgun.org.</code></p>\n<h3 id=\"DNS-records-for-receiving\"><a href=\"#DNS-records-for-receiving\" class=\"headerlink\" title=\"DNS records for receiving\"></a>DNS records for receiving</h3><p>These <code>MX</code> records are actually optional (unless you want to use mailgun for receiving mail), but to make it work on Digital Ocean, just add a <code>.</code> after the values, just like above.</p>\n<hr>\n\n<p>That’s it. That should do it! It can take a while for the DNS changes to propagate so be patient. But just in case it still doesn’t work, keep trying and look at the zone file.</p>\n<p>There, I hope this was useful for someone out there! Now draw that shiny new Mailgun of yours and start shooting some mails at your users (or at yourself)!</p>","excerpt":"<p><em>also:</em> <strong><a href=\"/linux/2015/forwarding-mail-to-your-gmail-account-with-mailgun/\">Forwarding mail to your Gmail account with Mailgun</a></strong></p>\n<p>Mailgun is an awesome e-mail service that makes it super easy for developers to automate e-mail sending. I’m not going to spend much time singing its praises here. Just <a href=\"http://www.mailgun.com\">check it out for yourself</a>. Suffice it to say that if you’ve ever thought about programmatically sending, receiving or tracking e-mail, using just about any programming language under the sun, you <em>really</em> should consider using Mailgun.</p>\n<p>I’m currently using it for a number of things, such as having my little <a href=\"https://www.digitalocean.com/?refcode=30a11cb68f93\">$5/month Digital Ocean server</a> (which is also running this website by the way) mailing me sysadmin-related notifications, error logs, updates on some websites I’m regularly scraping and other niceness.</p>\n<img src=\"/linux/2015/how-to-set-up-mailgun-on-digital-ocean/mailgun.png\" alt=\"Mailgun logo\" title=\"Mailgun logo\">\n<p>So yeah, I <em>love</em> Mailgun. But I have to say, it was a bit of a chore to set it up on my server. The official guidelines didn’t quite work, and none of the help or blog posts I found online about this seemed up to date. After some experimentation, I got it to work though. Turns out you just have to tweak the settings a little bit to make it work with Digital Ocean.</p>\n<p>In case anyone is finding themselves in the same situation I did: don’t despair! Here is how to set it up:</p>","more":"<p>If you’ve already signed up for Mailgun and you’re reading this, you probably know what you need to do already. There are five DNS records you need to add on your server. Two for sending, one for tracking and two for receiving.</p>\n<p>The most straightforward way to get to the settings on Digital Ocean is to log in to your account, go to <code>Networking</code> and select your server.</p>\n<p>But here’s the rub: if you enter the information like Mailgun tells you to, it won’t work. Then you’ll probably go online and look for answers, and you’ll find plenty of blog posts and even some official Digital Ocean tutorials about this. Problem solved, right?</p>\n<p>Well, not quite. The proposed solutions (at least the ones I found, and believe me, I looked) won’t work either. Probably something changed recently or something so the solutions are out of date.</p>\n<p>The solution below definitely works right now, but chances are it will go out of date at some point in the future. So if you’re struggling with setting it up, try changing the settings as described below. But if it doesn’t work, just think about it and look at the output of your zone file and you’ll figure it out eventually!</p>\n<p>But anyway, here is how I got it working.</p>\n<h2 id=\"Digital-Ocean-DNS-setup-for-Mailgun\"><a href=\"#Digital-Ocean-DNS-setup-for-Mailgun\" class=\"headerlink\" title=\"Digital Ocean DNS setup for Mailgun\"></a>Digital Ocean DNS setup for Mailgun</h2><h3 id=\"DNS-records-for-sending\"><a href=\"#DNS-records-for-sending\" class=\"headerlink\" title=\"DNS records for sending\"></a>DNS records for sending</h3><p>First of all, you should probably wrap the values (the <code>v=spf1</code> one and the <code>k=rsa</code> one) in double quotes. I found it worked without the quotes for me, but all the other blogs mention it, so just do it to be safe.</p>\n<p>For the first <code>v=spf1</code> TXT setting, do as the Mailgun notification tells you, and put <code>@</code> instead of the hostname.</p>\n<p>As for the second <code>k=rsa</code> TXT setting, put <code>mailo._domainkey.</code>, followed by the subdomain if you set one (like <code>mail</code> for example), but do <strong>not</strong> write the hostname. Look at the zone output below, you want the <em>output</em> to be the same as what mailgun wants you to <em>input</em>.</p>\n<h3 id=\"DNS-record-for-tracking\"><a href=\"#DNS-record-for-tracking\" class=\"headerlink\" title=\"DNS record for tracking\"></a>DNS record for tracking</h3><p>Similar to the <code>k=rsa</code> TXT setting above, you’ll have to put <code>email.</code>, followed by the subdomain if you set it. The hostname will get added automatically.</p>\n<p>Also don’t forget to add a <code>.</code> after the <code>mailgun.org</code> value, so it makes <code>mailgun.org.</code></p>\n<h3 id=\"DNS-records-for-receiving\"><a href=\"#DNS-records-for-receiving\" class=\"headerlink\" title=\"DNS records for receiving\"></a>DNS records for receiving</h3><p>These <code>MX</code> records are actually optional (unless you want to use mailgun for receiving mail), but to make it work on Digital Ocean, just add a <code>.</code> after the values, just like above.</p>\n<hr>\n\n<p>That’s it. That should do it! It can take a while for the DNS changes to propagate so be patient. But just in case it still doesn’t work, keep trying and look at the zone file.</p>\n<p>There, I hope this was useful for someone out there! Now draw that shiny new Mailgun of yours and start shooting some mails at your users (or at yourself)!</p>"},{"title":"How to scrape the web gently with Node.js","date":"2015-12-03T03:37:34.000Z","_content":"\nI was scraping a few thousand links from a single domain just a little too aggressively yesterday and kept getting `ECONNRESET` and `socket hang up` errors instead of that sweet, sweet data I longed for. Like usual, it took quite a bit of searching, testing, googling and experimenting until I finally identified the correct solution to the problem.\n\nIf you (yes, _you_) are getting `request error: read ECONNRESET` and/or `request error: socket hang up` errors in Node when scraping websites for data, chances are it's because you're essentially bombarding the server with thousands of requests. The server at some point stops responding to your suspicious behavior and all those requests you launched start coming back empty-handed.\n\nThe correct way to address this issue depends on your code of course. In my case for example, it was no use limiting my promise concurrency for the promise array I was mapping over, but for you that might be the easier solution. I'll quickly go over two alternative solutions which may work for you before saying a few words about the one that did for me.\n\n<!-- more -->\n\n## Limiting maximum concurrent sockets in Node\n\nSince version 0.12, Node.js puts no limit whatsoever on the default maximum amount of concurrent sockets allowed for the global http agent. In some cases this is great, in others - like when you're scraping the web - it can cause problems.\n\nNo matter which library you're using to make your requests (I use [request-promise](https://github.com/request/request-promise)), as long as it's using the `http` module under the hood (which is virtually always the case), you can change `maxSockets` setting by calling it early in your script - ie before you make the actual requests or even load your request library.\n\nSo here's the code, put this in your init or config script, or right near the top of your file:\n\n{% codeblock lang:javascript %}\nvar http = require('http');\nvar https = require('https');\n\nhttp.globalAgent.maxSockets = 1;\nhttps.globalAgent.maxSockets = 1;\n{% endcodeblock %}\n\nAs you can see, I set a very low hard limit to the amount of sockets for both the `http` and the `https` globalAgent. This is because changing the `http` settings won't make any difference if all you're making is `https` requests! I should have been sleeping, but instead I spent about an hour and a half debugging and despairing at 3 AM in the morning by overlooking this simple and somewhat obvious fact, so make sure to double-check this.\n\nNote that you can probably get away with a few more sockets, but hey, I was fine with it taking a bit longer, as long as I got to the data. And I like the site I was scraping, so I wanted to be as nice as possible!\n\nFinally, you can change the settings on a specific agent for some more fine-grained control, but if you do that, you'll have to manually make your requests using the `http` module. So if you want to use `request`, `superagent`, `fetch` or whatever, you'll only be able to manipulate the maxSockets setting of the globalAgent, unless maybe the library in question exposes this setting to you.\n\n## Other solutions\n\nQuickly, here are a few alternative solutions to the problem of requests going out way too fast:\n\n### Batching & promise concurrency\n\nThe most straightforward solution for you might actually be to change your code so you're not firing off all your requests at the same time. To make sure that doesn't happen, you could make a queue or split up your big array full of requests into ten small ones and process them in turn.\n\nIt's hard to write out specific code snippets for this, as this obviously depends on a multitude of factors. However, one thing I'd like to mention in a bit more detail is promise concurrency.\n\nPromise concurrency is the idea that when you're processing an array full of promises, you can only have a set number of them resolving at the same time. For example, if you have an array of 150 promises which each resolve with data from a server and the concurrency is set to 2, the third promise will only begin to resolve when the first comes back with the data. Of course whether this is helpful for you or not depends on how you've set up your promise array.\n\nI use `Bluebird` so here's how you set a concurrency limit when using the `.map` or the `.filter` method (at the time of writing the only ones that have implemented the limit), using two different styles:\n\n{% codeblock lang:javascript %}\nPromise.map(promiseArray, mapFunction, { concurrency: 2 });\npromiseArray.filter(filterFunction, { concurrency: 2 });\n{% endcodeblock %}\n\nI don't use other promise libraries, but I assume they probably have a somewhat similar feature.\n\n### async\n\nWherever there's a problem in Node involving timing or asynchronicity, there is the [async module](https://github.com/caolan/async) with a solution. Now, `async` uses callbacks and not promises so again this may not be what you're looking for.\n\nThen again, it may be _exactly_ what you are looking for. Here are two methods straight from the docs you will want to look at if you want to solve your concurrency problem using `async`:\n\n- [async.queue](https://github.com/caolan/async#queue)\n- [async.parallelLimit](https://github.com/caolan/async#parallel)\n","source":"_posts/how-to-scrape-the-web-gently-with-node-js.md","raw":"title: How to scrape the web gently with Node.js\ndate: 2015-12-03 03:37:34\ncategories: javascript\ntags:\n- node\n- js\n- scraping\n---\n\nI was scraping a few thousand links from a single domain just a little too aggressively yesterday and kept getting `ECONNRESET` and `socket hang up` errors instead of that sweet, sweet data I longed for. Like usual, it took quite a bit of searching, testing, googling and experimenting until I finally identified the correct solution to the problem.\n\nIf you (yes, _you_) are getting `request error: read ECONNRESET` and/or `request error: socket hang up` errors in Node when scraping websites for data, chances are it's because you're essentially bombarding the server with thousands of requests. The server at some point stops responding to your suspicious behavior and all those requests you launched start coming back empty-handed.\n\nThe correct way to address this issue depends on your code of course. In my case for example, it was no use limiting my promise concurrency for the promise array I was mapping over, but for you that might be the easier solution. I'll quickly go over two alternative solutions which may work for you before saying a few words about the one that did for me.\n\n<!-- more -->\n\n## Limiting maximum concurrent sockets in Node\n\nSince version 0.12, Node.js puts no limit whatsoever on the default maximum amount of concurrent sockets allowed for the global http agent. In some cases this is great, in others - like when you're scraping the web - it can cause problems.\n\nNo matter which library you're using to make your requests (I use [request-promise](https://github.com/request/request-promise)), as long as it's using the `http` module under the hood (which is virtually always the case), you can change `maxSockets` setting by calling it early in your script - ie before you make the actual requests or even load your request library.\n\nSo here's the code, put this in your init or config script, or right near the top of your file:\n\n{% codeblock lang:javascript %}\nvar http = require('http');\nvar https = require('https');\n\nhttp.globalAgent.maxSockets = 1;\nhttps.globalAgent.maxSockets = 1;\n{% endcodeblock %}\n\nAs you can see, I set a very low hard limit to the amount of sockets for both the `http` and the `https` globalAgent. This is because changing the `http` settings won't make any difference if all you're making is `https` requests! I should have been sleeping, but instead I spent about an hour and a half debugging and despairing at 3 AM in the morning by overlooking this simple and somewhat obvious fact, so make sure to double-check this.\n\nNote that you can probably get away with a few more sockets, but hey, I was fine with it taking a bit longer, as long as I got to the data. And I like the site I was scraping, so I wanted to be as nice as possible!\n\nFinally, you can change the settings on a specific agent for some more fine-grained control, but if you do that, you'll have to manually make your requests using the `http` module. So if you want to use `request`, `superagent`, `fetch` or whatever, you'll only be able to manipulate the maxSockets setting of the globalAgent, unless maybe the library in question exposes this setting to you.\n\n## Other solutions\n\nQuickly, here are a few alternative solutions to the problem of requests going out way too fast:\n\n### Batching & promise concurrency\n\nThe most straightforward solution for you might actually be to change your code so you're not firing off all your requests at the same time. To make sure that doesn't happen, you could make a queue or split up your big array full of requests into ten small ones and process them in turn.\n\nIt's hard to write out specific code snippets for this, as this obviously depends on a multitude of factors. However, one thing I'd like to mention in a bit more detail is promise concurrency.\n\nPromise concurrency is the idea that when you're processing an array full of promises, you can only have a set number of them resolving at the same time. For example, if you have an array of 150 promises which each resolve with data from a server and the concurrency is set to 2, the third promise will only begin to resolve when the first comes back with the data. Of course whether this is helpful for you or not depends on how you've set up your promise array.\n\nI use `Bluebird` so here's how you set a concurrency limit when using the `.map` or the `.filter` method (at the time of writing the only ones that have implemented the limit), using two different styles:\n\n{% codeblock lang:javascript %}\nPromise.map(promiseArray, mapFunction, { concurrency: 2 });\npromiseArray.filter(filterFunction, { concurrency: 2 });\n{% endcodeblock %}\n\nI don't use other promise libraries, but I assume they probably have a somewhat similar feature.\n\n### async\n\nWherever there's a problem in Node involving timing or asynchronicity, there is the [async module](https://github.com/caolan/async) with a solution. Now, `async` uses callbacks and not promises so again this may not be what you're looking for.\n\nThen again, it may be _exactly_ what you are looking for. Here are two methods straight from the docs you will want to look at if you want to solve your concurrency problem using `async`:\n\n- [async.queue](https://github.com/caolan/async#queue)\n- [async.parallelLimit](https://github.com/caolan/async#parallel)\n","slug":"how-to-scrape-the-web-gently-with-node-js","published":1,"updated":"2015-12-03T14:42:03.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk3a001oknz9pws6leof","content":"<p>I was scraping a few thousand links from a single domain just a little too aggressively yesterday and kept getting <code>ECONNRESET</code> and <code>socket hang up</code> errors instead of that sweet, sweet data I longed for. Like usual, it took quite a bit of searching, testing, googling and experimenting until I finally identified the correct solution to the problem.</p>\n<p>If you (yes, <em>you</em>) are getting <code>request error: read ECONNRESET</code> and/or <code>request error: socket hang up</code> errors in Node when scraping websites for data, chances are it’s because you’re essentially bombarding the server with thousands of requests. The server at some point stops responding to your suspicious behavior and all those requests you launched start coming back empty-handed.</p>\n<p>The correct way to address this issue depends on your code of course. In my case for example, it was no use limiting my promise concurrency for the promise array I was mapping over, but for you that might be the easier solution. I’ll quickly go over two alternative solutions which may work for you before saying a few words about the one that did for me.</p>\n<a id=\"more\"></a>\n<h2 id=\"Limiting-maximum-concurrent-sockets-in-Node\"><a href=\"#Limiting-maximum-concurrent-sockets-in-Node\" class=\"headerlink\" title=\"Limiting maximum concurrent sockets in Node\"></a>Limiting maximum concurrent sockets in Node</h2><p>Since version 0.12, Node.js puts no limit whatsoever on the default maximum amount of concurrent sockets allowed for the global http agent. In some cases this is great, in others - like when you’re scraping the web - it can cause problems.</p>\n<p>No matter which library you’re using to make your requests (I use <a href=\"https://github.com/request/request-promise\" target=\"_blank\" rel=\"external\">request-promise</a>), as long as it’s using the <code>http</code> module under the hood (which is virtually always the case), you can change <code>maxSockets</code> setting by calling it early in your script - ie before you make the actual requests or even load your request library.</p>\n<p>So here’s the code, put this in your init or config script, or right near the top of your file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"></div><div class=\"line\">http.globalAgent.maxSockets = <span class=\"number\">1</span>;</div><div class=\"line\">https.globalAgent.maxSockets = <span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<p>As you can see, I set a very low hard limit to the amount of sockets for both the <code>http</code> and the <code>https</code> globalAgent. This is because changing the <code>http</code> settings won’t make any difference if all you’re making is <code>https</code> requests! I should have been sleeping, but instead I spent about an hour and a half debugging and despairing at 3 AM in the morning by overlooking this simple and somewhat obvious fact, so make sure to double-check this.</p>\n<p>Note that you can probably get away with a few more sockets, but hey, I was fine with it taking a bit longer, as long as I got to the data. And I like the site I was scraping, so I wanted to be as nice as possible!</p>\n<p>Finally, you can change the settings on a specific agent for some more fine-grained control, but if you do that, you’ll have to manually make your requests using the <code>http</code> module. So if you want to use <code>request</code>, <code>superagent</code>, <code>fetch</code> or whatever, you’ll only be able to manipulate the maxSockets setting of the globalAgent, unless maybe the library in question exposes this setting to you.</p>\n<h2 id=\"Other-solutions\"><a href=\"#Other-solutions\" class=\"headerlink\" title=\"Other solutions\"></a>Other solutions</h2><p>Quickly, here are a few alternative solutions to the problem of requests going out way too fast:</p>\n<h3 id=\"Batching-amp-promise-concurrency\"><a href=\"#Batching-amp-promise-concurrency\" class=\"headerlink\" title=\"Batching &amp; promise concurrency\"></a>Batching &amp; promise concurrency</h3><p>The most straightforward solution for you might actually be to change your code so you’re not firing off all your requests at the same time. To make sure that doesn’t happen, you could make a queue or split up your big array full of requests into ten small ones and process them in turn.</p>\n<p>It’s hard to write out specific code snippets for this, as this obviously depends on a multitude of factors. However, one thing I’d like to mention in a bit more detail is promise concurrency.</p>\n<p>Promise concurrency is the idea that when you’re processing an array full of promises, you can only have a set number of them resolving at the same time. For example, if you have an array of 150 promises which each resolve with data from a server and the concurrency is set to 2, the third promise will only begin to resolve when the first comes back with the data. Of course whether this is helpful for you or not depends on how you’ve set up your promise array.</p>\n<p>I use <code>Bluebird</code> so here’s how you set a concurrency limit when using the <code>.map</code> or the <code>.filter</code> method (at the time of writing the only ones that have implemented the limit), using two different styles:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.map(promiseArray, mapFunction, &#123; concurrency: <span class=\"number\">2</span> &#125;);</div><div class=\"line\">promiseArray.filter(filterFunction, &#123; concurrency: <span class=\"number\">2</span> &#125;);</div></pre></td></tr></table></figure>\n<p>I don’t use other promise libraries, but I assume they probably have a somewhat similar feature.</p>\n<h3 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h3><p>Wherever there’s a problem in Node involving timing or asynchronicity, there is the <a href=\"https://github.com/caolan/async\" target=\"_blank\" rel=\"external\">async module</a> with a solution. Now, <code>async</code> uses callbacks and not promises so again this may not be what you’re looking for.</p>\n<p>Then again, it may be <em>exactly</em> what you are looking for. Here are two methods straight from the docs you will want to look at if you want to solve your concurrency problem using <code>async</code>:</p>\n<ul>\n<li><a href=\"https://github.com/caolan/async#queue\" target=\"_blank\" rel=\"external\">async.queue</a></li>\n<li><a href=\"https://github.com/caolan/async#parallel\" target=\"_blank\" rel=\"external\">async.parallelLimit</a></li>\n</ul>","excerpt":"<p>I was scraping a few thousand links from a single domain just a little too aggressively yesterday and kept getting <code>ECONNRESET</code> and <code>socket hang up</code> errors instead of that sweet, sweet data I longed for. Like usual, it took quite a bit of searching, testing, googling and experimenting until I finally identified the correct solution to the problem.</p>\n<p>If you (yes, <em>you</em>) are getting <code>request error: read ECONNRESET</code> and/or <code>request error: socket hang up</code> errors in Node when scraping websites for data, chances are it’s because you’re essentially bombarding the server with thousands of requests. The server at some point stops responding to your suspicious behavior and all those requests you launched start coming back empty-handed.</p>\n<p>The correct way to address this issue depends on your code of course. In my case for example, it was no use limiting my promise concurrency for the promise array I was mapping over, but for you that might be the easier solution. I’ll quickly go over two alternative solutions which may work for you before saying a few words about the one that did for me.</p>","more":"<h2 id=\"Limiting-maximum-concurrent-sockets-in-Node\"><a href=\"#Limiting-maximum-concurrent-sockets-in-Node\" class=\"headerlink\" title=\"Limiting maximum concurrent sockets in Node\"></a>Limiting maximum concurrent sockets in Node</h2><p>Since version 0.12, Node.js puts no limit whatsoever on the default maximum amount of concurrent sockets allowed for the global http agent. In some cases this is great, in others - like when you’re scraping the web - it can cause problems.</p>\n<p>No matter which library you’re using to make your requests (I use <a href=\"https://github.com/request/request-promise\">request-promise</a>), as long as it’s using the <code>http</code> module under the hood (which is virtually always the case), you can change <code>maxSockets</code> setting by calling it early in your script - ie before you make the actual requests or even load your request library.</p>\n<p>So here’s the code, put this in your init or config script, or right near the top of your file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"></div><div class=\"line\">http.globalAgent.maxSockets = <span class=\"number\">1</span>;</div><div class=\"line\">https.globalAgent.maxSockets = <span class=\"number\">1</span>;</div></pre></td></tr></table></figure>\n<p>As you can see, I set a very low hard limit to the amount of sockets for both the <code>http</code> and the <code>https</code> globalAgent. This is because changing the <code>http</code> settings won’t make any difference if all you’re making is <code>https</code> requests! I should have been sleeping, but instead I spent about an hour and a half debugging and despairing at 3 AM in the morning by overlooking this simple and somewhat obvious fact, so make sure to double-check this.</p>\n<p>Note that you can probably get away with a few more sockets, but hey, I was fine with it taking a bit longer, as long as I got to the data. And I like the site I was scraping, so I wanted to be as nice as possible!</p>\n<p>Finally, you can change the settings on a specific agent for some more fine-grained control, but if you do that, you’ll have to manually make your requests using the <code>http</code> module. So if you want to use <code>request</code>, <code>superagent</code>, <code>fetch</code> or whatever, you’ll only be able to manipulate the maxSockets setting of the globalAgent, unless maybe the library in question exposes this setting to you.</p>\n<h2 id=\"Other-solutions\"><a href=\"#Other-solutions\" class=\"headerlink\" title=\"Other solutions\"></a>Other solutions</h2><p>Quickly, here are a few alternative solutions to the problem of requests going out way too fast:</p>\n<h3 id=\"Batching-amp-promise-concurrency\"><a href=\"#Batching-amp-promise-concurrency\" class=\"headerlink\" title=\"Batching &amp; promise concurrency\"></a>Batching &amp; promise concurrency</h3><p>The most straightforward solution for you might actually be to change your code so you’re not firing off all your requests at the same time. To make sure that doesn’t happen, you could make a queue or split up your big array full of requests into ten small ones and process them in turn.</p>\n<p>It’s hard to write out specific code snippets for this, as this obviously depends on a multitude of factors. However, one thing I’d like to mention in a bit more detail is promise concurrency.</p>\n<p>Promise concurrency is the idea that when you’re processing an array full of promises, you can only have a set number of them resolving at the same time. For example, if you have an array of 150 promises which each resolve with data from a server and the concurrency is set to 2, the third promise will only begin to resolve when the first comes back with the data. Of course whether this is helpful for you or not depends on how you’ve set up your promise array.</p>\n<p>I use <code>Bluebird</code> so here’s how you set a concurrency limit when using the <code>.map</code> or the <code>.filter</code> method (at the time of writing the only ones that have implemented the limit), using two different styles:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.map(promiseArray, mapFunction, &#123; concurrency: <span class=\"number\">2</span> &#125;);</div><div class=\"line\">promiseArray.filter(filterFunction, &#123; concurrency: <span class=\"number\">2</span> &#125;);</div></pre></td></tr></table></figure>\n<p>I don’t use other promise libraries, but I assume they probably have a somewhat similar feature.</p>\n<h3 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h3><p>Wherever there’s a problem in Node involving timing or asynchronicity, there is the <a href=\"https://github.com/caolan/async\">async module</a> with a solution. Now, <code>async</code> uses callbacks and not promises so again this may not be what you’re looking for.</p>\n<p>Then again, it may be <em>exactly</em> what you are looking for. Here are two methods straight from the docs you will want to look at if you want to solve your concurrency problem using <code>async</code>:</p>\n<ul>\n<li><a href=\"https://github.com/caolan/async#queue\">async.queue</a></li>\n<li><a href=\"https://github.com/caolan/async#parallel\">async.parallelLimit</a></li>\n</ul>"},{"title":"How to use shell variables in awk","date":"2015-11-07T18:15:53.000Z","_content":"\nIf you ever find yourself in a life-or-death kind of thing where you're forced to use shell variable in your awk scripts, then fear not!\n\nFirst, here's what **doesn't** work (warning: contrived example):\n\n{% codeblock lang:bash %}\nstatement=$(echo \"something is not cool\" | sed -e 's/cool/awesome/')\n# $statement is now \"something is not awesome\"\n\nfirst=$(echo \"$statement\" | awk '{ print $1 }')\n# $first is now \"something\"\n\n# now let's pipe $statement into awk to print the first, second and\n# fourth column, but only if the first column matches $first!\ntruth=$(echo $statement | awk '$1 ~ $first { print $1, $2, $4 }')\n\necho $truth\n# nothing happens\n{% endcodeblock %}\n\nThe problem is that awk doesn't know about `$first_word`.\n\nThe solution (or one of the possible solutions) is to teach it in the BEGIN block. Here's the right code:\n\n<!-- more -->\n\n{% codeblock lang:bash %}\nstatement=$(echo \"something is not cool\" | sed -e 's/cool/awesome/')\n# $statement is now \"something is not awesome\"\n\nfirst=$(echo \"$statement\" | awk '{ print $1 }')\n# $first is now \"something\"\n\n# now let's pipe $statement into awk to print the first, second and\n# fourth column, but only if the first column is equal to $first!\ntruth=$(echo $statement | awk 'BEGIN { first=$first } $1 ~ first { print $1, $2, $4 }')\n\necho $truth\n# -> \"something is awesome\"! but wait, let's fix that..\n\necho $(echo $truth | sed -e 's/something/everything/')\n# done and done\n{% endcodeblock %}\n\nIn the begin block, set `first` (no `$` necessary in awk) to the shell variable `$first`. Now you can use it.\n\nHappy `awk`ing!\n","source":"_posts/how-to-use-shell-variables-in-awk.md","raw":"title: 'How to use shell variables in awk'\ndate: 2015-11-07 18:15:53\ncategories: linux\ntags:\n- awk\n- command line\n- shell\n---\n\nIf you ever find yourself in a life-or-death kind of thing where you're forced to use shell variable in your awk scripts, then fear not!\n\nFirst, here's what **doesn't** work (warning: contrived example):\n\n{% codeblock lang:bash %}\nstatement=$(echo \"something is not cool\" | sed -e 's/cool/awesome/')\n# $statement is now \"something is not awesome\"\n\nfirst=$(echo \"$statement\" | awk '{ print $1 }')\n# $first is now \"something\"\n\n# now let's pipe $statement into awk to print the first, second and\n# fourth column, but only if the first column matches $first!\ntruth=$(echo $statement | awk '$1 ~ $first { print $1, $2, $4 }')\n\necho $truth\n# nothing happens\n{% endcodeblock %}\n\nThe problem is that awk doesn't know about `$first_word`.\n\nThe solution (or one of the possible solutions) is to teach it in the BEGIN block. Here's the right code:\n\n<!-- more -->\n\n{% codeblock lang:bash %}\nstatement=$(echo \"something is not cool\" | sed -e 's/cool/awesome/')\n# $statement is now \"something is not awesome\"\n\nfirst=$(echo \"$statement\" | awk '{ print $1 }')\n# $first is now \"something\"\n\n# now let's pipe $statement into awk to print the first, second and\n# fourth column, but only if the first column is equal to $first!\ntruth=$(echo $statement | awk 'BEGIN { first=$first } $1 ~ first { print $1, $2, $4 }')\n\necho $truth\n# -> \"something is awesome\"! but wait, let's fix that..\n\necho $(echo $truth | sed -e 's/something/everything/')\n# done and done\n{% endcodeblock %}\n\nIn the begin block, set `first` (no `$` necessary in awk) to the shell variable `$first`. Now you can use it.\n\nHappy `awk`ing!\n","slug":"how-to-use-shell-variables-in-awk","published":1,"updated":"2015-11-21T14:07:16.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk3c001qknz9jyknjj2r","content":"<p>If you ever find yourself in a life-or-death kind of thing where you’re forced to use shell variable in your awk scripts, then fear not!</p>\n<p>First, here’s what <strong>doesn’t</strong> work (warning: contrived example):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">statement=$(<span class=\"built_in\">echo</span> <span class=\"string\">\"something is not cool\"</span> | sed <span class=\"_\">-e</span> <span class=\"string\">'s/cool/awesome/'</span>)</div><div class=\"line\"><span class=\"comment\"># $statement is now \"something is not awesome\"</span></div><div class=\"line\"></div><div class=\"line\">first=$(<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$statement</span>\"</span> | awk <span class=\"string\">'&#123; print $1 &#125;'</span>)</div><div class=\"line\"><span class=\"comment\"># $first is now \"something\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># now let's pipe $statement into awk to print the first, second and</span></div><div class=\"line\"><span class=\"comment\"># fourth column, but only if the first column matches $first!</span></div><div class=\"line\">truth=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$statement</span> | awk <span class=\"string\">'$1 ~ $first &#123; print $1, $2, $4 &#125;'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$truth</span></div><div class=\"line\"><span class=\"comment\"># nothing happens</span></div></pre></td></tr></table></figure>\n<p>The problem is that awk doesn’t know about <code>$first_word</code>.</p>\n<p>The solution (or one of the possible solutions) is to teach it in the BEGIN block. Here’s the right code:</p>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">statement=$(<span class=\"built_in\">echo</span> <span class=\"string\">\"something is not cool\"</span> | sed <span class=\"_\">-e</span> <span class=\"string\">'s/cool/awesome/'</span>)</div><div class=\"line\"><span class=\"comment\"># $statement is now \"something is not awesome\"</span></div><div class=\"line\"></div><div class=\"line\">first=$(<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$statement</span>\"</span> | awk <span class=\"string\">'&#123; print $1 &#125;'</span>)</div><div class=\"line\"><span class=\"comment\"># $first is now \"something\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># now let's pipe $statement into awk to print the first, second and</span></div><div class=\"line\"><span class=\"comment\"># fourth column, but only if the first column is equal to $first!</span></div><div class=\"line\">truth=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$statement</span> | awk <span class=\"string\">'BEGIN &#123; first=$first &#125; $1 ~ first &#123; print $1, $2, $4 &#125;'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$truth</span></div><div class=\"line\"><span class=\"comment\"># -&gt; \"something is awesome\"! but wait, let's fix that..</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> $(<span class=\"built_in\">echo</span> <span class=\"variable\">$truth</span> | sed <span class=\"_\">-e</span> <span class=\"string\">'s/something/everything/'</span>)</div><div class=\"line\"><span class=\"comment\"># done and done</span></div></pre></td></tr></table></figure>\n<p>In the begin block, set <code>first</code> (no <code>$</code> necessary in awk) to the shell variable <code>$first</code>. Now you can use it.</p>\n<p>Happy <code>awk</code>ing!</p>","excerpt":"<p>If you ever find yourself in a life-or-death kind of thing where you’re forced to use shell variable in your awk scripts, then fear not!</p>\n<p>First, here’s what <strong>doesn’t</strong> work (warning: contrived example):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">statement=$(<span class=\"built_in\">echo</span> <span class=\"string\">\"something is not cool\"</span> | sed <span class=\"_\">-e</span> <span class=\"string\">'s/cool/awesome/'</span>)</div><div class=\"line\"><span class=\"comment\"># $statement is now \"something is not awesome\"</span></div><div class=\"line\"></div><div class=\"line\">first=$(<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$statement</span>\"</span> | awk <span class=\"string\">'&#123; print $1 &#125;'</span>)</div><div class=\"line\"><span class=\"comment\"># $first is now \"something\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># now let's pipe $statement into awk to print the first, second and</span></div><div class=\"line\"><span class=\"comment\"># fourth column, but only if the first column matches $first!</span></div><div class=\"line\">truth=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$statement</span> | awk <span class=\"string\">'$1 ~ $first &#123; print $1, $2, $4 &#125;'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$truth</span></div><div class=\"line\"><span class=\"comment\"># nothing happens</span></div></pre></td></tr></table></figure>\n<p>The problem is that awk doesn’t know about <code>$first_word</code>.</p>\n<p>The solution (or one of the possible solutions) is to teach it in the BEGIN block. Here’s the right code:</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">statement=$(<span class=\"built_in\">echo</span> <span class=\"string\">\"something is not cool\"</span> | sed <span class=\"_\">-e</span> <span class=\"string\">'s/cool/awesome/'</span>)</div><div class=\"line\"><span class=\"comment\"># $statement is now \"something is not awesome\"</span></div><div class=\"line\"></div><div class=\"line\">first=$(<span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$statement</span>\"</span> | awk <span class=\"string\">'&#123; print $1 &#125;'</span>)</div><div class=\"line\"><span class=\"comment\"># $first is now \"something\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># now let's pipe $statement into awk to print the first, second and</span></div><div class=\"line\"><span class=\"comment\"># fourth column, but only if the first column is equal to $first!</span></div><div class=\"line\">truth=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$statement</span> | awk <span class=\"string\">'BEGIN &#123; first=$first &#125; $1 ~ first &#123; print $1, $2, $4 &#125;'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$truth</span></div><div class=\"line\"><span class=\"comment\"># -&gt; \"something is awesome\"! but wait, let's fix that..</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> $(<span class=\"built_in\">echo</span> <span class=\"variable\">$truth</span> | sed <span class=\"_\">-e</span> <span class=\"string\">'s/something/everything/'</span>)</div><div class=\"line\"><span class=\"comment\"># done and done</span></div></pre></td></tr></table></figure>\n<p>In the begin block, set <code>first</code> (no <code>$</code> necessary in awk) to the shell variable <code>$first</code>. Now you can use it.</p>\n<p>Happy <code>awk</code>ing!</p>"},{"title":"Huge Arch update!","date":"2015-12-12T12:44:13.000Z","_content":"\nI've been using Arch Linux as my daily driver for almost six months now and this has been by far the biggest update I've seen so far! Just wanted to share this whopper of an update:\n\n{% asset_img arch-update.png huge pacman update %}\n\nIn case you're wondering, the reason for this is the switch to the new C++ ABI. In my case everything went right, but if you're wondering what to do here and for some reason you never read the [Arch News article](https://www.archlinux.org/news/c-abi-change/), all you need to do to make sure everything keeps working peachily is rebuild your non-repo packages.\n\nThe Arch team provided a handy little script to identify the packages in question:\n\n{% codeblock lang:bash %}\n#!/bin/bash\nwhile read pkg; do\n    mapfile -t files < <(pacman -Qlq $pkg | grep -v /$)\n    grep -Fq libstdc++.so.6 \"${files[@]}\" 2>/dev/null && echo $pkg\ndone < <(pacman -Qmq)\n{% endcodeblock %}\n\nFor me that just came to a half dozen packages and it took less than twenty minutes to rebuild them against the new ABI.\n\nWhen I first started using a rolling release distro, I feared I'd have to deal with breaking changes all the time. In practice, I only had everything break after an update once in six months, and that was because I'd been running the proprietary graphics drivers (_shame on me_). Even then, it was relatively easy to boot from a live USB, chroot in and fix my setup. Apart from that, everything's been smooth sailing, including this humongous update!\n","source":"_posts/huge-arch-update.md","raw":"title: 'Huge Arch update!'\ndate: 2015-12-12 12:44:13\ncategories: linux\ntags:\n- arch linux\n---\n\nI've been using Arch Linux as my daily driver for almost six months now and this has been by far the biggest update I've seen so far! Just wanted to share this whopper of an update:\n\n{% asset_img arch-update.png huge pacman update %}\n\nIn case you're wondering, the reason for this is the switch to the new C++ ABI. In my case everything went right, but if you're wondering what to do here and for some reason you never read the [Arch News article](https://www.archlinux.org/news/c-abi-change/), all you need to do to make sure everything keeps working peachily is rebuild your non-repo packages.\n\nThe Arch team provided a handy little script to identify the packages in question:\n\n{% codeblock lang:bash %}\n#!/bin/bash\nwhile read pkg; do\n    mapfile -t files < <(pacman -Qlq $pkg | grep -v /$)\n    grep -Fq libstdc++.so.6 \"${files[@]}\" 2>/dev/null && echo $pkg\ndone < <(pacman -Qmq)\n{% endcodeblock %}\n\nFor me that just came to a half dozen packages and it took less than twenty minutes to rebuild them against the new ABI.\n\nWhen I first started using a rolling release distro, I feared I'd have to deal with breaking changes all the time. In practice, I only had everything break after an update once in six months, and that was because I'd been running the proprietary graphics drivers (_shame on me_). Even then, it was relatively easy to boot from a live USB, chroot in and fix my setup. Apart from that, everything's been smooth sailing, including this humongous update!\n","slug":"huge-arch-update","published":1,"updated":"2015-12-12T13:40:35.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk3h001tknz9pvgmc7z2","content":"<p>I’ve been using Arch Linux as my daily driver for almost six months now and this has been by far the biggest update I’ve seen so far! Just wanted to share this whopper of an update:</p>\n<img src=\"/linux/2015/huge-arch-update/arch-update.png\" alt=\"huge pacman update\" title=\"huge pacman update\">\n<p>In case you’re wondering, the reason for this is the switch to the new C++ ABI. In my case everything went right, but if you’re wondering what to do here and for some reason you never read the <a href=\"https://www.archlinux.org/news/c-abi-change/\" target=\"_blank\" rel=\"external\">Arch News article</a>, all you need to do to make sure everything keeps working peachily is rebuild your non-repo packages.</p>\n<p>The Arch team provided a handy little script to identify the packages in question:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> pkg; <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">mapfile</span> -t files &lt; &lt;(pacman -Qlq <span class=\"variable\">$pkg</span> | grep -v /$)</div><div class=\"line\">    grep -Fq libstdc++.so.6 <span class=\"string\">\"<span class=\"variable\">$&#123;files[@]&#125;</span>\"</span> 2&gt;/dev/null &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$pkg</span></div><div class=\"line\"><span class=\"keyword\">done</span> &lt; &lt;(pacman -Qmq)</div></pre></td></tr></table></figure>\n<p>For me that just came to a half dozen packages and it took less than twenty minutes to rebuild them against the new ABI.</p>\n<p>When I first started using a rolling release distro, I feared I’d have to deal with breaking changes all the time. In practice, I only had everything break after an update once in six months, and that was because I’d been running the proprietary graphics drivers (<em>shame on me</em>). Even then, it was relatively easy to boot from a live USB, chroot in and fix my setup. Apart from that, everything’s been smooth sailing, including this humongous update!</p>","excerpt":"","more":"<p>I’ve been using Arch Linux as my daily driver for almost six months now and this has been by far the biggest update I’ve seen so far! Just wanted to share this whopper of an update:</p>\n<img src=\"/linux/2015/huge-arch-update/arch-update.png\" alt=\"huge pacman update\" title=\"huge pacman update\">\n<p>In case you’re wondering, the reason for this is the switch to the new C++ ABI. In my case everything went right, but if you’re wondering what to do here and for some reason you never read the <a href=\"https://www.archlinux.org/news/c-abi-change/\">Arch News article</a>, all you need to do to make sure everything keeps working peachily is rebuild your non-repo packages.</p>\n<p>The Arch team provided a handy little script to identify the packages in question:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> pkg; <span class=\"keyword\">do</span></div><div class=\"line\">    <span class=\"built_in\">mapfile</span> -t files &lt; &lt;(pacman -Qlq <span class=\"variable\">$pkg</span> | grep -v /$)</div><div class=\"line\">    grep -Fq libstdc++.so.6 <span class=\"string\">\"<span class=\"variable\">$&#123;files[@]&#125;</span>\"</span> 2&gt;/dev/null &amp;&amp; <span class=\"built_in\">echo</span> <span class=\"variable\">$pkg</span></div><div class=\"line\"><span class=\"keyword\">done</span> &lt; &lt;(pacman -Qmq)</div></pre></td></tr></table></figure>\n<p>For me that just came to a half dozen packages and it took less than twenty minutes to rebuild them against the new ABI.</p>\n<p>When I first started using a rolling release distro, I feared I’d have to deal with breaking changes all the time. In practice, I only had everything break after an update once in six months, and that was because I’d been running the proprietary graphics drivers (<em>shame on me</em>). Even then, it was relatively easy to boot from a live USB, chroot in and fix my setup. Apart from that, everything’s been smooth sailing, including this humongous update!</p>"},{"title":"I have been to the mountain top: making code beautiful","date":"2016-01-22T18:31:42.000Z","_content":"\nI decided to refactor my hexo plugin today and one thing that struck me was how useful promises could be to make my code look beautiful and read nicely.\n\nHere's an excerpt to show you what I mean:\n\n{% codeblock lang:javascript %}\nloadArticles(query, this.locals).then(function filter(articles) {\n  return filterArticles(articles, filters);\n}).then(function select(filtered) {\n  return selectArticle(filtered);\n}).then(function openFn(selected) {\n  openFile(selected);\n}).catch(function catchAll(err) {\n  console.log(chalk.red('Error: '), err);\n});\n{% endcodeblock %}\n\n<!-- more -->\n\nBefore the refactor a lot of that functionality wasn't inside `then` methods and frankly, it read like a bunch of spaghetti code. The truth is that using promises doesn't guarantee readable code. Yes, you might avoid callback hell with them, but when you put all your functionality inside a single `then`, or add multiple layers of indented promises (*promise hell*), what's the point, really?\n\nHowever, if you make a nice chain by returning more promises, give your [anonymous functions descriptive names](https://github.com/getify/You-Dont-Know-JS/blob/62eb611448fef5cb83e3ba6ac1b95bd2947a456c/scope%20%26%20closures/ch3.md#anonymous-vs-named) (although I admit I wasn't very creative in the example above) and \"collect\" potential errors for `catch`ing them when you're ready, you can end up with some very nice-looking code.\n\nAnyway, sorry if this all sounds super basic and obvious. It's just that I *thought* I already understood what promises were all about. Looking at my old code though, it's clear that I didn't. There's a big difference between reading about promises and implementing some parts here and there on the one hand, and experiencing the feeling of writing some truly beautiful promisified code on the other.\n\nSo if you're still fuzzy on promises, or if you've tried them out before, but wondered aloud why people say they're better than regular old callbacks, then I urge you to spend some time refactoring old code.\n\nBut when you do refactor that code, don't just think of promises as a way out of callback hell. Don't even think of them as just a tool for asynchronous control flow. And *definitely* [don't think of them as an unnecessary intermediate step](https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8) on the way to [async/await](http://tc39.github.io/ecmascript-asyncawait/)!\n\nNo! Instead, think of promises as those first two things, but also as a way to **make your code beautiful** -- and you shall see **the promised land**!\n","source":"_posts/i-have-been-to-the-mountain-top-making-code-beautiful.md","raw":"title: \"I have been to the mountain top: making code beautiful\"\ndate: 2016-01-22 18:31:42\ncategories: javascript\ntags:\n  - async\n  - promises\n  - js\n  - style\n---\n\nI decided to refactor my hexo plugin today and one thing that struck me was how useful promises could be to make my code look beautiful and read nicely.\n\nHere's an excerpt to show you what I mean:\n\n{% codeblock lang:javascript %}\nloadArticles(query, this.locals).then(function filter(articles) {\n  return filterArticles(articles, filters);\n}).then(function select(filtered) {\n  return selectArticle(filtered);\n}).then(function openFn(selected) {\n  openFile(selected);\n}).catch(function catchAll(err) {\n  console.log(chalk.red('Error: '), err);\n});\n{% endcodeblock %}\n\n<!-- more -->\n\nBefore the refactor a lot of that functionality wasn't inside `then` methods and frankly, it read like a bunch of spaghetti code. The truth is that using promises doesn't guarantee readable code. Yes, you might avoid callback hell with them, but when you put all your functionality inside a single `then`, or add multiple layers of indented promises (*promise hell*), what's the point, really?\n\nHowever, if you make a nice chain by returning more promises, give your [anonymous functions descriptive names](https://github.com/getify/You-Dont-Know-JS/blob/62eb611448fef5cb83e3ba6ac1b95bd2947a456c/scope%20%26%20closures/ch3.md#anonymous-vs-named) (although I admit I wasn't very creative in the example above) and \"collect\" potential errors for `catch`ing them when you're ready, you can end up with some very nice-looking code.\n\nAnyway, sorry if this all sounds super basic and obvious. It's just that I *thought* I already understood what promises were all about. Looking at my old code though, it's clear that I didn't. There's a big difference between reading about promises and implementing some parts here and there on the one hand, and experiencing the feeling of writing some truly beautiful promisified code on the other.\n\nSo if you're still fuzzy on promises, or if you've tried them out before, but wondered aloud why people say they're better than regular old callbacks, then I urge you to spend some time refactoring old code.\n\nBut when you do refactor that code, don't just think of promises as a way out of callback hell. Don't even think of them as just a tool for asynchronous control flow. And *definitely* [don't think of them as an unnecessary intermediate step](https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8) on the way to [async/await](http://tc39.github.io/ecmascript-asyncawait/)!\n\nNo! Instead, think of promises as those first two things, but also as a way to **make your code beautiful** -- and you shall see **the promised land**!\n","slug":"i-have-been-to-the-mountain-top-making-code-beautiful","published":1,"updated":"2016-01-23T03:46:18.794Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk3j001vknz9xv5loc1p","content":"<p>I decided to refactor my hexo plugin today and one thing that struck me was how useful promises could be to make my code look beautiful and read nicely.</p>\n<p>Here’s an excerpt to show you what I mean:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadArticles(query, <span class=\"keyword\">this</span>.locals).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span>(<span class=\"params\">articles</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> filterArticles(articles, filters);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">select</span>(<span class=\"params\">filtered</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> selectArticle(filtered);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">openFn</span>(<span class=\"params\">selected</span>) </span>&#123;</div><div class=\"line\">  openFile(selected);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">catchAll</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(chalk.red(<span class=\"string\">'Error: '</span>), err);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>Before the refactor a lot of that functionality wasn’t inside <code>then</code> methods and frankly, it read like a bunch of spaghetti code. The truth is that using promises doesn’t guarantee readable code. Yes, you might avoid callback hell with them, but when you put all your functionality inside a single <code>then</code>, or add multiple layers of indented promises (<em>promise hell</em>), what’s the point, really?</p>\n<p>However, if you make a nice chain by returning more promises, give your <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/62eb611448fef5cb83e3ba6ac1b95bd2947a456c/scope%20%26%20closures/ch3.md#anonymous-vs-named\" target=\"_blank\" rel=\"external\">anonymous functions descriptive names</a> (although I admit I wasn’t very creative in the example above) and “collect” potential errors for <code>catch</code>ing them when you’re ready, you can end up with some very nice-looking code.</p>\n<p>Anyway, sorry if this all sounds super basic and obvious. It’s just that I <em>thought</em> I already understood what promises were all about. Looking at my old code though, it’s clear that I didn’t. There’s a big difference between reading about promises and implementing some parts here and there on the one hand, and experiencing the feeling of writing some truly beautiful promisified code on the other.</p>\n<p>So if you’re still fuzzy on promises, or if you’ve tried them out before, but wondered aloud why people say they’re better than regular old callbacks, then I urge you to spend some time refactoring old code.</p>\n<p>But when you do refactor that code, don’t just think of promises as a way out of callback hell. Don’t even think of them as just a tool for asynchronous control flow. And <em>definitely</em> <a href=\"https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8\" target=\"_blank\" rel=\"external\">don’t think of them as an unnecessary intermediate step</a> on the way to <a href=\"http://tc39.github.io/ecmascript-asyncawait/\" target=\"_blank\" rel=\"external\">async/await</a>!</p>\n<p>No! Instead, think of promises as those first two things, but also as a way to <strong>make your code beautiful</strong> – and you shall see <strong>the promised land</strong>!</p>","excerpt":"<p>I decided to refactor my hexo plugin today and one thing that struck me was how useful promises could be to make my code look beautiful and read nicely.</p>\n<p>Here’s an excerpt to show you what I mean:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">loadArticles(query, <span class=\"keyword\">this</span>.locals).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filter</span>(<span class=\"params\">articles</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> filterArticles(articles, filters);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">select</span>(<span class=\"params\">filtered</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> selectArticle(filtered);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">openFn</span>(<span class=\"params\">selected</span>) </span>&#123;</div><div class=\"line\">  openFile(selected);</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">catchAll</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(chalk.red(<span class=\"string\">'Error: '</span>), err);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","more":"<p>Before the refactor a lot of that functionality wasn’t inside <code>then</code> methods and frankly, it read like a bunch of spaghetti code. The truth is that using promises doesn’t guarantee readable code. Yes, you might avoid callback hell with them, but when you put all your functionality inside a single <code>then</code>, or add multiple layers of indented promises (<em>promise hell</em>), what’s the point, really?</p>\n<p>However, if you make a nice chain by returning more promises, give your <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/62eb611448fef5cb83e3ba6ac1b95bd2947a456c/scope%20%26%20closures/ch3.md#anonymous-vs-named\">anonymous functions descriptive names</a> (although I admit I wasn’t very creative in the example above) and “collect” potential errors for <code>catch</code>ing them when you’re ready, you can end up with some very nice-looking code.</p>\n<p>Anyway, sorry if this all sounds super basic and obvious. It’s just that I <em>thought</em> I already understood what promises were all about. Looking at my old code though, it’s clear that I didn’t. There’s a big difference between reading about promises and implementing some parts here and there on the one hand, and experiencing the feeling of writing some truly beautiful promisified code on the other.</p>\n<p>So if you’re still fuzzy on promises, or if you’ve tried them out before, but wondered aloud why people say they’re better than regular old callbacks, then I urge you to spend some time refactoring old code.</p>\n<p>But when you do refactor that code, don’t just think of promises as a way out of callback hell. Don’t even think of them as just a tool for asynchronous control flow. And <em>definitely</em> <a href=\"https://medium.com/@bluepnume/learn-about-promises-before-you-start-using-async-await-eb148164a9c8\">don’t think of them as an unnecessary intermediate step</a> on the way to <a href=\"http://tc39.github.io/ecmascript-asyncawait/\">async/await</a>!</p>\n<p>No! Instead, think of promises as those first two things, but also as a way to <strong>make your code beautiful</strong> – and you shall see <strong>the promised land</strong>!</p>"},{"title":"I wrote a Hexo plugin: hexo-easy-edit","date":"2015-11-04T17:12:23.000Z","_content":"\n\nI'm still pretty new to programming so forgive me if I sound overly enthusiastic, but I'm pretty psyched about this plugin I made for [Hexo](https://hexo.io).\n\n{% asset_img hexo-easy-edit.png hexo-easy-edit screenshot %}\n\nHexo is a Node.js-powered static site generator and I used it to generate this very blog you're reading right now. I've been trying to be more active on GitHub, but it's pretty tough when you're new and not feeling very confident about your abilities. So last week I rewrote most of the Hexo documentation (the maintainers are Chinese and their docs were understandably not in perfect English) in order to at least do *some* good work in open source.\n\nBut as I was proofreading the docs and writing a few blog posts on here, it suddenly occurred to me that a) I could really use a tool to help me blog more efficiently, and b) I actually knew enough JavaScript-fu to do it. So I wrote it, pushed it [to GitHub](https://github.com/greg-js/hexo-easy-edit) and npm, then pushed it a few more times because I kept finding little bugs and updating the readme (lesson learned: test more before pushing), and [here it is](https://www.npmjs.com/package/hexo-easy-edit)!\n\n<!-- more -->\n\nIn short, I just got tired of constantly having to navigate to the `source/_posts` and `source/_drafts` folders and open the markdown files in vim. Of course I could use one of the administration plugins to help me administer the site, but I feel that's kind of missing the point of Hexo's simplicity. Plus, I really just want to edit my posts in vim, you know?\n\nSo what my plugin does is it adds an extra CLI command to Hexo's suite of commands: `hexo edit`. On its own, it will just look into the folder you're on in the terminal right now, find the source folder, and give you a list of all the markdown files in it. Then you can choose one of them using the arrow or vim-style keys and it will spawn a child process to open the file with whatever you've set as your $EDITOR.\n\nI then made it a little bit more useful by adding the ability to also open it using a GUI editors by adding a `-g` or `--gui` flag. I also added a `-t` or `--target` flag for filtering on subfolders (like `_drafts`, `_posts` or `docs`) and allowed people to filter on a regular expression.\n\nI know it's not the most amazing thing in the world, but I'm happy with it. It's genuinely useful for me and I think at least some other people might have use for it too. Give it a whirl if you're a command-line person and use Hexo. And feel free to complain, open issues or shout at me if you think my code is shit! After all, I'll only know I've really made it as a programmer when I [start receiving hate mail about my code from nerd superstars](http://thenextweb.com/dd/2015/11/02/linux-creator-linus-torvalds-had-a-meltdown-over-a-pull-request-and-it-was-awesome/).\n","source":"_posts/i-wrote-a-hexo-plugin-hexo-easy-edit.md","raw":"title: 'I wrote a Hexo plugin: hexo-easy-edit'\ncategories: javascript\ntags:\n  - hexo\n  - open source\n  - js\n  - node\ndate: 2015-11-04 17:12:23\n---\n\n\nI'm still pretty new to programming so forgive me if I sound overly enthusiastic, but I'm pretty psyched about this plugin I made for [Hexo](https://hexo.io).\n\n{% asset_img hexo-easy-edit.png hexo-easy-edit screenshot %}\n\nHexo is a Node.js-powered static site generator and I used it to generate this very blog you're reading right now. I've been trying to be more active on GitHub, but it's pretty tough when you're new and not feeling very confident about your abilities. So last week I rewrote most of the Hexo documentation (the maintainers are Chinese and their docs were understandably not in perfect English) in order to at least do *some* good work in open source.\n\nBut as I was proofreading the docs and writing a few blog posts on here, it suddenly occurred to me that a) I could really use a tool to help me blog more efficiently, and b) I actually knew enough JavaScript-fu to do it. So I wrote it, pushed it [to GitHub](https://github.com/greg-js/hexo-easy-edit) and npm, then pushed it a few more times because I kept finding little bugs and updating the readme (lesson learned: test more before pushing), and [here it is](https://www.npmjs.com/package/hexo-easy-edit)!\n\n<!-- more -->\n\nIn short, I just got tired of constantly having to navigate to the `source/_posts` and `source/_drafts` folders and open the markdown files in vim. Of course I could use one of the administration plugins to help me administer the site, but I feel that's kind of missing the point of Hexo's simplicity. Plus, I really just want to edit my posts in vim, you know?\n\nSo what my plugin does is it adds an extra CLI command to Hexo's suite of commands: `hexo edit`. On its own, it will just look into the folder you're on in the terminal right now, find the source folder, and give you a list of all the markdown files in it. Then you can choose one of them using the arrow or vim-style keys and it will spawn a child process to open the file with whatever you've set as your $EDITOR.\n\nI then made it a little bit more useful by adding the ability to also open it using a GUI editors by adding a `-g` or `--gui` flag. I also added a `-t` or `--target` flag for filtering on subfolders (like `_drafts`, `_posts` or `docs`) and allowed people to filter on a regular expression.\n\nI know it's not the most amazing thing in the world, but I'm happy with it. It's genuinely useful for me and I think at least some other people might have use for it too. Give it a whirl if you're a command-line person and use Hexo. And feel free to complain, open issues or shout at me if you think my code is shit! After all, I'll only know I've really made it as a programmer when I [start receiving hate mail about my code from nerd superstars](http://thenextweb.com/dd/2015/11/02/linux-creator-linus-torvalds-had-a-meltdown-over-a-pull-request-and-it-was-awesome/).\n","slug":"i-wrote-a-hexo-plugin-hexo-easy-edit","published":1,"updated":"2015-11-21T14:07:16.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk3n001yknz9ky5xqyzu","content":"<p>I’m still pretty new to programming so forgive me if I sound overly enthusiastic, but I’m pretty psyched about this plugin I made for <a href=\"https://hexo.io\" target=\"_blank\" rel=\"external\">Hexo</a>.</p>\n<img src=\"/javascript/2015/i-wrote-a-hexo-plugin-hexo-easy-edit/hexo-easy-edit.png\" alt=\"hexo-easy-edit screenshot\" title=\"hexo-easy-edit screenshot\">\n<p>Hexo is a Node.js-powered static site generator and I used it to generate this very blog you’re reading right now. I’ve been trying to be more active on GitHub, but it’s pretty tough when you’re new and not feeling very confident about your abilities. So last week I rewrote most of the Hexo documentation (the maintainers are Chinese and their docs were understandably not in perfect English) in order to at least do <em>some</em> good work in open source.</p>\n<p>But as I was proofreading the docs and writing a few blog posts on here, it suddenly occurred to me that a) I could really use a tool to help me blog more efficiently, and b) I actually knew enough JavaScript-fu to do it. So I wrote it, pushed it <a href=\"https://github.com/greg-js/hexo-easy-edit\" target=\"_blank\" rel=\"external\">to GitHub</a> and npm, then pushed it a few more times because I kept finding little bugs and updating the readme (lesson learned: test more before pushing), and <a href=\"https://www.npmjs.com/package/hexo-easy-edit\" target=\"_blank\" rel=\"external\">here it is</a>!</p>\n<a id=\"more\"></a>\n<p>In short, I just got tired of constantly having to navigate to the <code>source/_posts</code> and <code>source/_drafts</code> folders and open the markdown files in vim. Of course I could use one of the administration plugins to help me administer the site, but I feel that’s kind of missing the point of Hexo’s simplicity. Plus, I really just want to edit my posts in vim, you know?</p>\n<p>So what my plugin does is it adds an extra CLI command to Hexo’s suite of commands: <code>hexo edit</code>. On its own, it will just look into the folder you’re on in the terminal right now, find the source folder, and give you a list of all the markdown files in it. Then you can choose one of them using the arrow or vim-style keys and it will spawn a child process to open the file with whatever you’ve set as your $EDITOR.</p>\n<p>I then made it a little bit more useful by adding the ability to also open it using a GUI editors by adding a <code>-g</code> or <code>--gui</code> flag. I also added a <code>-t</code> or <code>--target</code> flag for filtering on subfolders (like <code>_drafts</code>, <code>_posts</code> or <code>docs</code>) and allowed people to filter on a regular expression.</p>\n<p>I know it’s not the most amazing thing in the world, but I’m happy with it. It’s genuinely useful for me and I think at least some other people might have use for it too. Give it a whirl if you’re a command-line person and use Hexo. And feel free to complain, open issues or shout at me if you think my code is shit! After all, I’ll only know I’ve really made it as a programmer when I <a href=\"http://thenextweb.com/dd/2015/11/02/linux-creator-linus-torvalds-had-a-meltdown-over-a-pull-request-and-it-was-awesome/\" target=\"_blank\" rel=\"external\">start receiving hate mail about my code from nerd superstars</a>.</p>","excerpt":"<p>I’m still pretty new to programming so forgive me if I sound overly enthusiastic, but I’m pretty psyched about this plugin I made for <a href=\"https://hexo.io\">Hexo</a>.</p>\n<img src=\"/javascript/2015/i-wrote-a-hexo-plugin-hexo-easy-edit/hexo-easy-edit.png\" alt=\"hexo-easy-edit screenshot\" title=\"hexo-easy-edit screenshot\">\n<p>Hexo is a Node.js-powered static site generator and I used it to generate this very blog you’re reading right now. I’ve been trying to be more active on GitHub, but it’s pretty tough when you’re new and not feeling very confident about your abilities. So last week I rewrote most of the Hexo documentation (the maintainers are Chinese and their docs were understandably not in perfect English) in order to at least do <em>some</em> good work in open source.</p>\n<p>But as I was proofreading the docs and writing a few blog posts on here, it suddenly occurred to me that a) I could really use a tool to help me blog more efficiently, and b) I actually knew enough JavaScript-fu to do it. So I wrote it, pushed it <a href=\"https://github.com/greg-js/hexo-easy-edit\">to GitHub</a> and npm, then pushed it a few more times because I kept finding little bugs and updating the readme (lesson learned: test more before pushing), and <a href=\"https://www.npmjs.com/package/hexo-easy-edit\">here it is</a>!</p>","more":"<p>In short, I just got tired of constantly having to navigate to the <code>source/_posts</code> and <code>source/_drafts</code> folders and open the markdown files in vim. Of course I could use one of the administration plugins to help me administer the site, but I feel that’s kind of missing the point of Hexo’s simplicity. Plus, I really just want to edit my posts in vim, you know?</p>\n<p>So what my plugin does is it adds an extra CLI command to Hexo’s suite of commands: <code>hexo edit</code>. On its own, it will just look into the folder you’re on in the terminal right now, find the source folder, and give you a list of all the markdown files in it. Then you can choose one of them using the arrow or vim-style keys and it will spawn a child process to open the file with whatever you’ve set as your $EDITOR.</p>\n<p>I then made it a little bit more useful by adding the ability to also open it using a GUI editors by adding a <code>-g</code> or <code>--gui</code> flag. I also added a <code>-t</code> or <code>--target</code> flag for filtering on subfolders (like <code>_drafts</code>, <code>_posts</code> or <code>docs</code>) and allowed people to filter on a regular expression.</p>\n<p>I know it’s not the most amazing thing in the world, but I’m happy with it. It’s genuinely useful for me and I think at least some other people might have use for it too. Give it a whirl if you’re a command-line person and use Hexo. And feel free to complain, open issues or shout at me if you think my code is shit! After all, I’ll only know I’ve really made it as a programmer when I <a href=\"http://thenextweb.com/dd/2015/11/02/linux-creator-linus-torvalds-had-a-meltdown-over-a-pull-request-and-it-was-awesome/\">start receiving hate mail about my code from nerd superstars</a>.</p>"},{"title":"Kyle Simpson's Advanced JavaScript course","date":"2016-01-19T01:32:22.000Z","_content":"\nI recently read Kyle Simpson's **excellent** [free You Don't Know JS book series](https://github.com/getify/You-Dont-Know-JS) and to me it felt like a *JavaScript: The Good Parts* for a new generation of JavaScript coders. The only problem I had with it was that it was so full of revelations and important expositions that by the time I finished the last book in the series, I could hardly remember anymore what the first one was even about.\n\n{% asset_img You-dont-know-JS.png You don't know JS logo %}\n\nSo I decided to read it a second time, and once again I'm just absolutely floored by the knowledge bombs Simpson keeps dropping on his readers. If you haven't checked it out by now, I **highly** recommend you do so, no matter how well you think you already know JS!\n\n<!-- more -->\n\nIn fact, I like his books so much I'm now going through his [Advanced JavaScript course on Pluralsight](https://app.pluralsight.com/library/courses/advanced-javascript) as well. I'm not sorry to say I've postponed the full-time job hunt I'll soon be embarking on for just a little bit longer, until I've soaked up more of his JS expertise.\n\nAnyway, I just wanted to do my bit and promote Kyle Simpson's stuff. The books are free to read on GitHub, but you can [buy printed versions from O'Reilly](http://search.oreilly.com/?i=1;q=kyle+simpson;q1=Books;x=0;x1=t1;y=0&act=fc_contenttype_Books). PluralSight is subscription-based (it's originally from Frontend Masters so of course [you can get it there as well](https://frontendmasters.com/courses/advanced-javascript/)), but the Advanced JavaScript course alone is well worth the membership fee for a month!\n","source":"_posts/kyle-simpson-s-advanced-javascript-course.md","raw":"title: \"Kyle Simpson's Advanced JavaScript course\"\ndate: 2016-01-19 01:32:22\ncategories: javascript\ntags:\n  - js\n  - kyle simpson\n  - learning\n---\n\nI recently read Kyle Simpson's **excellent** [free You Don't Know JS book series](https://github.com/getify/You-Dont-Know-JS) and to me it felt like a *JavaScript: The Good Parts* for a new generation of JavaScript coders. The only problem I had with it was that it was so full of revelations and important expositions that by the time I finished the last book in the series, I could hardly remember anymore what the first one was even about.\n\n{% asset_img You-dont-know-JS.png You don't know JS logo %}\n\nSo I decided to read it a second time, and once again I'm just absolutely floored by the knowledge bombs Simpson keeps dropping on his readers. If you haven't checked it out by now, I **highly** recommend you do so, no matter how well you think you already know JS!\n\n<!-- more -->\n\nIn fact, I like his books so much I'm now going through his [Advanced JavaScript course on Pluralsight](https://app.pluralsight.com/library/courses/advanced-javascript) as well. I'm not sorry to say I've postponed the full-time job hunt I'll soon be embarking on for just a little bit longer, until I've soaked up more of his JS expertise.\n\nAnyway, I just wanted to do my bit and promote Kyle Simpson's stuff. The books are free to read on GitHub, but you can [buy printed versions from O'Reilly](http://search.oreilly.com/?i=1;q=kyle+simpson;q1=Books;x=0;x1=t1;y=0&act=fc_contenttype_Books). PluralSight is subscription-based (it's originally from Frontend Masters so of course [you can get it there as well](https://frontendmasters.com/courses/advanced-javascript/)), but the Advanced JavaScript course alone is well worth the membership fee for a month!\n","slug":"kyle-simpson-s-advanced-javascript-course","published":1,"updated":"2016-01-19T02:42:54.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk3o0021knz9yv0zhp7l","content":"<p>I recently read Kyle Simpson’s <strong>excellent</strong> <a href=\"https://github.com/getify/You-Dont-Know-JS\" target=\"_blank\" rel=\"external\">free You Don’t Know JS book series</a> and to me it felt like a <em>JavaScript: The Good Parts</em> for a new generation of JavaScript coders. The only problem I had with it was that it was so full of revelations and important expositions that by the time I finished the last book in the series, I could hardly remember anymore what the first one was even about.</p>\n<img src=\"/javascript/2016/kyle-simpson-s-advanced-javascript-course/You-dont-know-JS.png\" alt=\"You don't know JS logo\" title=\"You don't know JS logo\">\n<p>So I decided to read it a second time, and once again I’m just absolutely floored by the knowledge bombs Simpson keeps dropping on his readers. If you haven’t checked it out by now, I <strong>highly</strong> recommend you do so, no matter how well you think you already know JS!</p>\n<a id=\"more\"></a>\n<p>In fact, I like his books so much I’m now going through his <a href=\"https://app.pluralsight.com/library/courses/advanced-javascript\" target=\"_blank\" rel=\"external\">Advanced JavaScript course on Pluralsight</a> as well. I’m not sorry to say I’ve postponed the full-time job hunt I’ll soon be embarking on for just a little bit longer, until I’ve soaked up more of his JS expertise.</p>\n<p>Anyway, I just wanted to do my bit and promote Kyle Simpson’s stuff. The books are free to read on GitHub, but you can <a href=\"http://search.oreilly.com/?i=1;q=kyle+simpson;q1=Books;x=0;x1=t1;y=0&amp;act=fc_contenttype_Books\" target=\"_blank\" rel=\"external\">buy printed versions from O’Reilly</a>. PluralSight is subscription-based (it’s originally from Frontend Masters so of course <a href=\"https://frontendmasters.com/courses/advanced-javascript/\" target=\"_blank\" rel=\"external\">you can get it there as well</a>), but the Advanced JavaScript course alone is well worth the membership fee for a month!</p>","excerpt":"<p>I recently read Kyle Simpson’s <strong>excellent</strong> <a href=\"https://github.com/getify/You-Dont-Know-JS\">free You Don’t Know JS book series</a> and to me it felt like a <em>JavaScript: The Good Parts</em> for a new generation of JavaScript coders. The only problem I had with it was that it was so full of revelations and important expositions that by the time I finished the last book in the series, I could hardly remember anymore what the first one was even about.</p>\n<img src=\"/javascript/2016/kyle-simpson-s-advanced-javascript-course/You-dont-know-JS.png\" alt=\"You don't know JS logo\" title=\"You don't know JS logo\">\n<p>So I decided to read it a second time, and once again I’m just absolutely floored by the knowledge bombs Simpson keeps dropping on his readers. If you haven’t checked it out by now, I <strong>highly</strong> recommend you do so, no matter how well you think you already know JS!</p>","more":"<p>In fact, I like his books so much I’m now going through his <a href=\"https://app.pluralsight.com/library/courses/advanced-javascript\">Advanced JavaScript course on Pluralsight</a> as well. I’m not sorry to say I’ve postponed the full-time job hunt I’ll soon be embarking on for just a little bit longer, until I’ve soaked up more of his JS expertise.</p>\n<p>Anyway, I just wanted to do my bit and promote Kyle Simpson’s stuff. The books are free to read on GitHub, but you can <a href=\"http://search.oreilly.com/?i=1;q=kyle+simpson;q1=Books;x=0;x1=t1;y=0&amp;act=fc_contenttype_Books\">buy printed versions from O’Reilly</a>. PluralSight is subscription-based (it’s originally from Frontend Masters so of course <a href=\"https://frontendmasters.com/courses/advanced-javascript/\">you can get it there as well</a>), but the Advanced JavaScript course alone is well worth the membership fee for a month!</p>"},{"title":"Lint as you type with Neovim and Neomake","date":"2015-12-15T18:13:37.000Z","_content":"\n*Related:*\n* [Linting code with Neomake and Neovim](/vim/2015/linting-code-with-neomake-and-neovim)\n* [Linting code with Neovim and Neomake, ESLint edition](/vim/2015/linting-code-with-neovim-and-neomake-eslint-edition)\n\n{% raw %}\n<hr />\n{% endraw %}\n\nAn exchange with commenter flndr8 on [my first Neomake post](/vim/2015/linting-code-with-neomake-and-neovim) inspired me to talk a little bit about 'lint-as-you-type' functionality in Neovim.\n\nI'm not sure what the exact term for it is, but what I mean by lint-as-you-type is a kind of IDE-like feature that would run a linter on your code while you are editing the file. This in contrast with the 'lint-when-you-save' approach, which I covered briefly in my previous two articles on this subject.\n\nNow, if this feature is high on your wishlist, I've got good news and bad news. The bad news is that, as far as I know, there is no optimal way (yet) to get this in vim. So if you consider this a killer feature, you may want to consider using a real IDE like [WebStorm](https://www.jetbrains.com/webstorm/).\n\nHowever, the good news is that you can get very close indeed. So if lint-when-you-save just doesn't cut it for you, and you are willing to change the way you use vim a little bit, you might still get what you want.\n\n<!-- more -->\n\n### Autocommands and events\n\nWhen you want to run a particular command, plugin or function when something happens in vim, the normal way to do it is with an autocommand or `autocmd`. The syntax is pretty simple, take for example this line, which nets you lint-when-you-save functionality:\n\n{% codeblock lang:vimscript line_number:false init.vim/.nvimrc %}\nautocmd BufWritePost,BufEnter * Neomake\n{% endcodeblock %}\n\n- `autocmd` tells vim that this line is an autocommand\n- `BufWritePost,BufEnter` are two events to listen for\n- `*` is a selector (in this case a wildcard) - for example to make the command only run on javascript files, replace this with `*.js`\n- `Neomake` is the command that runs when the event triggers\n\nConclusion: with this line, Neomake will run on the current file whenever the `BufWritePost` or `BufEnter` event triggers. `BufWritePost` signifies that it will happen after writing the buffer to the file and `BufEnter` means it will run upon switching to a buffer.\n\n{% asset_img autocmd.png autocmd events screenshot %}\n\nYou can get a list of supported events by opening vim and typing `:h autocmd-events`. There are quite a few of them as you see, but the ones that look particularly interesting if you want to enable lint-as-you-type functionality are probably `InsertChange`, `InsertLeave`, `TextChanged` and `TextChangedI`. The story doesn't end here though, because of the way vim handles text editing.\n\n### Buffers and Files\n\nAfter reading the previous paragraphs, you might suppose that this should net you at least some of the desired lint-as-you-type functionality:\n\n{% codeblock lang:vimscript line_number:false init.vim/.nvimrc %}\nautocmd InsertChange * Neomake\n{% endcodeblock %}\n\nBut it won't, and the reason is that whenever you edit a file using vim, it creates a buffer with the contents of that file. Only when you save (`:write`) the buffer to the file does the underlying file get changed. Until then it remains untouched.\n\nThis means that the above line *will* cause Neomake to lint your code using whatever linters you have enabled. However, it will run it on the *file*, which is untouched, and not on the buffer, which holds your changes.\n\n### Lint-as-you-type\n\nThis brings me to the crux of this post. As far as I know, there is no quick and easy way to run shell commands (like linters) on your buffer contents instead of on your file. There may be some plugins out there that do this, but I personally don't know of any.\n\nThe logical workaround is simple: if you want lint-as-you-type, you'll have to write the buffer before running the linter. Fortunately this is easy, as in vimscript you can chain commands with the pipe (`|`) character:\n\n{% codeblock lang:vimscript line_number:false init.vim/.nvimrc %}\nautocmd InsertChange * update | Neomake\n{% endcodeblock %}\n\n_(note: `update` is just like `write`, only it only writes when the buffer has been modified)_\n\nIf you try this out, you'll see that the linter will run every time you change something in insert mode. But you'll also see that this is probably not what you want. As vim-users, we're used to making edits in small logical chunks, so it makes more sense to use `InsertLeave`. You'll also want to run the linter on changes from normal mode, so try this:\n\n{% codeblock lang:vimscript line_number:false init.vim/.nvimrc %}\nautocmd InsertChange,TextChanged * update | Neomake\n{% endcodeblock %}\n\nIn lieu of operating on buffers instead of files, this is in my opinion probably the closest you can get to lint-as-you-type for now.\n\n### Notes\n\nAdding this code to your vim config file has a serious side-effect: every change you make will be written to the file automatically, and this may or may not clash with your editing style. I personally wouldn't be able to handle the paradigm change, but hey, it might fit your way of getting things done perfectly.\n\nOne thing I can think of off the top of my head that you really must do if you want to work like this is enabling vim's persistent undo. By default, you will lose your undo history when you quit vim. With the above setting enabled, you won't be able to go back ever again if you accidentally close vim or if there's a unexpected crash or power outage.\n\nHere's what to add to your config to enable persistent undos, which will allow you to go back in such cases:\n\n{% codeblock lang:vimscript line_number:false init.vim/.nvimrc %}\nset undodir=~/.config/nvim/undodir\nset undofile\n{% endcodeblock %}\n\nYou can set the amount of undos to remember with `set undolevels=X` (default is 1000) and of course you can set the undodir to anything you want, but make sure the directory exists! Read `:h undo-persistence` to learn more.\n\nThat's it. I hope this lint-as-you-type style works out for some of you out there ;-)\n","source":"_posts/lint-as-you-type-with-neovim-and-neomake.md","raw":"title: 'Lint as you type with Neovim and Neomake'\ncategories: vim\ntags:\n  - linting\n  - neovim\n  - async\n  - js\n  - style\ndate: 2015-12-15 18:13:37\n---\n\n*Related:*\n* [Linting code with Neomake and Neovim](/vim/2015/linting-code-with-neomake-and-neovim)\n* [Linting code with Neovim and Neomake, ESLint edition](/vim/2015/linting-code-with-neovim-and-neomake-eslint-edition)\n\n{% raw %}\n<hr />\n{% endraw %}\n\nAn exchange with commenter flndr8 on [my first Neomake post](/vim/2015/linting-code-with-neomake-and-neovim) inspired me to talk a little bit about 'lint-as-you-type' functionality in Neovim.\n\nI'm not sure what the exact term for it is, but what I mean by lint-as-you-type is a kind of IDE-like feature that would run a linter on your code while you are editing the file. This in contrast with the 'lint-when-you-save' approach, which I covered briefly in my previous two articles on this subject.\n\nNow, if this feature is high on your wishlist, I've got good news and bad news. The bad news is that, as far as I know, there is no optimal way (yet) to get this in vim. So if you consider this a killer feature, you may want to consider using a real IDE like [WebStorm](https://www.jetbrains.com/webstorm/).\n\nHowever, the good news is that you can get very close indeed. So if lint-when-you-save just doesn't cut it for you, and you are willing to change the way you use vim a little bit, you might still get what you want.\n\n<!-- more -->\n\n### Autocommands and events\n\nWhen you want to run a particular command, plugin or function when something happens in vim, the normal way to do it is with an autocommand or `autocmd`. The syntax is pretty simple, take for example this line, which nets you lint-when-you-save functionality:\n\n{% codeblock lang:vimscript line_number:false init.vim/.nvimrc %}\nautocmd BufWritePost,BufEnter * Neomake\n{% endcodeblock %}\n\n- `autocmd` tells vim that this line is an autocommand\n- `BufWritePost,BufEnter` are two events to listen for\n- `*` is a selector (in this case a wildcard) - for example to make the command only run on javascript files, replace this with `*.js`\n- `Neomake` is the command that runs when the event triggers\n\nConclusion: with this line, Neomake will run on the current file whenever the `BufWritePost` or `BufEnter` event triggers. `BufWritePost` signifies that it will happen after writing the buffer to the file and `BufEnter` means it will run upon switching to a buffer.\n\n{% asset_img autocmd.png autocmd events screenshot %}\n\nYou can get a list of supported events by opening vim and typing `:h autocmd-events`. There are quite a few of them as you see, but the ones that look particularly interesting if you want to enable lint-as-you-type functionality are probably `InsertChange`, `InsertLeave`, `TextChanged` and `TextChangedI`. The story doesn't end here though, because of the way vim handles text editing.\n\n### Buffers and Files\n\nAfter reading the previous paragraphs, you might suppose that this should net you at least some of the desired lint-as-you-type functionality:\n\n{% codeblock lang:vimscript line_number:false init.vim/.nvimrc %}\nautocmd InsertChange * Neomake\n{% endcodeblock %}\n\nBut it won't, and the reason is that whenever you edit a file using vim, it creates a buffer with the contents of that file. Only when you save (`:write`) the buffer to the file does the underlying file get changed. Until then it remains untouched.\n\nThis means that the above line *will* cause Neomake to lint your code using whatever linters you have enabled. However, it will run it on the *file*, which is untouched, and not on the buffer, which holds your changes.\n\n### Lint-as-you-type\n\nThis brings me to the crux of this post. As far as I know, there is no quick and easy way to run shell commands (like linters) on your buffer contents instead of on your file. There may be some plugins out there that do this, but I personally don't know of any.\n\nThe logical workaround is simple: if you want lint-as-you-type, you'll have to write the buffer before running the linter. Fortunately this is easy, as in vimscript you can chain commands with the pipe (`|`) character:\n\n{% codeblock lang:vimscript line_number:false init.vim/.nvimrc %}\nautocmd InsertChange * update | Neomake\n{% endcodeblock %}\n\n_(note: `update` is just like `write`, only it only writes when the buffer has been modified)_\n\nIf you try this out, you'll see that the linter will run every time you change something in insert mode. But you'll also see that this is probably not what you want. As vim-users, we're used to making edits in small logical chunks, so it makes more sense to use `InsertLeave`. You'll also want to run the linter on changes from normal mode, so try this:\n\n{% codeblock lang:vimscript line_number:false init.vim/.nvimrc %}\nautocmd InsertChange,TextChanged * update | Neomake\n{% endcodeblock %}\n\nIn lieu of operating on buffers instead of files, this is in my opinion probably the closest you can get to lint-as-you-type for now.\n\n### Notes\n\nAdding this code to your vim config file has a serious side-effect: every change you make will be written to the file automatically, and this may or may not clash with your editing style. I personally wouldn't be able to handle the paradigm change, but hey, it might fit your way of getting things done perfectly.\n\nOne thing I can think of off the top of my head that you really must do if you want to work like this is enabling vim's persistent undo. By default, you will lose your undo history when you quit vim. With the above setting enabled, you won't be able to go back ever again if you accidentally close vim or if there's a unexpected crash or power outage.\n\nHere's what to add to your config to enable persistent undos, which will allow you to go back in such cases:\n\n{% codeblock lang:vimscript line_number:false init.vim/.nvimrc %}\nset undodir=~/.config/nvim/undodir\nset undofile\n{% endcodeblock %}\n\nYou can set the amount of undos to remember with `set undolevels=X` (default is 1000) and of course you can set the undodir to anything you want, but make sure the directory exists! Read `:h undo-persistence` to learn more.\n\nThat's it. I hope this lint-as-you-type style works out for some of you out there ;-)\n","slug":"lint-as-you-type-with-neovim-and-neomake","published":1,"updated":"2016-04-02T20:32:59.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk3r0025knz9fbccgu2v","content":"<p><em>Related:</em></p>\n<ul>\n<li><a href=\"/vim/2015/linting-code-with-neomake-and-neovim\">Linting code with Neomake and Neovim</a></li>\n<li><a href=\"/vim/2015/linting-code-with-neovim-and-neomake-eslint-edition\">Linting code with Neovim and Neomake, ESLint edition</a></li>\n</ul>\n\n<hr>\n\n<p>An exchange with commenter flndr8 on <a href=\"/vim/2015/linting-code-with-neomake-and-neovim\">my first Neomake post</a> inspired me to talk a little bit about ‘lint-as-you-type’ functionality in Neovim.</p>\n<p>I’m not sure what the exact term for it is, but what I mean by lint-as-you-type is a kind of IDE-like feature that would run a linter on your code while you are editing the file. This in contrast with the ‘lint-when-you-save’ approach, which I covered briefly in my previous two articles on this subject.</p>\n<p>Now, if this feature is high on your wishlist, I’ve got good news and bad news. The bad news is that, as far as I know, there is no optimal way (yet) to get this in vim. So if you consider this a killer feature, you may want to consider using a real IDE like <a href=\"https://www.jetbrains.com/webstorm/\" target=\"_blank\" rel=\"external\">WebStorm</a>.</p>\n<p>However, the good news is that you can get very close indeed. So if lint-when-you-save just doesn’t cut it for you, and you are willing to change the way you use vim a little bit, you might still get what you want.</p>\n<a id=\"more\"></a>\n<h3 id=\"Autocommands-and-events\"><a href=\"#Autocommands-and-events\" class=\"headerlink\" title=\"Autocommands and events\"></a>Autocommands and events</h3><p>When you want to run a particular command, plugin or function when something happens in vim, the normal way to do it is with an autocommand or <code>autocmd</code>. The syntax is pretty simple, take for example this line, which nets you lint-when-you-save functionality:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">autocmd BufWritePost,BufEnter * Neomake</div></pre></td></tr></table></figure>\n<ul>\n<li><code>autocmd</code> tells vim that this line is an autocommand</li>\n<li><code>BufWritePost,BufEnter</code> are two events to listen for</li>\n<li><code>*</code> is a selector (in this case a wildcard) - for example to make the command only run on javascript files, replace this with <code>*.js</code></li>\n<li><code>Neomake</code> is the command that runs when the event triggers</li>\n</ul>\n<p>Conclusion: with this line, Neomake will run on the current file whenever the <code>BufWritePost</code> or <code>BufEnter</code> event triggers. <code>BufWritePost</code> signifies that it will happen after writing the buffer to the file and <code>BufEnter</code> means it will run upon switching to a buffer.</p>\n<img src=\"/vim/2015/lint-as-you-type-with-neovim-and-neomake/autocmd.png\" alt=\"autocmd events screenshot\" title=\"autocmd events screenshot\">\n<p>You can get a list of supported events by opening vim and typing <code>:h autocmd-events</code>. There are quite a few of them as you see, but the ones that look particularly interesting if you want to enable lint-as-you-type functionality are probably <code>InsertChange</code>, <code>InsertLeave</code>, <code>TextChanged</code> and <code>TextChangedI</code>. The story doesn’t end here though, because of the way vim handles text editing.</p>\n<h3 id=\"Buffers-and-Files\"><a href=\"#Buffers-and-Files\" class=\"headerlink\" title=\"Buffers and Files\"></a>Buffers and Files</h3><p>After reading the previous paragraphs, you might suppose that this should net you at least some of the desired lint-as-you-type functionality:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">autocmd InsertChange * Neomake</div></pre></td></tr></table></figure>\n<p>But it won’t, and the reason is that whenever you edit a file using vim, it creates a buffer with the contents of that file. Only when you save (<code>:write</code>) the buffer to the file does the underlying file get changed. Until then it remains untouched.</p>\n<p>This means that the above line <em>will</em> cause Neomake to lint your code using whatever linters you have enabled. However, it will run it on the <em>file</em>, which is untouched, and not on the buffer, which holds your changes.</p>\n<h3 id=\"Lint-as-you-type\"><a href=\"#Lint-as-you-type\" class=\"headerlink\" title=\"Lint-as-you-type\"></a>Lint-as-you-type</h3><p>This brings me to the crux of this post. As far as I know, there is no quick and easy way to run shell commands (like linters) on your buffer contents instead of on your file. There may be some plugins out there that do this, but I personally don’t know of any.</p>\n<p>The logical workaround is simple: if you want lint-as-you-type, you’ll have to write the buffer before running the linter. Fortunately this is easy, as in vimscript you can chain commands with the pipe (<code>|</code>) character:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">autocmd InsertChange * update | Neomake</div></pre></td></tr></table></figure>\n<p><em>(note: <code>update</code> is just like <code>write</code>, only it only writes when the buffer has been modified)</em></p>\n<p>If you try this out, you’ll see that the linter will run every time you change something in insert mode. But you’ll also see that this is probably not what you want. As vim-users, we’re used to making edits in small logical chunks, so it makes more sense to use <code>InsertLeave</code>. You’ll also want to run the linter on changes from normal mode, so try this:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">autocmd InsertChange,TextChanged * update | Neomake</div></pre></td></tr></table></figure>\n<p>In lieu of operating on buffers instead of files, this is in my opinion probably the closest you can get to lint-as-you-type for now.</p>\n<h3 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h3><p>Adding this code to your vim config file has a serious side-effect: every change you make will be written to the file automatically, and this may or may not clash with your editing style. I personally wouldn’t be able to handle the paradigm change, but hey, it might fit your way of getting things done perfectly.</p>\n<p>One thing I can think of off the top of my head that you really must do if you want to work like this is enabling vim’s persistent undo. By default, you will lose your undo history when you quit vim. With the above setting enabled, you won’t be able to go back ever again if you accidentally close vim or if there’s a unexpected crash or power outage.</p>\n<p>Here’s what to add to your config to enable persistent undos, which will allow you to go back in such cases:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">set undodir=~/.config/nvim/undodir</div><div class=\"line\">set undofile</div></pre></td></tr></table></figure>\n<p>You can set the amount of undos to remember with <code>set undolevels=X</code> (default is 1000) and of course you can set the undodir to anything you want, but make sure the directory exists! Read <code>:h undo-persistence</code> to learn more.</p>\n<p>That’s it. I hope this lint-as-you-type style works out for some of you out there ;-)</p>","excerpt":"<p><em>Related:</em></p>\n<ul>\n<li><a href=\"/vim/2015/linting-code-with-neomake-and-neovim\">Linting code with Neomake and Neovim</a></li>\n<li><a href=\"/vim/2015/linting-code-with-neovim-and-neomake-eslint-edition\">Linting code with Neovim and Neomake, ESLint edition</a></li>\n</ul>\n\n<hr>\n\n<p>An exchange with commenter flndr8 on <a href=\"/vim/2015/linting-code-with-neomake-and-neovim\">my first Neomake post</a> inspired me to talk a little bit about ‘lint-as-you-type’ functionality in Neovim.</p>\n<p>I’m not sure what the exact term for it is, but what I mean by lint-as-you-type is a kind of IDE-like feature that would run a linter on your code while you are editing the file. This in contrast with the ‘lint-when-you-save’ approach, which I covered briefly in my previous two articles on this subject.</p>\n<p>Now, if this feature is high on your wishlist, I’ve got good news and bad news. The bad news is that, as far as I know, there is no optimal way (yet) to get this in vim. So if you consider this a killer feature, you may want to consider using a real IDE like <a href=\"https://www.jetbrains.com/webstorm/\">WebStorm</a>.</p>\n<p>However, the good news is that you can get very close indeed. So if lint-when-you-save just doesn’t cut it for you, and you are willing to change the way you use vim a little bit, you might still get what you want.</p>","more":"<h3 id=\"Autocommands-and-events\"><a href=\"#Autocommands-and-events\" class=\"headerlink\" title=\"Autocommands and events\"></a>Autocommands and events</h3><p>When you want to run a particular command, plugin or function when something happens in vim, the normal way to do it is with an autocommand or <code>autocmd</code>. The syntax is pretty simple, take for example this line, which nets you lint-when-you-save functionality:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">autocmd BufWritePost,BufEnter * Neomake</div></pre></td></tr></table></figure>\n<ul>\n<li><code>autocmd</code> tells vim that this line is an autocommand</li>\n<li><code>BufWritePost,BufEnter</code> are two events to listen for</li>\n<li><code>*</code> is a selector (in this case a wildcard) - for example to make the command only run on javascript files, replace this with <code>*.js</code></li>\n<li><code>Neomake</code> is the command that runs when the event triggers</li>\n</ul>\n<p>Conclusion: with this line, Neomake will run on the current file whenever the <code>BufWritePost</code> or <code>BufEnter</code> event triggers. <code>BufWritePost</code> signifies that it will happen after writing the buffer to the file and <code>BufEnter</code> means it will run upon switching to a buffer.</p>\n<img src=\"/vim/2015/lint-as-you-type-with-neovim-and-neomake/autocmd.png\" alt=\"autocmd events screenshot\" title=\"autocmd events screenshot\">\n<p>You can get a list of supported events by opening vim and typing <code>:h autocmd-events</code>. There are quite a few of them as you see, but the ones that look particularly interesting if you want to enable lint-as-you-type functionality are probably <code>InsertChange</code>, <code>InsertLeave</code>, <code>TextChanged</code> and <code>TextChangedI</code>. The story doesn’t end here though, because of the way vim handles text editing.</p>\n<h3 id=\"Buffers-and-Files\"><a href=\"#Buffers-and-Files\" class=\"headerlink\" title=\"Buffers and Files\"></a>Buffers and Files</h3><p>After reading the previous paragraphs, you might suppose that this should net you at least some of the desired lint-as-you-type functionality:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">autocmd InsertChange * Neomake</div></pre></td></tr></table></figure>\n<p>But it won’t, and the reason is that whenever you edit a file using vim, it creates a buffer with the contents of that file. Only when you save (<code>:write</code>) the buffer to the file does the underlying file get changed. Until then it remains untouched.</p>\n<p>This means that the above line <em>will</em> cause Neomake to lint your code using whatever linters you have enabled. However, it will run it on the <em>file</em>, which is untouched, and not on the buffer, which holds your changes.</p>\n<h3 id=\"Lint-as-you-type\"><a href=\"#Lint-as-you-type\" class=\"headerlink\" title=\"Lint-as-you-type\"></a>Lint-as-you-type</h3><p>This brings me to the crux of this post. As far as I know, there is no quick and easy way to run shell commands (like linters) on your buffer contents instead of on your file. There may be some plugins out there that do this, but I personally don’t know of any.</p>\n<p>The logical workaround is simple: if you want lint-as-you-type, you’ll have to write the buffer before running the linter. Fortunately this is easy, as in vimscript you can chain commands with the pipe (<code>|</code>) character:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">autocmd InsertChange * update | Neomake</div></pre></td></tr></table></figure>\n<p><em>(note: <code>update</code> is just like <code>write</code>, only it only writes when the buffer has been modified)</em></p>\n<p>If you try this out, you’ll see that the linter will run every time you change something in insert mode. But you’ll also see that this is probably not what you want. As vim-users, we’re used to making edits in small logical chunks, so it makes more sense to use <code>InsertLeave</code>. You’ll also want to run the linter on changes from normal mode, so try this:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">autocmd InsertChange,TextChanged * update | Neomake</div></pre></td></tr></table></figure>\n<p>In lieu of operating on buffers instead of files, this is in my opinion probably the closest you can get to lint-as-you-type for now.</p>\n<h3 id=\"Notes\"><a href=\"#Notes\" class=\"headerlink\" title=\"Notes\"></a>Notes</h3><p>Adding this code to your vim config file has a serious side-effect: every change you make will be written to the file automatically, and this may or may not clash with your editing style. I personally wouldn’t be able to handle the paradigm change, but hey, it might fit your way of getting things done perfectly.</p>\n<p>One thing I can think of off the top of my head that you really must do if you want to work like this is enabling vim’s persistent undo. By default, you will lose your undo history when you quit vim. With the above setting enabled, you won’t be able to go back ever again if you accidentally close vim or if there’s a unexpected crash or power outage.</p>\n<p>Here’s what to add to your config to enable persistent undos, which will allow you to go back in such cases:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">set undodir=~/.config/nvim/undodir</div><div class=\"line\">set undofile</div></pre></td></tr></table></figure>\n<p>You can set the amount of undos to remember with <code>set undolevels=X</code> (default is 1000) and of course you can set the undodir to anything you want, but make sure the directory exists! Read <code>:h undo-persistence</code> to learn more.</p>\n<p>That’s it. I hope this lint-as-you-type style works out for some of you out there ;-)</p>"},{"title":"Linux tip of the day: temporarily prevent your screen from going to sleep","date":"2016-01-15T16:12:00.000Z","_content":"\nI just wrote a quick little script to temporarily prevent my screen from going to sleep. Since this has been bugging me for a while, but I only just thought to actually address it, I figured there may be someone out there who can benefit from it also.\n\nI'm not sure whether only people on Arch Linux have this problem sometimes, or Linux users in general, but if you've ever had your screen turn off in the middle of a Skype session (sadly we're all stuck with that program..) or while watching a video in your browser, or during some other full-screen activity that doesn't automatically turn off your power saving settings, this might be just what you need.\n\n{% codeblock lang:sh $HOME/bin/prevent-screen-sleep %}\n#!/bin/bash\n\nif [[ $1 =~ ^0$ ]]; then\n  xset s on +dpms\n  echo \"No longer preventing screen sleep\"\n  killall $(basename $0)\n  exit 0\nelif ! [[ $1 =~ ^[0-9]+$ ]]; then\n  echo \"example: $(basename $0) 60 ==> prevent sleeping for 60 minutes\"\n  echo \"example: $(basename $0) 0  ==> revert to default settings\"\n  exit 1\nfi\n\nxset s off -dpms\n\necho \"Preventing screen sleep for $1 minutes\"\n(sleep ${1}m && xset s on +dpms) &\n{% endcodeblock %}\n\n<!-- more -->\n\nPut this script in a folder that's in your `$PATH` - I put it in `$HOME/bin/prevent-screen-sleep` myself - and make it executable (`sudo chmod +x prevent-screen-sleep`). Now, if for example you want to disable the screen saver and the energy star features for an hour, enter `prevent-screen-sleep 60`.\n\nThe settings will go back to normal after the amount of minutes you specify (multiple calls will overlap, not extend the original timer), but you can also manually reset with `prevent-screen-sleep 0`.\n\nJust a little personal thing to solve a tiny issue I've been having, but who knows, if you got here by googling around, use it and enjoy!\n","source":"_posts/linux-tip-of-the-day-temporarily-prevent-your-screen-from-going-to-sleep.md","raw":"title: \"Linux tip of the day: temporarily prevent your screen from going to sleep\"\ndate: 2016-01-15 16:12:00\ncategories: linux\ntags:\n\t- arch linux\n  - bash\n  - command line\n  - shell\n---\n\nI just wrote a quick little script to temporarily prevent my screen from going to sleep. Since this has been bugging me for a while, but I only just thought to actually address it, I figured there may be someone out there who can benefit from it also.\n\nI'm not sure whether only people on Arch Linux have this problem sometimes, or Linux users in general, but if you've ever had your screen turn off in the middle of a Skype session (sadly we're all stuck with that program..) or while watching a video in your browser, or during some other full-screen activity that doesn't automatically turn off your power saving settings, this might be just what you need.\n\n{% codeblock lang:sh $HOME/bin/prevent-screen-sleep %}\n#!/bin/bash\n\nif [[ $1 =~ ^0$ ]]; then\n  xset s on +dpms\n  echo \"No longer preventing screen sleep\"\n  killall $(basename $0)\n  exit 0\nelif ! [[ $1 =~ ^[0-9]+$ ]]; then\n  echo \"example: $(basename $0) 60 ==> prevent sleeping for 60 minutes\"\n  echo \"example: $(basename $0) 0  ==> revert to default settings\"\n  exit 1\nfi\n\nxset s off -dpms\n\necho \"Preventing screen sleep for $1 minutes\"\n(sleep ${1}m && xset s on +dpms) &\n{% endcodeblock %}\n\n<!-- more -->\n\nPut this script in a folder that's in your `$PATH` - I put it in `$HOME/bin/prevent-screen-sleep` myself - and make it executable (`sudo chmod +x prevent-screen-sleep`). Now, if for example you want to disable the screen saver and the energy star features for an hour, enter `prevent-screen-sleep 60`.\n\nThe settings will go back to normal after the amount of minutes you specify (multiple calls will overlap, not extend the original timer), but you can also manually reset with `prevent-screen-sleep 0`.\n\nJust a little personal thing to solve a tiny issue I've been having, but who knows, if you got here by googling around, use it and enjoy!\n","slug":"linux-tip-of-the-day-temporarily-prevent-your-screen-from-going-to-sleep","published":1,"updated":"2016-01-17T14:56:34.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk3u0028knz9njpe6n0q","content":"<p>I just wrote a quick little script to temporarily prevent my screen from going to sleep. Since this has been bugging me for a while, but I only just thought to actually address it, I figured there may be someone out there who can benefit from it also.</p>\n<p>I’m not sure whether only people on Arch Linux have this problem sometimes, or Linux users in general, but if you’ve ever had your screen turn off in the middle of a Skype session (sadly we’re all stuck with that program..) or while watching a video in your browser, or during some other full-screen activity that doesn’t automatically turn off your power saving settings, this might be just what you need.</p>\n<figure class=\"highlight sh\"><figcaption><span>$HOME/bin/prevent-screen-sleep</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$1</span> =~ ^0$ ]]; <span class=\"keyword\">then</span></div><div class=\"line\">  xset s on +dpms</div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"No longer preventing screen sleep\"</span></div><div class=\"line\">  killall $(basename <span class=\"variable\">$0</span>)</div><div class=\"line\">  <span class=\"built_in\">exit</span> 0</div><div class=\"line\"><span class=\"keyword\">elif</span> ! [[ <span class=\"variable\">$1</span> =~ ^[0-9]+$ ]]; <span class=\"keyword\">then</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"example: <span class=\"variable\">$(basename $0)</span> 60 ==&gt; prevent sleeping for 60 minutes\"</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"example: <span class=\"variable\">$(basename $0)</span> 0  ==&gt; revert to default settings\"</span></div><div class=\"line\">  <span class=\"built_in\">exit</span> 1</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">xset s off -dpms</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Preventing screen sleep for <span class=\"variable\">$1</span> minutes\"</span></div><div class=\"line\">(sleep <span class=\"variable\">$&#123;1&#125;</span>m &amp;&amp; xset s on +dpms) &amp;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>Put this script in a folder that’s in your <code>$PATH</code> - I put it in <code>$HOME/bin/prevent-screen-sleep</code> myself - and make it executable (<code>sudo chmod +x prevent-screen-sleep</code>). Now, if for example you want to disable the screen saver and the energy star features for an hour, enter <code>prevent-screen-sleep 60</code>.</p>\n<p>The settings will go back to normal after the amount of minutes you specify (multiple calls will overlap, not extend the original timer), but you can also manually reset with <code>prevent-screen-sleep 0</code>.</p>\n<p>Just a little personal thing to solve a tiny issue I’ve been having, but who knows, if you got here by googling around, use it and enjoy!</p>","excerpt":"<p>I just wrote a quick little script to temporarily prevent my screen from going to sleep. Since this has been bugging me for a while, but I only just thought to actually address it, I figured there may be someone out there who can benefit from it also.</p>\n<p>I’m not sure whether only people on Arch Linux have this problem sometimes, or Linux users in general, but if you’ve ever had your screen turn off in the middle of a Skype session (sadly we’re all stuck with that program..) or while watching a video in your browser, or during some other full-screen activity that doesn’t automatically turn off your power saving settings, this might be just what you need.</p>\n<figure class=\"highlight sh\"><figcaption><span>$HOME/bin/prevent-screen-sleep</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$1</span> =~ ^0$ ]]; <span class=\"keyword\">then</span></div><div class=\"line\">  xset s on +dpms</div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"No longer preventing screen sleep\"</span></div><div class=\"line\">  killall $(basename <span class=\"variable\">$0</span>)</div><div class=\"line\">  <span class=\"built_in\">exit</span> 0</div><div class=\"line\"><span class=\"keyword\">elif</span> ! [[ <span class=\"variable\">$1</span> =~ ^[0-9]+$ ]]; <span class=\"keyword\">then</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"example: <span class=\"variable\">$(basename $0)</span> 60 ==&gt; prevent sleeping for 60 minutes\"</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"example: <span class=\"variable\">$(basename $0)</span> 0  ==&gt; revert to default settings\"</span></div><div class=\"line\">  <span class=\"built_in\">exit</span> 1</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">xset s off -dpms</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Preventing screen sleep for <span class=\"variable\">$1</span> minutes\"</span></div><div class=\"line\">(sleep <span class=\"variable\">$&#123;1&#125;</span>m &amp;&amp; xset s on +dpms) &amp;</div></pre></td></tr></table></figure>","more":"<p>Put this script in a folder that’s in your <code>$PATH</code> - I put it in <code>$HOME/bin/prevent-screen-sleep</code> myself - and make it executable (<code>sudo chmod +x prevent-screen-sleep</code>). Now, if for example you want to disable the screen saver and the energy star features for an hour, enter <code>prevent-screen-sleep 60</code>.</p>\n<p>The settings will go back to normal after the amount of minutes you specify (multiple calls will overlap, not extend the original timer), but you can also manually reset with <code>prevent-screen-sleep 0</code>.</p>\n<p>Just a little personal thing to solve a tiny issue I’ve been having, but who knows, if you got here by googling around, use it and enjoy!</p>"},{"title":"markdown2troff: regular expressions ftw","date":"2016-02-18T14:14:38.000Z","_content":"\nI published another npm module [on GitHub](https://github.com/greg-js/markdown2troff) [and npm](https://www.npmjs.com/package/markdown2troff). It's a simple converter that takes `markdown` as an input and spits out `troff`.\n\nFor those not in the know, `troff` (and its GNU implementation, `groff`) is a somewhat arcane text format from the seventies, still used today in linux `man` pages - and maybe other things? It's not quite the most pleasant format to work with, but it does the job well, which is why we still have it around.\n\n`markdown -> troff` conversion was already possible in node with [remark-man](https://github.com/wooorm/remark-man). This package works by first creating an [abstract syntax tree (AST)](https://en.wikipedia.org/wiki/Abstract_syntax_tree) from the `markdown` and using that as a base for manipulation or conversion to other formats.\n\nNow, if you want the best (as in, most accurate) possible conversion from `markdown` to `troff`, I can't think of a better approach than the one taken by `remark-man`, because you are guaranteed to have a perfect representation of the source (inasmuch as it is possible to represent `markdown` syntax in `troff` of course).\n\nHowever, this approach is rather involved, which I noticed when adding the package as a dependency to my [arch-wiki-man](https://www.npmjs.com/package/arch-wiki-man) project. I wanted a much lighter solution and was willing to give up a little accuracy in conversion to achieve it.\n\nSo I got to work and made `markdown2troff`. It uses nothing but regular expressions (well, and JavaScript of course) to go from source to output so it's blazing fast and has no dependencies at all and it currently handles all conversion except for tables and some special characters.\n\nI wrote it in a hurry and with a very specific purpose in mind so right now I admit it has a bit of a spaghetti-code vibe to it and I haven't added any tests. When I get some time off from being ill later, I'll go back and make it nicer to look at.\n\nBut as far as I can see, it works and does almost exactly what I want. If you need a `markdown` -> `troff` converter in your NodeJS (though it's easily portable to other languages) project, consider my package. And if you do, also consider contributing and making it better! Thanks for reading :-)\n","source":"_posts/markdown2troff-regular-expressions-ftw.md","raw":"title: 'markdown2troff: regular expressions ftw'\ndate: 2016-02-18 14:14:38\ncategories: javascript\ntags:\n- open source\n- npm\n- js\n---\n\nI published another npm module [on GitHub](https://github.com/greg-js/markdown2troff) [and npm](https://www.npmjs.com/package/markdown2troff). It's a simple converter that takes `markdown` as an input and spits out `troff`.\n\nFor those not in the know, `troff` (and its GNU implementation, `groff`) is a somewhat arcane text format from the seventies, still used today in linux `man` pages - and maybe other things? It's not quite the most pleasant format to work with, but it does the job well, which is why we still have it around.\n\n`markdown -> troff` conversion was already possible in node with [remark-man](https://github.com/wooorm/remark-man). This package works by first creating an [abstract syntax tree (AST)](https://en.wikipedia.org/wiki/Abstract_syntax_tree) from the `markdown` and using that as a base for manipulation or conversion to other formats.\n\nNow, if you want the best (as in, most accurate) possible conversion from `markdown` to `troff`, I can't think of a better approach than the one taken by `remark-man`, because you are guaranteed to have a perfect representation of the source (inasmuch as it is possible to represent `markdown` syntax in `troff` of course).\n\nHowever, this approach is rather involved, which I noticed when adding the package as a dependency to my [arch-wiki-man](https://www.npmjs.com/package/arch-wiki-man) project. I wanted a much lighter solution and was willing to give up a little accuracy in conversion to achieve it.\n\nSo I got to work and made `markdown2troff`. It uses nothing but regular expressions (well, and JavaScript of course) to go from source to output so it's blazing fast and has no dependencies at all and it currently handles all conversion except for tables and some special characters.\n\nI wrote it in a hurry and with a very specific purpose in mind so right now I admit it has a bit of a spaghetti-code vibe to it and I haven't added any tests. When I get some time off from being ill later, I'll go back and make it nicer to look at.\n\nBut as far as I can see, it works and does almost exactly what I want. If you need a `markdown` -> `troff` converter in your NodeJS (though it's easily portable to other languages) project, consider my package. And if you do, also consider contributing and making it better! Thanks for reading :-)\n","slug":"markdown2troff-regular-expressions-ftw","published":1,"updated":"2016-02-18T14:47:47.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk3w002cknz9zxr4nuit","content":"<p>I published another npm module <a href=\"https://github.com/greg-js/markdown2troff\" target=\"_blank\" rel=\"external\">on GitHub</a> <a href=\"https://www.npmjs.com/package/markdown2troff\" target=\"_blank\" rel=\"external\">and npm</a>. It’s a simple converter that takes <code>markdown</code> as an input and spits out <code>troff</code>.</p>\n<p>For those not in the know, <code>troff</code> (and its GNU implementation, <code>groff</code>) is a somewhat arcane text format from the seventies, still used today in linux <code>man</code> pages - and maybe other things? It’s not quite the most pleasant format to work with, but it does the job well, which is why we still have it around.</p>\n<p><code>markdown -&gt; troff</code> conversion was already possible in node with <a href=\"https://github.com/wooorm/remark-man\" target=\"_blank\" rel=\"external\">remark-man</a>. This package works by first creating an <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\" target=\"_blank\" rel=\"external\">abstract syntax tree (AST)</a> from the <code>markdown</code> and using that as a base for manipulation or conversion to other formats.</p>\n<p>Now, if you want the best (as in, most accurate) possible conversion from <code>markdown</code> to <code>troff</code>, I can’t think of a better approach than the one taken by <code>remark-man</code>, because you are guaranteed to have a perfect representation of the source (inasmuch as it is possible to represent <code>markdown</code> syntax in <code>troff</code> of course).</p>\n<p>However, this approach is rather involved, which I noticed when adding the package as a dependency to my <a href=\"https://www.npmjs.com/package/arch-wiki-man\" target=\"_blank\" rel=\"external\">arch-wiki-man</a> project. I wanted a much lighter solution and was willing to give up a little accuracy in conversion to achieve it.</p>\n<p>So I got to work and made <code>markdown2troff</code>. It uses nothing but regular expressions (well, and JavaScript of course) to go from source to output so it’s blazing fast and has no dependencies at all and it currently handles all conversion except for tables and some special characters.</p>\n<p>I wrote it in a hurry and with a very specific purpose in mind so right now I admit it has a bit of a spaghetti-code vibe to it and I haven’t added any tests. When I get some time off from being ill later, I’ll go back and make it nicer to look at.</p>\n<p>But as far as I can see, it works and does almost exactly what I want. If you need a <code>markdown</code> -&gt; <code>troff</code> converter in your NodeJS (though it’s easily portable to other languages) project, consider my package. And if you do, also consider contributing and making it better! Thanks for reading :-)</p>","excerpt":"","more":"<p>I published another npm module <a href=\"https://github.com/greg-js/markdown2troff\">on GitHub</a> <a href=\"https://www.npmjs.com/package/markdown2troff\">and npm</a>. It’s a simple converter that takes <code>markdown</code> as an input and spits out <code>troff</code>.</p>\n<p>For those not in the know, <code>troff</code> (and its GNU implementation, <code>groff</code>) is a somewhat arcane text format from the seventies, still used today in linux <code>man</code> pages - and maybe other things? It’s not quite the most pleasant format to work with, but it does the job well, which is why we still have it around.</p>\n<p><code>markdown -&gt; troff</code> conversion was already possible in node with <a href=\"https://github.com/wooorm/remark-man\">remark-man</a>. This package works by first creating an <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">abstract syntax tree (AST)</a> from the <code>markdown</code> and using that as a base for manipulation or conversion to other formats.</p>\n<p>Now, if you want the best (as in, most accurate) possible conversion from <code>markdown</code> to <code>troff</code>, I can’t think of a better approach than the one taken by <code>remark-man</code>, because you are guaranteed to have a perfect representation of the source (inasmuch as it is possible to represent <code>markdown</code> syntax in <code>troff</code> of course).</p>\n<p>However, this approach is rather involved, which I noticed when adding the package as a dependency to my <a href=\"https://www.npmjs.com/package/arch-wiki-man\">arch-wiki-man</a> project. I wanted a much lighter solution and was willing to give up a little accuracy in conversion to achieve it.</p>\n<p>So I got to work and made <code>markdown2troff</code>. It uses nothing but regular expressions (well, and JavaScript of course) to go from source to output so it’s blazing fast and has no dependencies at all and it currently handles all conversion except for tables and some special characters.</p>\n<p>I wrote it in a hurry and with a very specific purpose in mind so right now I admit it has a bit of a spaghetti-code vibe to it and I haven’t added any tests. When I get some time off from being ill later, I’ll go back and make it nicer to look at.</p>\n<p>But as far as I can see, it works and does almost exactly what I want. If you need a <code>markdown</code> -&gt; <code>troff</code> converter in your NodeJS (though it’s easily portable to other languages) project, consider my package. And if you do, also consider contributing and making it better! Thanks for reading :-)</p>"},{"title":"Linting code with Neovim and Neomake - ESLint edition","date":"2015-11-13T17:01:49.000Z","_content":"\n*Related:*\n* [Linting code with Neomake and Neovim](/vim/2015/linting-code-with-neomake-and-neovim)\n* [Lint as you type with Neovim and Neomake](/vim/2015/lint-as-you-type-with-neovim-and-neomake/)\n\n{% raw %}\n<hr />\n{% endraw %}\n\n[Ten days ago, I wrote](/vim/2015/linting-code-with-neomake-and-neovim) about how I set up the [Neomake](https://github.com/benekastah/neomake) plugin for Neovim and how I linted my JavaScript code using the [JSCS linter](http://jscs.info/).\n\nWhile that worked alright for me, I kept running into weird bugs where JSCS would tell me there was a problem with my code, but the error message would simply display as \"undefined\". I didn't have the time to figure out what exactly was wrong, so I ended up switching to ESLint instead and it's been smooth sailing ever since. I'll explain how to set it up in this post.\n\n<!-- more -->\n\nMy setup does exactly what it should do now, so I thought I'd take a few moments and share how I've set it up and how you can do the same. It might be a little bit of extra work to get it all going, but you'll be glad you did because having a convenient way to lint your code is extremely useful for everyone. Particularly so for people who work in big teams, but even if it's just you working on a hobby project.\n\n### Step 1: Install prerequisites\n\nYou need [Neovim](https://github.com/neovim/neovim/wiki/Installing-Neovim), [Neomake](https://github.com/neovim/neovim/wiki/Installing-Neovim) and [ESLint](https://github.com/eslint/eslint).\n\n### Step 2: Set up Neomake\n\nYour project-specific configuration is all in the `.eslintrc` file. That means you don't have to run it with special command-line parameters and ESLint will work out of the box just by setting it up like this:\n\n{% codeblock lang:vim init.vim %}\nlet g:neomake_javascript_enabled_makers = ['eslint']\n{% endcodeblock %}\n\nHowever, you may want to run ESLint on your code with certain command-line options anyway. In that case, continue reading and/or check out [my other article on Neomake](vim/2015/linting-code-with-neomake-and-neovim) for more configuration tips. You'll also find some help there with troubleshooting Neomake in case something does go wrong. In most cases, the default will probably suffice though.\n\n### Step 3: Initialize ESLint\n\nYou have a few options here, but all of them involve making an `.eslintrc` file. You can get it made for you and use the recommended ESLint defaults after making a few style decisions interactively:\n\n{% codeblock lang:bash line_number:false %}\neslint --init\n{% endcodeblock %}\n\nOr you can use one of the ESLint configuration files that are usually supplied by the popular style guides. [Here's an example](https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb).\n\nOr you can mix and match and/or build your own ESLint config. For what it's worth, this is what I'm currently using. It's mostly the AirBnB style guide, but I turned off a few rules that were simply too annoying for me and I also required `use strict`:\n\n{% codeblock lang:json .eslintrc %}\n{\n    \"extends\": \"airbnb/legacy\",\n    \"rules\": {\n        \"strict\": [2, \"global\"],\n        \"no-multi-spaces\": 0,\n        \"no-use-before-define\": 0,\n        \"no-console\": 0,\n        \"padded-blocks\": 0,\n        \"no-else-return\": 0\n    },\n    \"env\": {\n        \"node\": true\n    }\n}\n{% endcodeblock %}\n\nTwo more things you probably want to add to your `.eslintrc` are [the environment](http://eslint.org/docs/user-guide/configuring.html#specifying-environments) and perhaps a few globals you need in your project. For the latter:\n\n{% codeblock lang:json .eslintrc %}\n{\n    // ...\n    \"globals\": {\n        \"global1\": true,    // you're allowed to overwrite this one in your code\n        \"GLOBAL2\": false    // ESLint will complain if you try to overwrite this constant\n    }\n}\n{% endcodeblock %}\n\n### Step 4: Set up some vim keybinds\n\nYou don't strictly have to do this, but you'll make things much easier for yourself if you set up convenient keybinds for your in-vim linter. I go into a bit more detail about why you'll want this in [my other Neomake post](vim/2015/linting-code-with-neomake-and-neovim), but here's how I've set mine up:\n\n{% codeblock lang:vim init.vim line_number:false %}\n\" neomake\nnmap <Leader><Space>o :lopen<CR>      \" open location window\nnmap <Leader><Space>c :lclose<CR>     \" close location window\nnmap <Leader><Space>, :ll<CR>         \" go to current error/warning\nnmap <Leader><Space>n :lnext<CR>      \" next error/warning\nnmap <Leader><Space>p :lprev<CR>      \" previous error/warning\n{% endcodeblock %}\n\nIn my case, I have <Leader> set to comma (comma-as-leader masterrace reporting in).\n\nSo, for example, to go to the current error, I just type `, ,` (`<comma><space><comma>`) and so on. Quite convenient.\n\nNow if only there was another plugin to automatically debug my code...\n","source":"_posts/linting-code-with-neovim-and-neomake-eslint-edition.md","raw":"title: Linting code with Neovim and Neomake - ESLint edition\ncategories: vim\ntags:\n  - linting\n  - js\n  - neovim\n  - style\n  - vim\ndate: 2015-11-13 17:01:49\n---\n\n*Related:*\n* [Linting code with Neomake and Neovim](/vim/2015/linting-code-with-neomake-and-neovim)\n* [Lint as you type with Neovim and Neomake](/vim/2015/lint-as-you-type-with-neovim-and-neomake/)\n\n{% raw %}\n<hr />\n{% endraw %}\n\n[Ten days ago, I wrote](/vim/2015/linting-code-with-neomake-and-neovim) about how I set up the [Neomake](https://github.com/benekastah/neomake) plugin for Neovim and how I linted my JavaScript code using the [JSCS linter](http://jscs.info/).\n\nWhile that worked alright for me, I kept running into weird bugs where JSCS would tell me there was a problem with my code, but the error message would simply display as \"undefined\". I didn't have the time to figure out what exactly was wrong, so I ended up switching to ESLint instead and it's been smooth sailing ever since. I'll explain how to set it up in this post.\n\n<!-- more -->\n\nMy setup does exactly what it should do now, so I thought I'd take a few moments and share how I've set it up and how you can do the same. It might be a little bit of extra work to get it all going, but you'll be glad you did because having a convenient way to lint your code is extremely useful for everyone. Particularly so for people who work in big teams, but even if it's just you working on a hobby project.\n\n### Step 1: Install prerequisites\n\nYou need [Neovim](https://github.com/neovim/neovim/wiki/Installing-Neovim), [Neomake](https://github.com/neovim/neovim/wiki/Installing-Neovim) and [ESLint](https://github.com/eslint/eslint).\n\n### Step 2: Set up Neomake\n\nYour project-specific configuration is all in the `.eslintrc` file. That means you don't have to run it with special command-line parameters and ESLint will work out of the box just by setting it up like this:\n\n{% codeblock lang:vim init.vim %}\nlet g:neomake_javascript_enabled_makers = ['eslint']\n{% endcodeblock %}\n\nHowever, you may want to run ESLint on your code with certain command-line options anyway. In that case, continue reading and/or check out [my other article on Neomake](vim/2015/linting-code-with-neomake-and-neovim) for more configuration tips. You'll also find some help there with troubleshooting Neomake in case something does go wrong. In most cases, the default will probably suffice though.\n\n### Step 3: Initialize ESLint\n\nYou have a few options here, but all of them involve making an `.eslintrc` file. You can get it made for you and use the recommended ESLint defaults after making a few style decisions interactively:\n\n{% codeblock lang:bash line_number:false %}\neslint --init\n{% endcodeblock %}\n\nOr you can use one of the ESLint configuration files that are usually supplied by the popular style guides. [Here's an example](https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb).\n\nOr you can mix and match and/or build your own ESLint config. For what it's worth, this is what I'm currently using. It's mostly the AirBnB style guide, but I turned off a few rules that were simply too annoying for me and I also required `use strict`:\n\n{% codeblock lang:json .eslintrc %}\n{\n    \"extends\": \"airbnb/legacy\",\n    \"rules\": {\n        \"strict\": [2, \"global\"],\n        \"no-multi-spaces\": 0,\n        \"no-use-before-define\": 0,\n        \"no-console\": 0,\n        \"padded-blocks\": 0,\n        \"no-else-return\": 0\n    },\n    \"env\": {\n        \"node\": true\n    }\n}\n{% endcodeblock %}\n\nTwo more things you probably want to add to your `.eslintrc` are [the environment](http://eslint.org/docs/user-guide/configuring.html#specifying-environments) and perhaps a few globals you need in your project. For the latter:\n\n{% codeblock lang:json .eslintrc %}\n{\n    // ...\n    \"globals\": {\n        \"global1\": true,    // you're allowed to overwrite this one in your code\n        \"GLOBAL2\": false    // ESLint will complain if you try to overwrite this constant\n    }\n}\n{% endcodeblock %}\n\n### Step 4: Set up some vim keybinds\n\nYou don't strictly have to do this, but you'll make things much easier for yourself if you set up convenient keybinds for your in-vim linter. I go into a bit more detail about why you'll want this in [my other Neomake post](vim/2015/linting-code-with-neomake-and-neovim), but here's how I've set mine up:\n\n{% codeblock lang:vim init.vim line_number:false %}\n\" neomake\nnmap <Leader><Space>o :lopen<CR>      \" open location window\nnmap <Leader><Space>c :lclose<CR>     \" close location window\nnmap <Leader><Space>, :ll<CR>         \" go to current error/warning\nnmap <Leader><Space>n :lnext<CR>      \" next error/warning\nnmap <Leader><Space>p :lprev<CR>      \" previous error/warning\n{% endcodeblock %}\n\nIn my case, I have <Leader> set to comma (comma-as-leader masterrace reporting in).\n\nSo, for example, to go to the current error, I just type `, ,` (`<comma><space><comma>`) and so on. Quite convenient.\n\nNow if only there was another plugin to automatically debug my code...\n","slug":"linting-code-with-neovim-and-neomake-eslint-edition","published":1,"updated":"2016-04-02T20:32:37.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk41002eknz98j7jt414","content":"<p><em>Related:</em></p>\n<ul>\n<li><a href=\"/vim/2015/linting-code-with-neomake-and-neovim\">Linting code with Neomake and Neovim</a></li>\n<li><a href=\"/vim/2015/lint-as-you-type-with-neovim-and-neomake/\">Lint as you type with Neovim and Neomake</a></li>\n</ul>\n\n<hr>\n\n<p><a href=\"/vim/2015/linting-code-with-neomake-and-neovim\">Ten days ago, I wrote</a> about how I set up the <a href=\"https://github.com/benekastah/neomake\" target=\"_blank\" rel=\"external\">Neomake</a> plugin for Neovim and how I linted my JavaScript code using the <a href=\"http://jscs.info/\" target=\"_blank\" rel=\"external\">JSCS linter</a>.</p>\n<p>While that worked alright for me, I kept running into weird bugs where JSCS would tell me there was a problem with my code, but the error message would simply display as “undefined”. I didn’t have the time to figure out what exactly was wrong, so I ended up switching to ESLint instead and it’s been smooth sailing ever since. I’ll explain how to set it up in this post.</p>\n<a id=\"more\"></a>\n<p>My setup does exactly what it should do now, so I thought I’d take a few moments and share how I’ve set it up and how you can do the same. It might be a little bit of extra work to get it all going, but you’ll be glad you did because having a convenient way to lint your code is extremely useful for everyone. Particularly so for people who work in big teams, but even if it’s just you working on a hobby project.</p>\n<h3 id=\"Step-1-Install-prerequisites\"><a href=\"#Step-1-Install-prerequisites\" class=\"headerlink\" title=\"Step 1: Install prerequisites\"></a>Step 1: Install prerequisites</h3><p>You need <a href=\"https://github.com/neovim/neovim/wiki/Installing-Neovim\" target=\"_blank\" rel=\"external\">Neovim</a>, <a href=\"https://github.com/neovim/neovim/wiki/Installing-Neovim\" target=\"_blank\" rel=\"external\">Neomake</a> and <a href=\"https://github.com/eslint/eslint\" target=\"_blank\" rel=\"external\">ESLint</a>.</p>\n<h3 id=\"Step-2-Set-up-Neomake\"><a href=\"#Step-2-Set-up-Neomake\" class=\"headerlink\" title=\"Step 2: Set up Neomake\"></a>Step 2: Set up Neomake</h3><p>Your project-specific configuration is all in the <code>.eslintrc</code> file. That means you don’t have to run it with special command-line parameters and ESLint will work out of the box just by setting it up like this:</p>\n<figure class=\"highlight vim\"><figcaption><span>init.vim</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:neomake_javascript_enabled_makers</span> = [<span class=\"string\">'eslint'</span>]</div></pre></td></tr></table></figure>\n<p>However, you may want to run ESLint on your code with certain command-line options anyway. In that case, continue reading and/or check out <a href=\"vim/2015/linting-code-with-neomake-and-neovim\">my other article on Neomake</a> for more configuration tips. You’ll also find some help there with troubleshooting Neomake in case something does go wrong. In most cases, the default will probably suffice though.</p>\n<h3 id=\"Step-3-Initialize-ESLint\"><a href=\"#Step-3-Initialize-ESLint\" class=\"headerlink\" title=\"Step 3: Initialize ESLint\"></a>Step 3: Initialize ESLint</h3><p>You have a few options here, but all of them involve making an <code>.eslintrc</code> file. You can get it made for you and use the recommended ESLint defaults after making a few style decisions interactively:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">eslint --init</div></pre></td></tr></table></figure>\n<p>Or you can use one of the ESLint configuration files that are usually supplied by the popular style guides. <a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\" target=\"_blank\" rel=\"external\">Here’s an example</a>.</p>\n<p>Or you can mix and match and/or build your own ESLint config. For what it’s worth, this is what I’m currently using. It’s mostly the AirBnB style guide, but I turned off a few rules that were simply too annoying for me and I also required <code>use strict</code>:</p>\n<figure class=\"highlight json\"><figcaption><span>.eslintrc</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"extends\"</span>: <span class=\"string\">\"airbnb/legacy\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"rules\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"strict\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"global\"</span>],</div><div class=\"line\">        <span class=\"attr\">\"no-multi-spaces\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">\"no-use-before-define\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">\"no-console\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">\"padded-blocks\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">\"no-else-return\"</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"node\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Two more things you probably want to add to your <code>.eslintrc</code> are <a href=\"http://eslint.org/docs/user-guide/configuring.html#specifying-environments\" target=\"_blank\" rel=\"external\">the environment</a> and perhaps a few globals you need in your project. For the latter:</p>\n<figure class=\"highlight\"><figcaption><span>.eslintrc</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    // ...</div><div class=\"line\">    \"globals\": &#123;</div><div class=\"line\">        \"global1\": true,    // you're allowed to overwrite this one in your code</div><div class=\"line\">        \"GLOBAL2\": false    // ESLint will complain if you try to overwrite this constant</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Step-4-Set-up-some-vim-keybinds\"><a href=\"#Step-4-Set-up-some-vim-keybinds\" class=\"headerlink\" title=\"Step 4: Set up some vim keybinds\"></a>Step 4: Set up some vim keybinds</h3><p>You don’t strictly have to do this, but you’ll make things much easier for yourself if you set up convenient keybinds for your in-vim linter. I go into a bit more detail about why you’ll want this in <a href=\"vim/2015/linting-code-with-neomake-and-neovim\">my other Neomake post</a>, but here’s how I’ve set mine up:</p>\n<figure class=\"highlight\"><figcaption><span>init.vim</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">\" neomake</div><div class=\"line\">nmap &lt;Leader&gt;&lt;Space&gt;o :lopen&lt;CR&gt;      \" open location window</div><div class=\"line\">nmap &lt;Leader&gt;&lt;Space&gt;c :lclose&lt;CR&gt;     \" close location window</div><div class=\"line\">nmap &lt;Leader&gt;&lt;Space&gt;, :ll&lt;CR&gt;         \" go to current error/warning</div><div class=\"line\">nmap &lt;Leader&gt;&lt;Space&gt;n :lnext&lt;CR&gt;      \" next error/warning</div><div class=\"line\">nmap &lt;Leader&gt;&lt;Space&gt;p :lprev&lt;CR&gt;      \" previous error/warning</div></pre></td></tr></table></figure>\n<p>In my case, I have <leader> set to comma (comma-as-leader masterrace reporting in).</leader></p>\n<p>So, for example, to go to the current error, I just type <code>, ,</code> (<code>&lt;comma&gt;&lt;space&gt;&lt;comma&gt;</code>) and so on. Quite convenient.</p>\n<p>Now if only there was another plugin to automatically debug my code…</p>","excerpt":"<p><em>Related:</em></p>\n<ul>\n<li><a href=\"/vim/2015/linting-code-with-neomake-and-neovim\">Linting code with Neomake and Neovim</a></li>\n<li><a href=\"/vim/2015/lint-as-you-type-with-neovim-and-neomake/\">Lint as you type with Neovim and Neomake</a></li>\n</ul>\n\n<hr>\n\n<p><a href=\"/vim/2015/linting-code-with-neomake-and-neovim\">Ten days ago, I wrote</a> about how I set up the <a href=\"https://github.com/benekastah/neomake\">Neomake</a> plugin for Neovim and how I linted my JavaScript code using the <a href=\"http://jscs.info/\">JSCS linter</a>.</p>\n<p>While that worked alright for me, I kept running into weird bugs where JSCS would tell me there was a problem with my code, but the error message would simply display as “undefined”. I didn’t have the time to figure out what exactly was wrong, so I ended up switching to ESLint instead and it’s been smooth sailing ever since. I’ll explain how to set it up in this post.</p>","more":"<p>My setup does exactly what it should do now, so I thought I’d take a few moments and share how I’ve set it up and how you can do the same. It might be a little bit of extra work to get it all going, but you’ll be glad you did because having a convenient way to lint your code is extremely useful for everyone. Particularly so for people who work in big teams, but even if it’s just you working on a hobby project.</p>\n<h3 id=\"Step-1-Install-prerequisites\"><a href=\"#Step-1-Install-prerequisites\" class=\"headerlink\" title=\"Step 1: Install prerequisites\"></a>Step 1: Install prerequisites</h3><p>You need <a href=\"https://github.com/neovim/neovim/wiki/Installing-Neovim\">Neovim</a>, <a href=\"https://github.com/neovim/neovim/wiki/Installing-Neovim\">Neomake</a> and <a href=\"https://github.com/eslint/eslint\">ESLint</a>.</p>\n<h3 id=\"Step-2-Set-up-Neomake\"><a href=\"#Step-2-Set-up-Neomake\" class=\"headerlink\" title=\"Step 2: Set up Neomake\"></a>Step 2: Set up Neomake</h3><p>Your project-specific configuration is all in the <code>.eslintrc</code> file. That means you don’t have to run it with special command-line parameters and ESLint will work out of the box just by setting it up like this:</p>\n<figure class=\"highlight vim\"><figcaption><span>init.vim</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">g:neomake_javascript_enabled_makers</span> = [<span class=\"string\">'eslint'</span>]</div></pre></td></tr></table></figure>\n<p>However, you may want to run ESLint on your code with certain command-line options anyway. In that case, continue reading and/or check out <a href=\"vim/2015/linting-code-with-neomake-and-neovim\">my other article on Neomake</a> for more configuration tips. You’ll also find some help there with troubleshooting Neomake in case something does go wrong. In most cases, the default will probably suffice though.</p>\n<h3 id=\"Step-3-Initialize-ESLint\"><a href=\"#Step-3-Initialize-ESLint\" class=\"headerlink\" title=\"Step 3: Initialize ESLint\"></a>Step 3: Initialize ESLint</h3><p>You have a few options here, but all of them involve making an <code>.eslintrc</code> file. You can get it made for you and use the recommended ESLint defaults after making a few style decisions interactively:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">eslint --init</div></pre></td></tr></table></figure>\n<p>Or you can use one of the ESLint configuration files that are usually supplied by the popular style guides. <a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\">Here’s an example</a>.</p>\n<p>Or you can mix and match and/or build your own ESLint config. For what it’s worth, this is what I’m currently using. It’s mostly the AirBnB style guide, but I turned off a few rules that were simply too annoying for me and I also required <code>use strict</code>:</p>\n<figure class=\"highlight json\"><figcaption><span>.eslintrc</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"extends\"</span>: <span class=\"string\">\"airbnb/legacy\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"rules\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"strict\"</span>: [<span class=\"number\">2</span>, <span class=\"string\">\"global\"</span>],</div><div class=\"line\">        <span class=\"attr\">\"no-multi-spaces\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">\"no-use-before-define\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">\"no-console\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">\"padded-blocks\"</span>: <span class=\"number\">0</span>,</div><div class=\"line\">        <span class=\"attr\">\"no-else-return\"</span>: <span class=\"number\">0</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"env\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"node\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Two more things you probably want to add to your <code>.eslintrc</code> are <a href=\"http://eslint.org/docs/user-guide/configuring.html#specifying-environments\">the environment</a> and perhaps a few globals you need in your project. For the latter:</p>\n<figure class=\"highlight\"><figcaption><span>.eslintrc</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    // ...</div><div class=\"line\">    \"globals\": &#123;</div><div class=\"line\">        \"global1\": true,    // you're allowed to overwrite this one in your code</div><div class=\"line\">        \"GLOBAL2\": false    // ESLint will complain if you try to overwrite this constant</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Step-4-Set-up-some-vim-keybinds\"><a href=\"#Step-4-Set-up-some-vim-keybinds\" class=\"headerlink\" title=\"Step 4: Set up some vim keybinds\"></a>Step 4: Set up some vim keybinds</h3><p>You don’t strictly have to do this, but you’ll make things much easier for yourself if you set up convenient keybinds for your in-vim linter. I go into a bit more detail about why you’ll want this in <a href=\"vim/2015/linting-code-with-neomake-and-neovim\">my other Neomake post</a>, but here’s how I’ve set mine up:</p>\n<figure class=\"highlight\"><figcaption><span>init.vim</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">\" neomake</div><div class=\"line\">nmap &lt;Leader&gt;&lt;Space&gt;o :lopen&lt;CR&gt;      \" open location window</div><div class=\"line\">nmap &lt;Leader&gt;&lt;Space&gt;c :lclose&lt;CR&gt;     \" close location window</div><div class=\"line\">nmap &lt;Leader&gt;&lt;Space&gt;, :ll&lt;CR&gt;         \" go to current error/warning</div><div class=\"line\">nmap &lt;Leader&gt;&lt;Space&gt;n :lnext&lt;CR&gt;      \" next error/warning</div><div class=\"line\">nmap &lt;Leader&gt;&lt;Space&gt;p :lprev&lt;CR&gt;      \" previous error/warning</div></pre></td></tr></table></figure>\n<p>In my case, I have <leader> set to comma (comma-as-leader masterrace reporting in).</leader></p>\n<p>So, for example, to go to the current error, I just type <code>, ,</code> (<code>&lt;comma&gt;&lt;space&gt;&lt;comma&gt;</code>) and so on. Quite convenient.</p>\n<p>Now if only there was another plugin to automatically debug my code…</p>"},{"title":"Linting code with Neomake and Neovim","date":"2015-11-03T17:09:05.000Z","_content":"\n*Related:*\n* [Linting code with Neovim and Neomake, ESLint edition](/vim/2015/linting-code-with-neovim-and-neomake-eslint-edition/)\n* [Lint as you type with Neovim and Neomake](/vim/2015/lint-as-you-type-with-neovim-and-neomake/)\n\n{% raw %}\n<hr />\n{% endraw %}\n\n\nI've been using Neovim for a while now and absolutely love it. One of the major advantages it has over regular vim is its asynchronous job processing functionality.\n\nWhile not a lot of plugins leverage async job-control yet, the few that do offer significant performance increases compared to synchronous alternatives. One such plugin is [Neomake](https://github.com/benekastah/neomake), which is heavily inspired by the wildly popular [Syntastic](https://github.com/scrooloose/syntastic). By the way, Neomake also works in regular vim, but then it won't be async.\n\n{% asset_img neomake_example.png Example of Neomake linting JavaScript code with JSCS %}\n\nSetting it up isn't hard, but I have to admit I spent an hour or two to sort of get it right. The reason is that I was so used to Syntastic's setup that I didn't realize what exactly was happening behind the scenes. So I had to do some reading and experimenting to figure out how to use it right. Information about this is scarce on the web right now, so if you're in a similar jam or just want to know more about Neomake and what it can do for you, read on.\n\n<!-- more -->\n\n## Syntastic and Neomake\nYou can use both Syntastic and Neomake for all kinds of purposes, but the main thing they're used for is to lint your files while you edit them. The linting output gets sent to vim's locations or quickfix window and notifications are placed in the gutter at the relevant lines. You can then jump from one error/warning to the other and fix the issues.\n\nSo why use Neomake over Syntastic if Syntastic is so popular and beloved (5,685 stars on Github a the time of writing)? Well, because Neomake uses asychronous job processing, the linting commands are fired off in the background, resulting in the elimination of those annoying wait-times in between saves you will experience with Syntastic in traditional vim.\n\n## How to set it up\nRight now I'm just using Neomake to lint my JavaScript code with [JSCS](http://jscs.info/), so that's what I'll use here. Other linters for all language are pretty much identical to set up and use though.\n\nFirst, you'll need to install JSCS globally:\n\n{% codeblock lang:bash line_number:false %}\n  npm install -g jscs\n{% endcodeblock %}\n\n(Optional), generate a `.jscsrc` for your project:\n\n{% codeblock lang:bash line_number:false %}\n  cd myProject\n  jscs --auto-configure ./\n{% endcodeblock %}\n\nNext, install Neomake, using whatever plugin manager you prefer (I like [vim-plug](https://github.com/junegunn/vim-plug)). Neomake should already be able to lint a JS file you've got open in the current buffer if you run `:Neomake`.\n\nHowever, here's what to add to your vim config file so Neomake runs automatically whenever you enter or save a buffer containing a JavaScript file (delete the BufEnter if you only want it to run upon writing a file, which is recommended):\n\n{% codeblock lang:vimscript line_number:false init.vim/.nvimrc %}\nautocmd! BufWritePost,BufEnter * Neomake\n{% endcodeblock %}\n\nNeomake *should* work now (if it doesn't, do some debugging by setting `let g:neomake_verbose=3` and/or `let g:neomake_logfile='/tmp/error.log'` and inspecting the output). Warning and error symbols should appear in your gutter if errors are found. But where's the error window?\n\nWell, you have to call it yourself. If you set it up like explained above, you'll get them in the locations window, which you can call with `:lopen` and close with `:lclose`. You can also go to a specific error by calling `:ll #` with # being the error number. But an easier solution would likely be to add this to your vim config:\n\n{% codeblock line_number:false init.vim/.nvimrc %}\nlet g:neomake_open_list = 2\n{% endcodeblock %}\n\nThis will open the window automatically when Neomake is run, but without moving your cursor. Now you can run `:ll #` to move to errors or just `:ll` to go to the first one. When you've fixed all errors and save, the window will close automatically. Neat :-)\n\nWe're not done yet though. What if you want to pass extra arguments to your linter program? For example, I like to write my JS using Babel, JSX and ES6, so I want to use the `--esnext` flag. I might also want to change my default preset (which will be used if there is no `.jscsrc` present in the root folder of the project).\n\nThe answer to those issues is to redefine the maker. Here's how I set mine up. Note how the `args` array contains all the arguments in order. The name of the file to be linted will be added automatically at the end, but if you want to put it somewhere else, use `%:p`. The reporter you should use and the errorformat string will depend on the output of your linter but you don't have to look it up yourself, just look it up [here](https://github.com/benekastah/neomake/tree/master/autoload/neomake/makers/ft). Anyway, here's my setup for my jscs linter:\n\n{% codeblock line_number:false init.vim/.nvimrc %}\nlet g:neomake_javascript_jscs_maker = {\n    \\ 'exe': 'jscs',\n    \\ 'args': ['--no-color', '--preset', 'airbnb', '--reporter', 'inline', '--esnext'],\n    \\ 'errorformat': '%f: line %l\\, col %c\\, %m',\n    \\ }\n\nlet g:neomake_javascript_enabled_makers = ['jscs']\n{% endcodeblock %}\n\nLastly, the signs inserted into your gutter by Neomake may or may not look nice depending on what font you've got installed. Unfortunately, it didn't look all that great on mine, so I changed the symbols to a simple `W` for warnings and `E` for errors:\n\n{% codeblock line_number:false init.vim/.nvimrc %}\nlet g:neomake_warning_sign = {\n  \\ 'text': 'W',\n  \\ 'texthl': 'WarningMsg',\n  \\ }\n\nlet g:neomake_error_sign = {\n  \\ 'text': 'E',\n  \\ 'texthl': 'ErrorMsg',\n  \\ }\n{% endcodeblock %}\n\n(note: now you can style the vim highlighting using the values in `texthl`)\n\nAnd that's it. It's a little bit more work to set up maybe, but thanks to Neomake's async job-control, you'll never have to wait for Syntastic to finish linting your code ever again. Enjoy.\n","source":"_posts/linting-code-with-neomake-and-neovim.md","raw":"title: Linting code with Neomake and Neovim\ncategories: vim\ntags:\n  - vim\n  - linting\n  - neovim\n  - style\n  - js\ndate: 2015-11-03 17:09:05\n---\n\n*Related:*\n* [Linting code with Neovim and Neomake, ESLint edition](/vim/2015/linting-code-with-neovim-and-neomake-eslint-edition/)\n* [Lint as you type with Neovim and Neomake](/vim/2015/lint-as-you-type-with-neovim-and-neomake/)\n\n{% raw %}\n<hr />\n{% endraw %}\n\n\nI've been using Neovim for a while now and absolutely love it. One of the major advantages it has over regular vim is its asynchronous job processing functionality.\n\nWhile not a lot of plugins leverage async job-control yet, the few that do offer significant performance increases compared to synchronous alternatives. One such plugin is [Neomake](https://github.com/benekastah/neomake), which is heavily inspired by the wildly popular [Syntastic](https://github.com/scrooloose/syntastic). By the way, Neomake also works in regular vim, but then it won't be async.\n\n{% asset_img neomake_example.png Example of Neomake linting JavaScript code with JSCS %}\n\nSetting it up isn't hard, but I have to admit I spent an hour or two to sort of get it right. The reason is that I was so used to Syntastic's setup that I didn't realize what exactly was happening behind the scenes. So I had to do some reading and experimenting to figure out how to use it right. Information about this is scarce on the web right now, so if you're in a similar jam or just want to know more about Neomake and what it can do for you, read on.\n\n<!-- more -->\n\n## Syntastic and Neomake\nYou can use both Syntastic and Neomake for all kinds of purposes, but the main thing they're used for is to lint your files while you edit them. The linting output gets sent to vim's locations or quickfix window and notifications are placed in the gutter at the relevant lines. You can then jump from one error/warning to the other and fix the issues.\n\nSo why use Neomake over Syntastic if Syntastic is so popular and beloved (5,685 stars on Github a the time of writing)? Well, because Neomake uses asychronous job processing, the linting commands are fired off in the background, resulting in the elimination of those annoying wait-times in between saves you will experience with Syntastic in traditional vim.\n\n## How to set it up\nRight now I'm just using Neomake to lint my JavaScript code with [JSCS](http://jscs.info/), so that's what I'll use here. Other linters for all language are pretty much identical to set up and use though.\n\nFirst, you'll need to install JSCS globally:\n\n{% codeblock lang:bash line_number:false %}\n  npm install -g jscs\n{% endcodeblock %}\n\n(Optional), generate a `.jscsrc` for your project:\n\n{% codeblock lang:bash line_number:false %}\n  cd myProject\n  jscs --auto-configure ./\n{% endcodeblock %}\n\nNext, install Neomake, using whatever plugin manager you prefer (I like [vim-plug](https://github.com/junegunn/vim-plug)). Neomake should already be able to lint a JS file you've got open in the current buffer if you run `:Neomake`.\n\nHowever, here's what to add to your vim config file so Neomake runs automatically whenever you enter or save a buffer containing a JavaScript file (delete the BufEnter if you only want it to run upon writing a file, which is recommended):\n\n{% codeblock lang:vimscript line_number:false init.vim/.nvimrc %}\nautocmd! BufWritePost,BufEnter * Neomake\n{% endcodeblock %}\n\nNeomake *should* work now (if it doesn't, do some debugging by setting `let g:neomake_verbose=3` and/or `let g:neomake_logfile='/tmp/error.log'` and inspecting the output). Warning and error symbols should appear in your gutter if errors are found. But where's the error window?\n\nWell, you have to call it yourself. If you set it up like explained above, you'll get them in the locations window, which you can call with `:lopen` and close with `:lclose`. You can also go to a specific error by calling `:ll #` with # being the error number. But an easier solution would likely be to add this to your vim config:\n\n{% codeblock line_number:false init.vim/.nvimrc %}\nlet g:neomake_open_list = 2\n{% endcodeblock %}\n\nThis will open the window automatically when Neomake is run, but without moving your cursor. Now you can run `:ll #` to move to errors or just `:ll` to go to the first one. When you've fixed all errors and save, the window will close automatically. Neat :-)\n\nWe're not done yet though. What if you want to pass extra arguments to your linter program? For example, I like to write my JS using Babel, JSX and ES6, so I want to use the `--esnext` flag. I might also want to change my default preset (which will be used if there is no `.jscsrc` present in the root folder of the project).\n\nThe answer to those issues is to redefine the maker. Here's how I set mine up. Note how the `args` array contains all the arguments in order. The name of the file to be linted will be added automatically at the end, but if you want to put it somewhere else, use `%:p`. The reporter you should use and the errorformat string will depend on the output of your linter but you don't have to look it up yourself, just look it up [here](https://github.com/benekastah/neomake/tree/master/autoload/neomake/makers/ft). Anyway, here's my setup for my jscs linter:\n\n{% codeblock line_number:false init.vim/.nvimrc %}\nlet g:neomake_javascript_jscs_maker = {\n    \\ 'exe': 'jscs',\n    \\ 'args': ['--no-color', '--preset', 'airbnb', '--reporter', 'inline', '--esnext'],\n    \\ 'errorformat': '%f: line %l\\, col %c\\, %m',\n    \\ }\n\nlet g:neomake_javascript_enabled_makers = ['jscs']\n{% endcodeblock %}\n\nLastly, the signs inserted into your gutter by Neomake may or may not look nice depending on what font you've got installed. Unfortunately, it didn't look all that great on mine, so I changed the symbols to a simple `W` for warnings and `E` for errors:\n\n{% codeblock line_number:false init.vim/.nvimrc %}\nlet g:neomake_warning_sign = {\n  \\ 'text': 'W',\n  \\ 'texthl': 'WarningMsg',\n  \\ }\n\nlet g:neomake_error_sign = {\n  \\ 'text': 'E',\n  \\ 'texthl': 'ErrorMsg',\n  \\ }\n{% endcodeblock %}\n\n(note: now you can style the vim highlighting using the values in `texthl`)\n\nAnd that's it. It's a little bit more work to set up maybe, but thanks to Neomake's async job-control, you'll never have to wait for Syntastic to finish linting your code ever again. Enjoy.\n","slug":"linting-code-with-neomake-and-neovim","published":1,"updated":"2016-04-02T20:32:16.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk42002hknz9bdleq372","content":"<p><em>Related:</em></p>\n<ul>\n<li><a href=\"/vim/2015/linting-code-with-neovim-and-neomake-eslint-edition/\">Linting code with Neovim and Neomake, ESLint edition</a></li>\n<li><a href=\"/vim/2015/lint-as-you-type-with-neovim-and-neomake/\">Lint as you type with Neovim and Neomake</a></li>\n</ul>\n\n<hr>\n\n<p>I’ve been using Neovim for a while now and absolutely love it. One of the major advantages it has over regular vim is its asynchronous job processing functionality.</p>\n<p>While not a lot of plugins leverage async job-control yet, the few that do offer significant performance increases compared to synchronous alternatives. One such plugin is <a href=\"https://github.com/benekastah/neomake\" target=\"_blank\" rel=\"external\">Neomake</a>, which is heavily inspired by the wildly popular <a href=\"https://github.com/scrooloose/syntastic\" target=\"_blank\" rel=\"external\">Syntastic</a>. By the way, Neomake also works in regular vim, but then it won’t be async.</p>\n<img src=\"/vim/2015/linting-code-with-neomake-and-neovim/neomake_example.png\" alt=\"Example of Neomake linting JavaScript code with JSCS\" title=\"Example of Neomake linting JavaScript code with JSCS\">\n<p>Setting it up isn’t hard, but I have to admit I spent an hour or two to sort of get it right. The reason is that I was so used to Syntastic’s setup that I didn’t realize what exactly was happening behind the scenes. So I had to do some reading and experimenting to figure out how to use it right. Information about this is scarce on the web right now, so if you’re in a similar jam or just want to know more about Neomake and what it can do for you, read on.</p>\n<a id=\"more\"></a>\n<h2 id=\"Syntastic-and-Neomake\"><a href=\"#Syntastic-and-Neomake\" class=\"headerlink\" title=\"Syntastic and Neomake\"></a>Syntastic and Neomake</h2><p>You can use both Syntastic and Neomake for all kinds of purposes, but the main thing they’re used for is to lint your files while you edit them. The linting output gets sent to vim’s locations or quickfix window and notifications are placed in the gutter at the relevant lines. You can then jump from one error/warning to the other and fix the issues.</p>\n<p>So why use Neomake over Syntastic if Syntastic is so popular and beloved (5,685 stars on Github a the time of writing)? Well, because Neomake uses asychronous job processing, the linting commands are fired off in the background, resulting in the elimination of those annoying wait-times in between saves you will experience with Syntastic in traditional vim.</p>\n<h2 id=\"How-to-set-it-up\"><a href=\"#How-to-set-it-up\" class=\"headerlink\" title=\"How to set it up\"></a>How to set it up</h2><p>Right now I’m just using Neomake to lint my JavaScript code with <a href=\"http://jscs.info/\" target=\"_blank\" rel=\"external\">JSCS</a>, so that’s what I’ll use here. Other linters for all language are pretty much identical to set up and use though.</p>\n<p>First, you’ll need to install JSCS globally:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g jscs</div></pre></td></tr></table></figure>\n<p>(Optional), generate a <code>.jscsrc</code> for your project:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> myProject</div><div class=\"line\">jscs --auto-configure ./</div></pre></td></tr></table></figure>\n<p>Next, install Neomake, using whatever plugin manager you prefer (I like <a href=\"https://github.com/junegunn/vim-plug\" target=\"_blank\" rel=\"external\">vim-plug</a>). Neomake should already be able to lint a JS file you’ve got open in the current buffer if you run <code>:Neomake</code>.</p>\n<p>However, here’s what to add to your vim config file so Neomake runs automatically whenever you enter or save a buffer containing a JavaScript file (delete the BufEnter if you only want it to run upon writing a file, which is recommended):</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">autocmd! BufWritePost,BufEnter * Neomake</div></pre></td></tr></table></figure>\n<p>Neomake <em>should</em> work now (if it doesn’t, do some debugging by setting <code>let g:neomake_verbose=3</code> and/or <code>let g:neomake_logfile=&#39;/tmp/error.log&#39;</code> and inspecting the output). Warning and error symbols should appear in your gutter if errors are found. But where’s the error window?</p>\n<p>Well, you have to call it yourself. If you set it up like explained above, you’ll get them in the locations window, which you can call with <code>:lopen</code> and close with <code>:lclose</code>. You can also go to a specific error by calling <code>:ll #</code> with # being the error number. But an easier solution would likely be to add this to your vim config:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">let g:neomake_open_list = 2</div></pre></td></tr></table></figure>\n<p>This will open the window automatically when Neomake is run, but without moving your cursor. Now you can run <code>:ll #</code> to move to errors or just <code>:ll</code> to go to the first one. When you’ve fixed all errors and save, the window will close automatically. Neat :-)</p>\n<p>We’re not done yet though. What if you want to pass extra arguments to your linter program? For example, I like to write my JS using Babel, JSX and ES6, so I want to use the <code>--esnext</code> flag. I might also want to change my default preset (which will be used if there is no <code>.jscsrc</code> present in the root folder of the project).</p>\n<p>The answer to those issues is to redefine the maker. Here’s how I set mine up. Note how the <code>args</code> array contains all the arguments in order. The name of the file to be linted will be added automatically at the end, but if you want to put it somewhere else, use <code>%:p</code>. The reporter you should use and the errorformat string will depend on the output of your linter but you don’t have to look it up yourself, just look it up <a href=\"https://github.com/benekastah/neomake/tree/master/autoload/neomake/makers/ft\" target=\"_blank\" rel=\"external\">here</a>. Anyway, here’s my setup for my jscs linter:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">let g:neomake_javascript_jscs_maker = &#123;</div><div class=\"line\">    \\ &apos;exe&apos;: &apos;jscs&apos;,</div><div class=\"line\">    \\ &apos;args&apos;: [&apos;--no-color&apos;, &apos;--preset&apos;, &apos;airbnb&apos;, &apos;--reporter&apos;, &apos;inline&apos;, &apos;--esnext&apos;],</div><div class=\"line\">    \\ &apos;errorformat&apos;: &apos;%f: line %l\\, col %c\\, %m&apos;,</div><div class=\"line\">    \\ &#125;</div><div class=\"line\"></div><div class=\"line\">let g:neomake_javascript_enabled_makers = [&apos;jscs&apos;]</div></pre></td></tr></table></figure>\n<p>Lastly, the signs inserted into your gutter by Neomake may or may not look nice depending on what font you’ve got installed. Unfortunately, it didn’t look all that great on mine, so I changed the symbols to a simple <code>W</code> for warnings and <code>E</code> for errors:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">let g:neomake_warning_sign = &#123;</div><div class=\"line\">  \\ &apos;text&apos;: &apos;W&apos;,</div><div class=\"line\">  \\ &apos;texthl&apos;: &apos;WarningMsg&apos;,</div><div class=\"line\">  \\ &#125;</div><div class=\"line\"></div><div class=\"line\">let g:neomake_error_sign = &#123;</div><div class=\"line\">  \\ &apos;text&apos;: &apos;E&apos;,</div><div class=\"line\">  \\ &apos;texthl&apos;: &apos;ErrorMsg&apos;,</div><div class=\"line\">  \\ &#125;</div></pre></td></tr></table></figure>\n<p>(note: now you can style the vim highlighting using the values in <code>texthl</code>)</p>\n<p>And that’s it. It’s a little bit more work to set up maybe, but thanks to Neomake’s async job-control, you’ll never have to wait for Syntastic to finish linting your code ever again. Enjoy.</p>","excerpt":"<p><em>Related:</em></p>\n<ul>\n<li><a href=\"/vim/2015/linting-code-with-neovim-and-neomake-eslint-edition/\">Linting code with Neovim and Neomake, ESLint edition</a></li>\n<li><a href=\"/vim/2015/lint-as-you-type-with-neovim-and-neomake/\">Lint as you type with Neovim and Neomake</a></li>\n</ul>\n\n<hr>\n\n<p>I’ve been using Neovim for a while now and absolutely love it. One of the major advantages it has over regular vim is its asynchronous job processing functionality.</p>\n<p>While not a lot of plugins leverage async job-control yet, the few that do offer significant performance increases compared to synchronous alternatives. One such plugin is <a href=\"https://github.com/benekastah/neomake\">Neomake</a>, which is heavily inspired by the wildly popular <a href=\"https://github.com/scrooloose/syntastic\">Syntastic</a>. By the way, Neomake also works in regular vim, but then it won’t be async.</p>\n<img src=\"/vim/2015/linting-code-with-neomake-and-neovim/neomake_example.png\" alt=\"Example of Neomake linting JavaScript code with JSCS\" title=\"Example of Neomake linting JavaScript code with JSCS\">\n<p>Setting it up isn’t hard, but I have to admit I spent an hour or two to sort of get it right. The reason is that I was so used to Syntastic’s setup that I didn’t realize what exactly was happening behind the scenes. So I had to do some reading and experimenting to figure out how to use it right. Information about this is scarce on the web right now, so if you’re in a similar jam or just want to know more about Neomake and what it can do for you, read on.</p>","more":"<h2 id=\"Syntastic-and-Neomake\"><a href=\"#Syntastic-and-Neomake\" class=\"headerlink\" title=\"Syntastic and Neomake\"></a>Syntastic and Neomake</h2><p>You can use both Syntastic and Neomake for all kinds of purposes, but the main thing they’re used for is to lint your files while you edit them. The linting output gets sent to vim’s locations or quickfix window and notifications are placed in the gutter at the relevant lines. You can then jump from one error/warning to the other and fix the issues.</p>\n<p>So why use Neomake over Syntastic if Syntastic is so popular and beloved (5,685 stars on Github a the time of writing)? Well, because Neomake uses asychronous job processing, the linting commands are fired off in the background, resulting in the elimination of those annoying wait-times in between saves you will experience with Syntastic in traditional vim.</p>\n<h2 id=\"How-to-set-it-up\"><a href=\"#How-to-set-it-up\" class=\"headerlink\" title=\"How to set it up\"></a>How to set it up</h2><p>Right now I’m just using Neomake to lint my JavaScript code with <a href=\"http://jscs.info/\">JSCS</a>, so that’s what I’ll use here. Other linters for all language are pretty much identical to set up and use though.</p>\n<p>First, you’ll need to install JSCS globally:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">npm install -g jscs</div></pre></td></tr></table></figure>\n<p>(Optional), generate a <code>.jscsrc</code> for your project:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> myProject</div><div class=\"line\">jscs --auto-configure ./</div></pre></td></tr></table></figure>\n<p>Next, install Neomake, using whatever plugin manager you prefer (I like <a href=\"https://github.com/junegunn/vim-plug\">vim-plug</a>). Neomake should already be able to lint a JS file you’ve got open in the current buffer if you run <code>:Neomake</code>.</p>\n<p>However, here’s what to add to your vim config file so Neomake runs automatically whenever you enter or save a buffer containing a JavaScript file (delete the BufEnter if you only want it to run upon writing a file, which is recommended):</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">autocmd! BufWritePost,BufEnter * Neomake</div></pre></td></tr></table></figure>\n<p>Neomake <em>should</em> work now (if it doesn’t, do some debugging by setting <code>let g:neomake_verbose=3</code> and/or <code>let g:neomake_logfile=&#39;/tmp/error.log&#39;</code> and inspecting the output). Warning and error symbols should appear in your gutter if errors are found. But where’s the error window?</p>\n<p>Well, you have to call it yourself. If you set it up like explained above, you’ll get them in the locations window, which you can call with <code>:lopen</code> and close with <code>:lclose</code>. You can also go to a specific error by calling <code>:ll #</code> with # being the error number. But an easier solution would likely be to add this to your vim config:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">let g:neomake_open_list = 2</div></pre></td></tr></table></figure>\n<p>This will open the window automatically when Neomake is run, but without moving your cursor. Now you can run <code>:ll #</code> to move to errors or just <code>:ll</code> to go to the first one. When you’ve fixed all errors and save, the window will close automatically. Neat :-)</p>\n<p>We’re not done yet though. What if you want to pass extra arguments to your linter program? For example, I like to write my JS using Babel, JSX and ES6, so I want to use the <code>--esnext</code> flag. I might also want to change my default preset (which will be used if there is no <code>.jscsrc</code> present in the root folder of the project).</p>\n<p>The answer to those issues is to redefine the maker. Here’s how I set mine up. Note how the <code>args</code> array contains all the arguments in order. The name of the file to be linted will be added automatically at the end, but if you want to put it somewhere else, use <code>%:p</code>. The reporter you should use and the errorformat string will depend on the output of your linter but you don’t have to look it up yourself, just look it up <a href=\"https://github.com/benekastah/neomake/tree/master/autoload/neomake/makers/ft\">here</a>. Anyway, here’s my setup for my jscs linter:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">let g:neomake_javascript_jscs_maker = &#123;</div><div class=\"line\">    \\ &apos;exe&apos;: &apos;jscs&apos;,</div><div class=\"line\">    \\ &apos;args&apos;: [&apos;--no-color&apos;, &apos;--preset&apos;, &apos;airbnb&apos;, &apos;--reporter&apos;, &apos;inline&apos;, &apos;--esnext&apos;],</div><div class=\"line\">    \\ &apos;errorformat&apos;: &apos;%f: line %l\\, col %c\\, %m&apos;,</div><div class=\"line\">    \\ &#125;</div><div class=\"line\"></div><div class=\"line\">let g:neomake_javascript_enabled_makers = [&apos;jscs&apos;]</div></pre></td></tr></table></figure>\n<p>Lastly, the signs inserted into your gutter by Neomake may or may not look nice depending on what font you’ve got installed. Unfortunately, it didn’t look all that great on mine, so I changed the symbols to a simple <code>W</code> for warnings and <code>E</code> for errors:</p>\n<figure class=\"highlight plain\"><figcaption><span>init.vim/.nvimrc</span></figcaption><table><tr><td class=\"code\"><pre><div class=\"line\">let g:neomake_warning_sign = &#123;</div><div class=\"line\">  \\ &apos;text&apos;: &apos;W&apos;,</div><div class=\"line\">  \\ &apos;texthl&apos;: &apos;WarningMsg&apos;,</div><div class=\"line\">  \\ &#125;</div><div class=\"line\"></div><div class=\"line\">let g:neomake_error_sign = &#123;</div><div class=\"line\">  \\ &apos;text&apos;: &apos;E&apos;,</div><div class=\"line\">  \\ &apos;texthl&apos;: &apos;ErrorMsg&apos;,</div><div class=\"line\">  \\ &#125;</div></pre></td></tr></table></figure>\n<p>(note: now you can style the vim highlighting using the values in <code>texthl</code>)</p>\n<p>And that’s it. It’s a little bit more work to set up maybe, but thanks to Neomake’s async job-control, you’ll never have to wait for Syntastic to finish linting your code ever again. Enjoy.</p>"},{"title":"No more ~/.nvimrc - Neovim folder now at ~/.config/nvim","date":"2015-11-08T20:39:28.000Z","_content":"\nJust in case you missed [the announcement](https://github.com/neovim/neovim/wiki/Following-HEAD#20151026), Neovim now supports [XDG configuration](http://www.gregjs.com/linux/2015/fixing-the-reappearing-folders-problem-in-your-home-directory/) and has moved to a new configuration folder.\n\nThat means that your old `~/.nvimrc` and `~/.nvim` paths won't work anymore by default. It's possible this came as a shock to you when you updated and realized none of your configuration or plugins work anymore.\n\nThe fix is very easy though.\n\n{% codeblock lang:bash line_number:false %}\nmv ~/.nvim ~/.config/nvim\nmv ~/.nvimrc ~/.config/nvim/init.vim\n{% endcodeblock %}\n\nOr alternatively, create some softlinks.\n","source":"_posts/no-more-nvimrc-neovim-folder-now-at-config-nvim.md","raw":"title: No more ~/.nvimrc - Neovim folder now at ~/.config/nvim\ncategories: vim\ntags:\n  - neovim\ndate: 2015-11-08 20:39:28\n---\n\nJust in case you missed [the announcement](https://github.com/neovim/neovim/wiki/Following-HEAD#20151026), Neovim now supports [XDG configuration](http://www.gregjs.com/linux/2015/fixing-the-reappearing-folders-problem-in-your-home-directory/) and has moved to a new configuration folder.\n\nThat means that your old `~/.nvimrc` and `~/.nvim` paths won't work anymore by default. It's possible this came as a shock to you when you updated and realized none of your configuration or plugins work anymore.\n\nThe fix is very easy though.\n\n{% codeblock lang:bash line_number:false %}\nmv ~/.nvim ~/.config/nvim\nmv ~/.nvimrc ~/.config/nvim/init.vim\n{% endcodeblock %}\n\nOr alternatively, create some softlinks.\n","slug":"no-more-nvimrc-neovim-folder-now-at-config-nvim","published":1,"updated":"2015-11-21T14:07:16.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk45002jknz9jg4zsghx","content":"<p>Just in case you missed <a href=\"https://github.com/neovim/neovim/wiki/Following-HEAD#20151026\" target=\"_blank\" rel=\"external\">the announcement</a>, Neovim now supports <a href=\"http://www.gregjs.com/linux/2015/fixing-the-reappearing-folders-problem-in-your-home-directory/\">XDG configuration</a> and has moved to a new configuration folder.</p>\n<p>That means that your old <code>~/.nvimrc</code> and <code>~/.nvim</code> paths won’t work anymore by default. It’s possible this came as a shock to you when you updated and realized none of your configuration or plugins work anymore.</p>\n<p>The fix is very easy though.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">mv ~/.nvim ~/.config/nvim</div><div class=\"line\">mv ~/.nvimrc ~/.config/nvim/init.vim</div></pre></td></tr></table></figure>\n<p>Or alternatively, create some softlinks.</p>","excerpt":"","more":"<p>Just in case you missed <a href=\"https://github.com/neovim/neovim/wiki/Following-HEAD#20151026\">the announcement</a>, Neovim now supports <a href=\"http://www.gregjs.com/linux/2015/fixing-the-reappearing-folders-problem-in-your-home-directory/\">XDG configuration</a> and has moved to a new configuration folder.</p>\n<p>That means that your old <code>~/.nvimrc</code> and <code>~/.nvim</code> paths won’t work anymore by default. It’s possible this came as a shock to you when you updated and realized none of your configuration or plugins work anymore.</p>\n<p>The fix is very easy though.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">mv ~/.nvim ~/.config/nvim</div><div class=\"line\">mv ~/.nvimrc ~/.config/nvim/init.vim</div></pre></td></tr></table></figure>\n<p>Or alternatively, create some softlinks.</p>"},{"title":"New version of Pacman released: Updating yaourt and package-query","date":"2016-02-01T15:53:39.000Z","_content":"\nPacman 5.0.0 [has been released](https://projects.archlinux.org/pacman.git/tree/NEWS?h=v5.0.0), and for those of us who use it along with [yaourt](https://aur.archlinux.org/packages/yaourt/), that means a `pacman -Syu` willl temporarily be unable to satisfy its dependencies. The reason is that your system's version of `package-query` will prevent you from updating to the latest `pacman`.\n\nMost among you will probably find it easy to upgrade, but if you're feeling fuzzy or made a little error on the way (causing you to fail to load the shared library `libalpm.so.9`..), here's how to do it asap:\n\n{% codeblock lang:bash %}\n# remove problematic packages:\nsudo pacman -Rdd package-query yaourt\n# make sure to update pacman here:\nsudo pacman -Syu\n# get the latest PKGBUILD for package-query and yaourt:\ngit clone https://aur.archlinux.org/package-query.git\ngit clone https://aur.archlinux.org/yaourt.git\n# compile and install\ncd package-query && makepkg -sri && cd ..\ncd yaourt && makepkg -sri\n{% endcodeblock %}\n","source":"_posts/new-version-of-pacman-released-updating-yaourt-and-package-query.md","raw":"title: 'New version of Pacman released: Updating yaourt and package-query'\ndate: 2016-02-01 15:53:39\ncategories: linux\ntags:\n- pacman\n- arch linux\n---\n\nPacman 5.0.0 [has been released](https://projects.archlinux.org/pacman.git/tree/NEWS?h=v5.0.0), and for those of us who use it along with [yaourt](https://aur.archlinux.org/packages/yaourt/), that means a `pacman -Syu` willl temporarily be unable to satisfy its dependencies. The reason is that your system's version of `package-query` will prevent you from updating to the latest `pacman`.\n\nMost among you will probably find it easy to upgrade, but if you're feeling fuzzy or made a little error on the way (causing you to fail to load the shared library `libalpm.so.9`..), here's how to do it asap:\n\n{% codeblock lang:bash %}\n# remove problematic packages:\nsudo pacman -Rdd package-query yaourt\n# make sure to update pacman here:\nsudo pacman -Syu\n# get the latest PKGBUILD for package-query and yaourt:\ngit clone https://aur.archlinux.org/package-query.git\ngit clone https://aur.archlinux.org/yaourt.git\n# compile and install\ncd package-query && makepkg -sri && cd ..\ncd yaourt && makepkg -sri\n{% endcodeblock %}\n","slug":"new-version-of-pacman-released-updating-yaourt-and-package-query","published":1,"updated":"2016-02-01T16:07:28.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk47002lknz9zetlwd86","content":"<p>Pacman 5.0.0 <a href=\"https://projects.archlinux.org/pacman.git/tree/NEWS?h=v5.0.0\" target=\"_blank\" rel=\"external\">has been released</a>, and for those of us who use it along with <a href=\"https://aur.archlinux.org/packages/yaourt/\" target=\"_blank\" rel=\"external\">yaourt</a>, that means a <code>pacman -Syu</code> willl temporarily be unable to satisfy its dependencies. The reason is that your system’s version of <code>package-query</code> will prevent you from updating to the latest <code>pacman</code>.</p>\n<p>Most among you will probably find it easy to upgrade, but if you’re feeling fuzzy or made a little error on the way (causing you to fail to load the shared library <code>libalpm.so.9</code>..), here’s how to do it asap:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># remove problematic packages:</span></div><div class=\"line\">sudo pacman -Rdd package-query yaourt</div><div class=\"line\"><span class=\"comment\"># make sure to update pacman here:</span></div><div class=\"line\">sudo pacman -Syu</div><div class=\"line\"><span class=\"comment\"># get the latest PKGBUILD for package-query and yaourt:</span></div><div class=\"line\">git <span class=\"built_in\">clone</span> https://aur.archlinux.org/package-query.git</div><div class=\"line\">git <span class=\"built_in\">clone</span> https://aur.archlinux.org/yaourt.git</div><div class=\"line\"><span class=\"comment\"># compile and install</span></div><div class=\"line\"><span class=\"built_in\">cd</span> package-query &amp;&amp; makepkg -sri &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">cd</span> yaourt &amp;&amp; makepkg -sri</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>Pacman 5.0.0 <a href=\"https://projects.archlinux.org/pacman.git/tree/NEWS?h=v5.0.0\">has been released</a>, and for those of us who use it along with <a href=\"https://aur.archlinux.org/packages/yaourt/\">yaourt</a>, that means a <code>pacman -Syu</code> willl temporarily be unable to satisfy its dependencies. The reason is that your system’s version of <code>package-query</code> will prevent you from updating to the latest <code>pacman</code>.</p>\n<p>Most among you will probably find it easy to upgrade, but if you’re feeling fuzzy or made a little error on the way (causing you to fail to load the shared library <code>libalpm.so.9</code>..), here’s how to do it asap:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># remove problematic packages:</span></div><div class=\"line\">sudo pacman -Rdd package-query yaourt</div><div class=\"line\"><span class=\"comment\"># make sure to update pacman here:</span></div><div class=\"line\">sudo pacman -Syu</div><div class=\"line\"><span class=\"comment\"># get the latest PKGBUILD for package-query and yaourt:</span></div><div class=\"line\">git <span class=\"built_in\">clone</span> https://aur.archlinux.org/package-query.git</div><div class=\"line\">git <span class=\"built_in\">clone</span> https://aur.archlinux.org/yaourt.git</div><div class=\"line\"><span class=\"comment\"># compile and install</span></div><div class=\"line\"><span class=\"built_in\">cd</span> package-query &amp;&amp; makepkg -sri &amp;&amp; <span class=\"built_in\">cd</span> ..</div><div class=\"line\"><span class=\"built_in\">cd</span> yaourt &amp;&amp; makepkg -sri</div></pre></td></tr></table></figure>"},{"title":"New Year's resolutions and predictions","date":"2016-01-04T17:31:38.000Z","_content":"\nWoo, it's been about two weeks since my last post! Not good, not good.. All I can say is, I enjoyed my time off, but I'm back and feeling great!\n\nSo the holidays have come and gone and 2016 is upon us. Time for some New Year's resolutions and a few educated (?) guesses as to what this year may have in store for web development, JavaScript, Linux and me in particular.\n\n<!-- more -->\n\n## My resolutions\n\nIt's never a good idea to make too many grandiose resolutions lest none of them come to pass. Better is to keep them realistic and achievable. Still, aiming a little high can't hurt, can it? Here are some things I want to achieve in 2016:\n\n- Get a job in software engineering/web development (I guess this is the big one).\n- Get very comfortable with ES6/ES2015 and start looking at the next version.\n- Learn some [Go](https://golang.org).\n- Take and pass another algorithms course.\n- Learn the ins and outs of SVG.\n- Write a simple vim plugin to fix something that's been bugging me.\n- Write a simple Reddit bot just for fun.\n- Run a 5k under 30 minutes (yes I'm a slowpoke).\n\n## Predictions for web development in 2016\n\nWhy post predictions? Well, why not? I'll feel like a right Nostradamus if some of these come true. And if they don't, I'll just conveniently forget all about ever having made the predictions in the first place. Here are my educated guesses with regards to web development and JavaScript in 2016:\n\n- The number of new front-end frameworks will continue to skyrocket. None will become a de facto standard in a JQuery kind of way. An unholy amount of to-do applications will be built using all these frameworks but none will ever be used by humans.\n- Everyone will go absolutely crazy about Angular 2 when it's officially released. React and Angular will remain the big two for a while but Vue, Aurelia and Ampersand will surge in popularity as well.\n- Static sites will make a comeback in this single-page-application heavy world for performance and caching reasons.\n- WordPress will slowly begin to move away from its old PHP codebase and embrace NodeJS.\n- Web app performance and UX will continue to increase but native applications will remain the top choice for mobile users.\n- Kyle Simpson's [OLOO](https://gist.github.com/getify/5572383) pattern will become more popular than ES6-classes.\n- In spite of many hyperbolic blog articles and hostile opinion pieces, PHP, Ruby, Python and Node.JS will all continue to be widely used in production and Go will become a viable choice as well.\n- SVG will finally make a huge breakthrough in the mainstream web development world.\n- Wars will continue to be fought over which editor people should use, even though the answer is obviously (neo)vim.\n\n## Predictions for Linux in 2016\n\n- Users who upgrade to Ubuntu 16.04 will rejoice when they finally get the option (in Unity) to move the sidebar to the bottom and the window control buttons to the right.\n- The Ubuntu phone will be quietly shelved.\n- Gamers and critics will write hateful diatribes full of Windows-centric complaints, but SteamOS will become a serious gaming platform. Along with the release of Vulkan, this will make Windows less of a necessity for gamers and bring *the year of the Linux desktop* a little closer. Maybe?\n- Microsoft will do something shocking to the open source world and lose all the goodwill it's been earning in the past few years.\n- Wayland will become a usable Xorg replacement. Rumors of the window manager/desktop environment landscape being about to undergo serious changes will circulate widely, but for now only bearded Linux gurus will actually use it.\n- Certain people will continue to loudly complain about systemd not being compatible with the Unix philosophy but the overwhelming majority of users won't care.\n- ChromeOS will gain a ton of market share in the desktop pc market as the OS matures and android apps become available on it.\n- A new contender will emerge in the desktop pc market in the form of an even-cheaper-than-a-chromebook/box plug-and-play extensible Linux-box built around a Raspberry Pi-like single-board computer.\n\nSo, yeah, I guess that's it. Of course this is just for fun, but whether any of these come true or not, have an amazing 2016 everyone! I know I will!\n","source":"_posts/new-year-s-resolutions-and-predictions.md","raw":"title: \"New Year's resolutions and predictions\"\ndate: 2016-01-04 17:31:38\ncategories: life\ntags:\n- meta\n- opinion\n---\n\nWoo, it's been about two weeks since my last post! Not good, not good.. All I can say is, I enjoyed my time off, but I'm back and feeling great!\n\nSo the holidays have come and gone and 2016 is upon us. Time for some New Year's resolutions and a few educated (?) guesses as to what this year may have in store for web development, JavaScript, Linux and me in particular.\n\n<!-- more -->\n\n## My resolutions\n\nIt's never a good idea to make too many grandiose resolutions lest none of them come to pass. Better is to keep them realistic and achievable. Still, aiming a little high can't hurt, can it? Here are some things I want to achieve in 2016:\n\n- Get a job in software engineering/web development (I guess this is the big one).\n- Get very comfortable with ES6/ES2015 and start looking at the next version.\n- Learn some [Go](https://golang.org).\n- Take and pass another algorithms course.\n- Learn the ins and outs of SVG.\n- Write a simple vim plugin to fix something that's been bugging me.\n- Write a simple Reddit bot just for fun.\n- Run a 5k under 30 minutes (yes I'm a slowpoke).\n\n## Predictions for web development in 2016\n\nWhy post predictions? Well, why not? I'll feel like a right Nostradamus if some of these come true. And if they don't, I'll just conveniently forget all about ever having made the predictions in the first place. Here are my educated guesses with regards to web development and JavaScript in 2016:\n\n- The number of new front-end frameworks will continue to skyrocket. None will become a de facto standard in a JQuery kind of way. An unholy amount of to-do applications will be built using all these frameworks but none will ever be used by humans.\n- Everyone will go absolutely crazy about Angular 2 when it's officially released. React and Angular will remain the big two for a while but Vue, Aurelia and Ampersand will surge in popularity as well.\n- Static sites will make a comeback in this single-page-application heavy world for performance and caching reasons.\n- WordPress will slowly begin to move away from its old PHP codebase and embrace NodeJS.\n- Web app performance and UX will continue to increase but native applications will remain the top choice for mobile users.\n- Kyle Simpson's [OLOO](https://gist.github.com/getify/5572383) pattern will become more popular than ES6-classes.\n- In spite of many hyperbolic blog articles and hostile opinion pieces, PHP, Ruby, Python and Node.JS will all continue to be widely used in production and Go will become a viable choice as well.\n- SVG will finally make a huge breakthrough in the mainstream web development world.\n- Wars will continue to be fought over which editor people should use, even though the answer is obviously (neo)vim.\n\n## Predictions for Linux in 2016\n\n- Users who upgrade to Ubuntu 16.04 will rejoice when they finally get the option (in Unity) to move the sidebar to the bottom and the window control buttons to the right.\n- The Ubuntu phone will be quietly shelved.\n- Gamers and critics will write hateful diatribes full of Windows-centric complaints, but SteamOS will become a serious gaming platform. Along with the release of Vulkan, this will make Windows less of a necessity for gamers and bring *the year of the Linux desktop* a little closer. Maybe?\n- Microsoft will do something shocking to the open source world and lose all the goodwill it's been earning in the past few years.\n- Wayland will become a usable Xorg replacement. Rumors of the window manager/desktop environment landscape being about to undergo serious changes will circulate widely, but for now only bearded Linux gurus will actually use it.\n- Certain people will continue to loudly complain about systemd not being compatible with the Unix philosophy but the overwhelming majority of users won't care.\n- ChromeOS will gain a ton of market share in the desktop pc market as the OS matures and android apps become available on it.\n- A new contender will emerge in the desktop pc market in the form of an even-cheaper-than-a-chromebook/box plug-and-play extensible Linux-box built around a Raspberry Pi-like single-board computer.\n\nSo, yeah, I guess that's it. Of course this is just for fun, but whether any of these come true or not, have an amazing 2016 everyone! I know I will!\n","slug":"new-year-s-resolutions-and-predictions","published":1,"updated":"2016-01-06T01:26:22.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk49002pknz91e7w2no1","content":"<p>Woo, it’s been about two weeks since my last post! Not good, not good.. All I can say is, I enjoyed my time off, but I’m back and feeling great!</p>\n<p>So the holidays have come and gone and 2016 is upon us. Time for some New Year’s resolutions and a few educated (?) guesses as to what this year may have in store for web development, JavaScript, Linux and me in particular.</p>\n<a id=\"more\"></a>\n<h2 id=\"My-resolutions\"><a href=\"#My-resolutions\" class=\"headerlink\" title=\"My resolutions\"></a>My resolutions</h2><p>It’s never a good idea to make too many grandiose resolutions lest none of them come to pass. Better is to keep them realistic and achievable. Still, aiming a little high can’t hurt, can it? Here are some things I want to achieve in 2016:</p>\n<ul>\n<li>Get a job in software engineering/web development (I guess this is the big one).</li>\n<li>Get very comfortable with ES6/ES2015 and start looking at the next version.</li>\n<li>Learn some <a href=\"https://golang.org\" target=\"_blank\" rel=\"external\">Go</a>.</li>\n<li>Take and pass another algorithms course.</li>\n<li>Learn the ins and outs of SVG.</li>\n<li>Write a simple vim plugin to fix something that’s been bugging me.</li>\n<li>Write a simple Reddit bot just for fun.</li>\n<li>Run a 5k under 30 minutes (yes I’m a slowpoke).</li>\n</ul>\n<h2 id=\"Predictions-for-web-development-in-2016\"><a href=\"#Predictions-for-web-development-in-2016\" class=\"headerlink\" title=\"Predictions for web development in 2016\"></a>Predictions for web development in 2016</h2><p>Why post predictions? Well, why not? I’ll feel like a right Nostradamus if some of these come true. And if they don’t, I’ll just conveniently forget all about ever having made the predictions in the first place. Here are my educated guesses with regards to web development and JavaScript in 2016:</p>\n<ul>\n<li>The number of new front-end frameworks will continue to skyrocket. None will become a de facto standard in a JQuery kind of way. An unholy amount of to-do applications will be built using all these frameworks but none will ever be used by humans.</li>\n<li>Everyone will go absolutely crazy about Angular 2 when it’s officially released. React and Angular will remain the big two for a while but Vue, Aurelia and Ampersand will surge in popularity as well.</li>\n<li>Static sites will make a comeback in this single-page-application heavy world for performance and caching reasons.</li>\n<li>WordPress will slowly begin to move away from its old PHP codebase and embrace NodeJS.</li>\n<li>Web app performance and UX will continue to increase but native applications will remain the top choice for mobile users.</li>\n<li>Kyle Simpson’s <a href=\"https://gist.github.com/getify/5572383\" target=\"_blank\" rel=\"external\">OLOO</a> pattern will become more popular than ES6-classes.</li>\n<li>In spite of many hyperbolic blog articles and hostile opinion pieces, PHP, Ruby, Python and Node.JS will all continue to be widely used in production and Go will become a viable choice as well.</li>\n<li>SVG will finally make a huge breakthrough in the mainstream web development world.</li>\n<li>Wars will continue to be fought over which editor people should use, even though the answer is obviously (neo)vim.</li>\n</ul>\n<h2 id=\"Predictions-for-Linux-in-2016\"><a href=\"#Predictions-for-Linux-in-2016\" class=\"headerlink\" title=\"Predictions for Linux in 2016\"></a>Predictions for Linux in 2016</h2><ul>\n<li>Users who upgrade to Ubuntu 16.04 will rejoice when they finally get the option (in Unity) to move the sidebar to the bottom and the window control buttons to the right.</li>\n<li>The Ubuntu phone will be quietly shelved.</li>\n<li>Gamers and critics will write hateful diatribes full of Windows-centric complaints, but SteamOS will become a serious gaming platform. Along with the release of Vulkan, this will make Windows less of a necessity for gamers and bring <em>the year of the Linux desktop</em> a little closer. Maybe?</li>\n<li>Microsoft will do something shocking to the open source world and lose all the goodwill it’s been earning in the past few years.</li>\n<li>Wayland will become a usable Xorg replacement. Rumors of the window manager/desktop environment landscape being about to undergo serious changes will circulate widely, but for now only bearded Linux gurus will actually use it.</li>\n<li>Certain people will continue to loudly complain about systemd not being compatible with the Unix philosophy but the overwhelming majority of users won’t care.</li>\n<li>ChromeOS will gain a ton of market share in the desktop pc market as the OS matures and android apps become available on it.</li>\n<li>A new contender will emerge in the desktop pc market in the form of an even-cheaper-than-a-chromebook/box plug-and-play extensible Linux-box built around a Raspberry Pi-like single-board computer.</li>\n</ul>\n<p>So, yeah, I guess that’s it. Of course this is just for fun, but whether any of these come true or not, have an amazing 2016 everyone! I know I will!</p>","excerpt":"<p>Woo, it’s been about two weeks since my last post! Not good, not good.. All I can say is, I enjoyed my time off, but I’m back and feeling great!</p>\n<p>So the holidays have come and gone and 2016 is upon us. Time for some New Year’s resolutions and a few educated (?) guesses as to what this year may have in store for web development, JavaScript, Linux and me in particular.</p>","more":"<h2 id=\"My-resolutions\"><a href=\"#My-resolutions\" class=\"headerlink\" title=\"My resolutions\"></a>My resolutions</h2><p>It’s never a good idea to make too many grandiose resolutions lest none of them come to pass. Better is to keep them realistic and achievable. Still, aiming a little high can’t hurt, can it? Here are some things I want to achieve in 2016:</p>\n<ul>\n<li>Get a job in software engineering/web development (I guess this is the big one).</li>\n<li>Get very comfortable with ES6/ES2015 and start looking at the next version.</li>\n<li>Learn some <a href=\"https://golang.org\">Go</a>.</li>\n<li>Take and pass another algorithms course.</li>\n<li>Learn the ins and outs of SVG.</li>\n<li>Write a simple vim plugin to fix something that’s been bugging me.</li>\n<li>Write a simple Reddit bot just for fun.</li>\n<li>Run a 5k under 30 minutes (yes I’m a slowpoke).</li>\n</ul>\n<h2 id=\"Predictions-for-web-development-in-2016\"><a href=\"#Predictions-for-web-development-in-2016\" class=\"headerlink\" title=\"Predictions for web development in 2016\"></a>Predictions for web development in 2016</h2><p>Why post predictions? Well, why not? I’ll feel like a right Nostradamus if some of these come true. And if they don’t, I’ll just conveniently forget all about ever having made the predictions in the first place. Here are my educated guesses with regards to web development and JavaScript in 2016:</p>\n<ul>\n<li>The number of new front-end frameworks will continue to skyrocket. None will become a de facto standard in a JQuery kind of way. An unholy amount of to-do applications will be built using all these frameworks but none will ever be used by humans.</li>\n<li>Everyone will go absolutely crazy about Angular 2 when it’s officially released. React and Angular will remain the big two for a while but Vue, Aurelia and Ampersand will surge in popularity as well.</li>\n<li>Static sites will make a comeback in this single-page-application heavy world for performance and caching reasons.</li>\n<li>WordPress will slowly begin to move away from its old PHP codebase and embrace NodeJS.</li>\n<li>Web app performance and UX will continue to increase but native applications will remain the top choice for mobile users.</li>\n<li>Kyle Simpson’s <a href=\"https://gist.github.com/getify/5572383\">OLOO</a> pattern will become more popular than ES6-classes.</li>\n<li>In spite of many hyperbolic blog articles and hostile opinion pieces, PHP, Ruby, Python and Node.JS will all continue to be widely used in production and Go will become a viable choice as well.</li>\n<li>SVG will finally make a huge breakthrough in the mainstream web development world.</li>\n<li>Wars will continue to be fought over which editor people should use, even though the answer is obviously (neo)vim.</li>\n</ul>\n<h2 id=\"Predictions-for-Linux-in-2016\"><a href=\"#Predictions-for-Linux-in-2016\" class=\"headerlink\" title=\"Predictions for Linux in 2016\"></a>Predictions for Linux in 2016</h2><ul>\n<li>Users who upgrade to Ubuntu 16.04 will rejoice when they finally get the option (in Unity) to move the sidebar to the bottom and the window control buttons to the right.</li>\n<li>The Ubuntu phone will be quietly shelved.</li>\n<li>Gamers and critics will write hateful diatribes full of Windows-centric complaints, but SteamOS will become a serious gaming platform. Along with the release of Vulkan, this will make Windows less of a necessity for gamers and bring <em>the year of the Linux desktop</em> a little closer. Maybe?</li>\n<li>Microsoft will do something shocking to the open source world and lose all the goodwill it’s been earning in the past few years.</li>\n<li>Wayland will become a usable Xorg replacement. Rumors of the window manager/desktop environment landscape being about to undergo serious changes will circulate widely, but for now only bearded Linux gurus will actually use it.</li>\n<li>Certain people will continue to loudly complain about systemd not being compatible with the Unix philosophy but the overwhelming majority of users won’t care.</li>\n<li>ChromeOS will gain a ton of market share in the desktop pc market as the OS matures and android apps become available on it.</li>\n<li>A new contender will emerge in the desktop pc market in the form of an even-cheaper-than-a-chromebook/box plug-and-play extensible Linux-box built around a Raspberry Pi-like single-board computer.</li>\n</ul>\n<p>So, yeah, I guess that’s it. Of course this is just for fun, but whether any of these come true or not, have an amazing 2016 everyone! I know I will!</p>"},{"title":"Normal ternaries vs nested ternaries","date":"2015-10-29T01:15:16.000Z","_content":"\nThis pretty much sums up my opinion about ternaries:\n\n``` javascript\nvar Ternary = function(isNested) {\n  return {\n    is: function() {\n      return (isNested) ? 'the devil' : 'awesome';\n    }\n  };\n};\n\n// something like `size = (a < 10) ? 'small' : 'large'`\nvar aNormalTernary = new Ternary(false);\n\n// think `size = (a < 10) ? (a < 5) ? (a < 0) ? 'negative'\n//               : 'tiny' : 'small' : 'large'`\nvar aNestedTernary = new Ternary(true);\n\naNormalTernary.is(); // awesome\naNestedTernary.is(); // the devil\n```\n","source":"_posts/normal-ternaries-vs-nested-ternaries.md","raw":"title: Normal ternaries vs nested ternaries\ncategories: javascript\ntags:\n  - js\n  - style\ndate: 2015-10-29 01:15:16\n---\n\nThis pretty much sums up my opinion about ternaries:\n\n``` javascript\nvar Ternary = function(isNested) {\n  return {\n    is: function() {\n      return (isNested) ? 'the devil' : 'awesome';\n    }\n  };\n};\n\n// something like `size = (a < 10) ? 'small' : 'large'`\nvar aNormalTernary = new Ternary(false);\n\n// think `size = (a < 10) ? (a < 5) ? (a < 0) ? 'negative'\n//               : 'tiny' : 'small' : 'large'`\nvar aNestedTernary = new Ternary(true);\n\naNormalTernary.is(); // awesome\naNestedTernary.is(); // the devil\n```\n","slug":"normal-ternaries-vs-nested-ternaries","published":1,"updated":"2015-11-21T14:07:16.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk4a002sknz9ishrkps1","content":"<p>This pretty much sums up my opinion about ternaries:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Ternary = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isNested</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    is: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> (isNested) ? <span class=\"string\">'the devil'</span> : <span class=\"string\">'awesome'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// something like `size = (a &lt; 10) ? 'small' : 'large'`</span></div><div class=\"line\"><span class=\"keyword\">var</span> aNormalTernary = <span class=\"keyword\">new</span> Ternary(<span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// think `size = (a &lt; 10) ? (a &lt; 5) ? (a &lt; 0) ? 'negative'</span></div><div class=\"line\"><span class=\"comment\">//               : 'tiny' : 'small' : 'large'`</span></div><div class=\"line\"><span class=\"keyword\">var</span> aNestedTernary = <span class=\"keyword\">new</span> Ternary(<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\">aNormalTernary.is(); <span class=\"comment\">// awesome</span></div><div class=\"line\">aNestedTernary.is(); <span class=\"comment\">// the devil</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<p>This pretty much sums up my opinion about ternaries:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Ternary = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isNested</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    is: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> (isNested) ? <span class=\"string\">'the devil'</span> : <span class=\"string\">'awesome'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// something like `size = (a &lt; 10) ? 'small' : 'large'`</span></div><div class=\"line\"><span class=\"keyword\">var</span> aNormalTernary = <span class=\"keyword\">new</span> Ternary(<span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// think `size = (a &lt; 10) ? (a &lt; 5) ? (a &lt; 0) ? 'negative'</span></div><div class=\"line\"><span class=\"comment\">//               : 'tiny' : 'small' : 'large'`</span></div><div class=\"line\"><span class=\"keyword\">var</span> aNestedTernary = <span class=\"keyword\">new</span> Ternary(<span class=\"literal\">true</span>);</div><div class=\"line\"></div><div class=\"line\">aNormalTernary.is(); <span class=\"comment\">// awesome</span></div><div class=\"line\">aNestedTernary.is(); <span class=\"comment\">// the devil</span></div></pre></td></tr></table></figure>"},{"title":"offline-arch-wiki and arch-wiki-md-repo online","date":"2015-12-14T14:34:59.000Z","_content":"\nThere were some serious delays as I struggled with some issues (particularly ones relating to automating `git push`es, to not getting kicked off from the server for launching thousands of requests at the same time and, _ehm_, to going on an unexpected trip with my girlfriend to celebrate my birthday!) but I finally have part of my arch wiki project working roughly the way I want it to.\n\nFirst, I built a [little tool](https://github.com/greg-js/offline-arch-wiki) to scrape _every_ article in the official Arch Wiki, convert it to markdown, save it to the filesystem and store it in a json object. Later on, I'll come back to it to clean up the code, add more info to the database and maybe to fix all the interlinking going on in the articles. I might also allow it to take any similarly structured wiki instead of just the Arch one, but we'll see, this already took a lot longer than expected..\n\nSadly, I think I made some mistakes in how I structured the requests. I originally thought that performance would be better if I collected all the article urls first, then fetched all their html, then converted them all and then saved them all. Now I'm thinking I would have been much better off if I'd just did all that asynchronously to every url instead of waiting for the whole promise arrays to resolve before moving to the next step in the pipeline. I might go back and do it over to check how that would impact performance. Realistically though, I probably won't, since it _works, you know_?\n\nNext, I used the above tool to set up [an automatically updating repository on github](https://github.com/greg-js/arch-wiki-md-repo) containing all Arch wiki articles in markdown format. It should always be pretty current as it updates itself with the most recent changes every six hours.\n\nAnyway, I could move on to building a command line arch wiki browser now, but I have some other work to take care of first. When I get back, I'll go for the CLI arch wiki browser, or I may start working on something else I've had in mind, or maybe I'll even finally build out my landing page for this website! But we'll see, I really just wanted to post a quick update on my recent github activity and jot down some thoughts about how it went and what I'll do next. See you next time.\n","source":"_posts/offline-arch-wiki-and-arch-wiki-md-repo-online.md","raw":"title: offline-arch-wiki and arch-wiki-md-repo online\ncategories: javascript\ntags:\n  - linux\n  - arch linux\n  - js\n  - open source\ndate: 2015-12-14 14:34:59\n---\n\nThere were some serious delays as I struggled with some issues (particularly ones relating to automating `git push`es, to not getting kicked off from the server for launching thousands of requests at the same time and, _ehm_, to going on an unexpected trip with my girlfriend to celebrate my birthday!) but I finally have part of my arch wiki project working roughly the way I want it to.\n\nFirst, I built a [little tool](https://github.com/greg-js/offline-arch-wiki) to scrape _every_ article in the official Arch Wiki, convert it to markdown, save it to the filesystem and store it in a json object. Later on, I'll come back to it to clean up the code, add more info to the database and maybe to fix all the interlinking going on in the articles. I might also allow it to take any similarly structured wiki instead of just the Arch one, but we'll see, this already took a lot longer than expected..\n\nSadly, I think I made some mistakes in how I structured the requests. I originally thought that performance would be better if I collected all the article urls first, then fetched all their html, then converted them all and then saved them all. Now I'm thinking I would have been much better off if I'd just did all that asynchronously to every url instead of waiting for the whole promise arrays to resolve before moving to the next step in the pipeline. I might go back and do it over to check how that would impact performance. Realistically though, I probably won't, since it _works, you know_?\n\nNext, I used the above tool to set up [an automatically updating repository on github](https://github.com/greg-js/arch-wiki-md-repo) containing all Arch wiki articles in markdown format. It should always be pretty current as it updates itself with the most recent changes every six hours.\n\nAnyway, I could move on to building a command line arch wiki browser now, but I have some other work to take care of first. When I get back, I'll go for the CLI arch wiki browser, or I may start working on something else I've had in mind, or maybe I'll even finally build out my landing page for this website! But we'll see, I really just wanted to post a quick update on my recent github activity and jot down some thoughts about how it went and what I'll do next. See you next time.\n","slug":"offline-arch-wiki-and-arch-wiki-md-repo-online","published":1,"updated":"2015-12-18T18:14:06.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk4c002wknz9wwk7mddn","content":"<p>There were some serious delays as I struggled with some issues (particularly ones relating to automating <code>git push</code>es, to not getting kicked off from the server for launching thousands of requests at the same time and, <em>ehm</em>, to going on an unexpected trip with my girlfriend to celebrate my birthday!) but I finally have part of my arch wiki project working roughly the way I want it to.</p>\n<p>First, I built a <a href=\"https://github.com/greg-js/offline-arch-wiki\" target=\"_blank\" rel=\"external\">little tool</a> to scrape <em>every</em> article in the official Arch Wiki, convert it to markdown, save it to the filesystem and store it in a json object. Later on, I’ll come back to it to clean up the code, add more info to the database and maybe to fix all the interlinking going on in the articles. I might also allow it to take any similarly structured wiki instead of just the Arch one, but we’ll see, this already took a lot longer than expected..</p>\n<p>Sadly, I think I made some mistakes in how I structured the requests. I originally thought that performance would be better if I collected all the article urls first, then fetched all their html, then converted them all and then saved them all. Now I’m thinking I would have been much better off if I’d just did all that asynchronously to every url instead of waiting for the whole promise arrays to resolve before moving to the next step in the pipeline. I might go back and do it over to check how that would impact performance. Realistically though, I probably won’t, since it <em>works, you know</em>?</p>\n<p>Next, I used the above tool to set up <a href=\"https://github.com/greg-js/arch-wiki-md-repo\" target=\"_blank\" rel=\"external\">an automatically updating repository on github</a> containing all Arch wiki articles in markdown format. It should always be pretty current as it updates itself with the most recent changes every six hours.</p>\n<p>Anyway, I could move on to building a command line arch wiki browser now, but I have some other work to take care of first. When I get back, I’ll go for the CLI arch wiki browser, or I may start working on something else I’ve had in mind, or maybe I’ll even finally build out my landing page for this website! But we’ll see, I really just wanted to post a quick update on my recent github activity and jot down some thoughts about how it went and what I’ll do next. See you next time.</p>","excerpt":"","more":"<p>There were some serious delays as I struggled with some issues (particularly ones relating to automating <code>git push</code>es, to not getting kicked off from the server for launching thousands of requests at the same time and, <em>ehm</em>, to going on an unexpected trip with my girlfriend to celebrate my birthday!) but I finally have part of my arch wiki project working roughly the way I want it to.</p>\n<p>First, I built a <a href=\"https://github.com/greg-js/offline-arch-wiki\">little tool</a> to scrape <em>every</em> article in the official Arch Wiki, convert it to markdown, save it to the filesystem and store it in a json object. Later on, I’ll come back to it to clean up the code, add more info to the database and maybe to fix all the interlinking going on in the articles. I might also allow it to take any similarly structured wiki instead of just the Arch one, but we’ll see, this already took a lot longer than expected..</p>\n<p>Sadly, I think I made some mistakes in how I structured the requests. I originally thought that performance would be better if I collected all the article urls first, then fetched all their html, then converted them all and then saved them all. Now I’m thinking I would have been much better off if I’d just did all that asynchronously to every url instead of waiting for the whole promise arrays to resolve before moving to the next step in the pipeline. I might go back and do it over to check how that would impact performance. Realistically though, I probably won’t, since it <em>works, you know</em>?</p>\n<p>Next, I used the above tool to set up <a href=\"https://github.com/greg-js/arch-wiki-md-repo\">an automatically updating repository on github</a> containing all Arch wiki articles in markdown format. It should always be pretty current as it updates itself with the most recent changes every six hours.</p>\n<p>Anyway, I could move on to building a command line arch wiki browser now, but I have some other work to take care of first. When I get back, I’ll go for the CLI arch wiki browser, or I may start working on something else I’ve had in mind, or maybe I’ll even finally build out my landing page for this website! But we’ll see, I really just wanted to post a quick update on my recent github activity and jot down some thoughts about how it went and what I’ll do next. See you next time.</p>"},{"title":"Playing videos with mpv and a wrapper for immediately disowning a process","date":"2016-06-02T17:14:48.000Z","_content":"\nOof, two months without updates! This is starting to look like a typical developer blog! Well, I won't bore you with the reasons behind my temporary absence and get right to the content: I'll be explaining below how to write a wrapper for a program (in this case, mpv) that automatically detaches itself from the terminal window from which you run it. Enjoy!\n\nYears ago, I discovered VLC and started using it for all my video watching, as it is in my opinion by far the best option on Windows. When I switched to Linux full-time though, I found out there is another piece of open source software that does the same thing, and by golly, it does it even better: {% link mpv https://mpv.io mpv website %}\n\n{% asset_img mpv.website.jpg mpv website %}\n\nIf you've read this blog before, you probably know I love the command line, and that's exactly why I ended up using mpv for all my videos. VLC is still great, mind you, but configuring it can be time-consuming with its many dialog windows - trust me, a long time ago, someone actually paid me to write tips for a VLC blog..\n\nIn contrast to the typical Windows-centric approach VLC uses, mpv's configuration options are at the same time mind-bogglingly elaborate and as simple as running a command from the terminal and/or editing the config file with your favorite editor (vim).\n\nMaybe I'll share some of my other mpv settings later, but right now I'd like to focus on this little tip for playing videos from the terminal in mpv. You might find it very useful if you live in the terminal like I do, and particularly if you use a tiling window manager like {% link i3 https://i3wm.org i3 website %} or {% link awesome https://awesome.naquadah.org awesome %}.\n\nYou might also use the same simple wrapper for running other scripts/programs in the background and immediately disown them.\n\n<!-- more -->\n\nThe problem the wrapper solves is that of mpv spawning a child process when run from the command line. It then displays a lot of information in the current terminal window while the video plays (see the screenshot below). This can be very useful in some cases, but sometimes you just want to play one or a number of videos in a new window, and be free to close the spawning terminal window without also closing the video.\n\n{% asset_img mpv.jpg mpv command line information %}\n\nSo here's what I use (of course I made this an executable script and put it in a folder that was added to my `$PATH`, in my case `~/bin/`):\n\n{% codeblock lang:bash ~/bin/play %}\n#!/bin/bash\n## mpv wrapper to make it run in the background and disowned by the terminal window\n\nmpv --really-quiet \"$@\" &\ndisown\n{% endcodeblock %}\n\nSee how simple?\n\nJust to make it as clear as possible for those among you who are new-ish to bash/linux, I'll explain it in some more detail below, but if you just want to copy, paste and use it, go ahead.\n\n### `#!/bin/bash`\n\nThis is what is called a shebang, after the ha**sh** (`#`) and the **bang** (`!`) it starts with. This tells your operating system to run the following script with `/bin/bash`.\n\n### `## mpv wrapper ...`\n\nThis is just a comment to detail what the script is for. The second hash is actually unnecessary, but I like putting it there to clearly separate the comment from the shebang.\n\n### `mpv --really-quiet`\n\nThis runs mpv in (you guessed it) `really-quiet` mode. That means it won't display all that (useful) information in the terminal window.\n\n### `\"$@\"`\n\nThis is a reference to *all* the arguments you run the script with. Without this, you would only be able to use `play` with just one file. With it, you can do something like `play video1.mpg video2.mp4 video3.mkv` or `play ./vid*`.\n\nNote the double quotation marks! Without those, you'd get in trouble if your filenames contain spaces.\n\n### `&`\n\nThis simply means: run this process in the background. Since your goal is to disown the process, you must do this for the next step.\n\n### `disown`\n\nThis disowns the backgrounded process. Now the video becomes detached from the terminal window from which you ran it. You can watch the video and, if you want, close the terminal window.\n\nThere you go, you can use the same simple procedure to run your own scripts or programs as detached processes. It really does come in very handy once in a while, but personally, I use it mainly for mpv :-)\n","source":"_posts/playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process.md","raw":"title: \"Playing videos with mpv and a wrapper for immediately disowning a process\"\ncategories: linux\ntags:\n  - bash\n  - command line\ndate: 2016-06-02 18:14:48\n---\n\nOof, two months without updates! This is starting to look like a typical developer blog! Well, I won't bore you with the reasons behind my temporary absence and get right to the content: I'll be explaining below how to write a wrapper for a program (in this case, mpv) that automatically detaches itself from the terminal window from which you run it. Enjoy!\n\nYears ago, I discovered VLC and started using it for all my video watching, as it is in my opinion by far the best option on Windows. When I switched to Linux full-time though, I found out there is another piece of open source software that does the same thing, and by golly, it does it even better: {% link mpv https://mpv.io mpv website %}\n\n{% asset_img mpv.website.jpg mpv website %}\n\nIf you've read this blog before, you probably know I love the command line, and that's exactly why I ended up using mpv for all my videos. VLC is still great, mind you, but configuring it can be time-consuming with its many dialog windows - trust me, a long time ago, someone actually paid me to write tips for a VLC blog..\n\nIn contrast to the typical Windows-centric approach VLC uses, mpv's configuration options are at the same time mind-bogglingly elaborate and as simple as running a command from the terminal and/or editing the config file with your favorite editor (vim).\n\nMaybe I'll share some of my other mpv settings later, but right now I'd like to focus on this little tip for playing videos from the terminal in mpv. You might find it very useful if you live in the terminal like I do, and particularly if you use a tiling window manager like {% link i3 https://i3wm.org i3 website %} or {% link awesome https://awesome.naquadah.org awesome %}.\n\nYou might also use the same simple wrapper for running other scripts/programs in the background and immediately disown them.\n\n<!-- more -->\n\nThe problem the wrapper solves is that of mpv spawning a child process when run from the command line. It then displays a lot of information in the current terminal window while the video plays (see the screenshot below). This can be very useful in some cases, but sometimes you just want to play one or a number of videos in a new window, and be free to close the spawning terminal window without also closing the video.\n\n{% asset_img mpv.jpg mpv command line information %}\n\nSo here's what I use (of course I made this an executable script and put it in a folder that was added to my `$PATH`, in my case `~/bin/`):\n\n{% codeblock lang:bash ~/bin/play %}\n#!/bin/bash\n## mpv wrapper to make it run in the background and disowned by the terminal window\n\nmpv --really-quiet \"$@\" &\ndisown\n{% endcodeblock %}\n\nSee how simple?\n\nJust to make it as clear as possible for those among you who are new-ish to bash/linux, I'll explain it in some more detail below, but if you just want to copy, paste and use it, go ahead.\n\n### `#!/bin/bash`\n\nThis is what is called a shebang, after the ha**sh** (`#`) and the **bang** (`!`) it starts with. This tells your operating system to run the following script with `/bin/bash`.\n\n### `## mpv wrapper ...`\n\nThis is just a comment to detail what the script is for. The second hash is actually unnecessary, but I like putting it there to clearly separate the comment from the shebang.\n\n### `mpv --really-quiet`\n\nThis runs mpv in (you guessed it) `really-quiet` mode. That means it won't display all that (useful) information in the terminal window.\n\n### `\"$@\"`\n\nThis is a reference to *all* the arguments you run the script with. Without this, you would only be able to use `play` with just one file. With it, you can do something like `play video1.mpg video2.mp4 video3.mkv` or `play ./vid*`.\n\nNote the double quotation marks! Without those, you'd get in trouble if your filenames contain spaces.\n\n### `&`\n\nThis simply means: run this process in the background. Since your goal is to disown the process, you must do this for the next step.\n\n### `disown`\n\nThis disowns the backgrounded process. Now the video becomes detached from the terminal window from which you ran it. You can watch the video and, if you want, close the terminal window.\n\nThere you go, you can use the same simple procedure to run your own scripts or programs as detached processes. It really does come in very handy once in a while, but personally, I use it mainly for mpv :-)\n","slug":"playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process","published":1,"updated":"2016-06-08T15:20:22.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk4e002zknz9ppvh4me0","content":"<p>Oof, two months without updates! This is starting to look like a typical developer blog! Well, I won’t bore you with the reasons behind my temporary absence and get right to the content: I’ll be explaining below how to write a wrapper for a program (in this case, mpv) that automatically detaches itself from the terminal window from which you run it. Enjoy!</p>\n<p>Years ago, I discovered VLC and started using it for all my video watching, as it is in my opinion by far the best option on Windows. When I switched to Linux full-time though, I found out there is another piece of open source software that does the same thing, and by golly, it does it even better: <a href=\"https://mpv.io\" title=\"mpv website\" target=\"_blank\" rel=\"external\">mpv</a></p>\n<img src=\"/linux/2016/playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process/mpv.website.jpg\" alt=\"mpv website\" title=\"mpv website\">\n<p>If you’ve read this blog before, you probably know I love the command line, and that’s exactly why I ended up using mpv for all my videos. VLC is still great, mind you, but configuring it can be time-consuming with its many dialog windows - trust me, a long time ago, someone actually paid me to write tips for a VLC blog..</p>\n<p>In contrast to the typical Windows-centric approach VLC uses, mpv’s configuration options are at the same time mind-bogglingly elaborate and as simple as running a command from the terminal and/or editing the config file with your favorite editor (vim).</p>\n<p>Maybe I’ll share some of my other mpv settings later, but right now I’d like to focus on this little tip for playing videos from the terminal in mpv. You might find it very useful if you live in the terminal like I do, and particularly if you use a tiling window manager like <a href=\"https://i3wm.org\" title=\"i3 website\" target=\"_blank\" rel=\"external\">i3</a> or <a href=\"https://awesome.naquadah.org\" title=\"awesome\" target=\"_blank\" rel=\"external\">awesome</a>.</p>\n<p>You might also use the same simple wrapper for running other scripts/programs in the background and immediately disown them.</p>\n<a id=\"more\"></a>\n<p>The problem the wrapper solves is that of mpv spawning a child process when run from the command line. It then displays a lot of information in the current terminal window while the video plays (see the screenshot below). This can be very useful in some cases, but sometimes you just want to play one or a number of videos in a new window, and be free to close the spawning terminal window without also closing the video.</p>\n<img src=\"/linux/2016/playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process/mpv.jpg\" alt=\"mpv command line information\" title=\"mpv command line information\">\n<p>So here’s what I use (of course I made this an executable script and put it in a folder that was added to my <code>$PATH</code>, in my case <code>~/bin/</code>):</p>\n<figure class=\"highlight bash\"><figcaption><span>~/bin/play</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\">## mpv wrapper to make it run in the background and disowned by the terminal window</span></div><div class=\"line\"></div><div class=\"line\">mpv --really-quiet <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span> &amp;</div><div class=\"line\"><span class=\"built_in\">disown</span></div></pre></td></tr></table></figure>\n<p>See how simple?</p>\n<p>Just to make it as clear as possible for those among you who are new-ish to bash/linux, I’ll explain it in some more detail below, but if you just want to copy, paste and use it, go ahead.</p>\n<h3 id=\"bin-bash\"><a href=\"#bin-bash\" class=\"headerlink\" title=\"#!/bin/bash\"></a><code>#!/bin/bash</code></h3><p>This is what is called a shebang, after the ha<strong>sh</strong> (<code>#</code>) and the <strong>bang</strong> (<code>!</code>) it starts with. This tells your operating system to run the following script with <code>/bin/bash</code>.</p>\n<h3 id=\"mpv-wrapper\"><a href=\"#mpv-wrapper\" class=\"headerlink\" title=\"## mpv wrapper ...\"></a><code>## mpv wrapper ...</code></h3><p>This is just a comment to detail what the script is for. The second hash is actually unnecessary, but I like putting it there to clearly separate the comment from the shebang.</p>\n<h3 id=\"mpv-really-quiet\"><a href=\"#mpv-really-quiet\" class=\"headerlink\" title=\"mpv --really-quiet\"></a><code>mpv --really-quiet</code></h3><p>This runs mpv in (you guessed it) <code>really-quiet</code> mode. That means it won’t display all that (useful) information in the terminal window.</p>\n<h3 id=\"quot-quot\"><a href=\"#quot-quot\" class=\"headerlink\" title=\"&quot;$@&quot;\"></a><code>&quot;$@&quot;</code></h3><p>This is a reference to <em>all</em> the arguments you run the script with. Without this, you would only be able to use <code>play</code> with just one file. With it, you can do something like <code>play video1.mpg video2.mp4 video3.mkv</code> or <code>play ./vid*</code>.</p>\n<p>Note the double quotation marks! Without those, you’d get in trouble if your filenames contain spaces.</p>\n<h3 id=\"amp\"><a href=\"#amp\" class=\"headerlink\" title=\"&amp;\"></a><code>&amp;</code></h3><p>This simply means: run this process in the background. Since your goal is to disown the process, you must do this for the next step.</p>\n<h3 id=\"disown\"><a href=\"#disown\" class=\"headerlink\" title=\"disown\"></a><code>disown</code></h3><p>This disowns the backgrounded process. Now the video becomes detached from the terminal window from which you ran it. You can watch the video and, if you want, close the terminal window.</p>\n<p>There you go, you can use the same simple procedure to run your own scripts or programs as detached processes. It really does come in very handy once in a while, but personally, I use it mainly for mpv :-)</p>","excerpt":"<p>Oof, two months without updates! This is starting to look like a typical developer blog! Well, I won’t bore you with the reasons behind my temporary absence and get right to the content: I’ll be explaining below how to write a wrapper for a program (in this case, mpv) that automatically detaches itself from the terminal window from which you run it. Enjoy!</p>\n<p>Years ago, I discovered VLC and started using it for all my video watching, as it is in my opinion by far the best option on Windows. When I switched to Linux full-time though, I found out there is another piece of open source software that does the same thing, and by golly, it does it even better: <a href=\"https://mpv.io\" title=\"mpv website\">mpv</a></p>\n<img src=\"/linux/2016/playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process/mpv.website.jpg\" alt=\"mpv website\" title=\"mpv website\">\n<p>If you’ve read this blog before, you probably know I love the command line, and that’s exactly why I ended up using mpv for all my videos. VLC is still great, mind you, but configuring it can be time-consuming with its many dialog windows - trust me, a long time ago, someone actually paid me to write tips for a VLC blog..</p>\n<p>In contrast to the typical Windows-centric approach VLC uses, mpv’s configuration options are at the same time mind-bogglingly elaborate and as simple as running a command from the terminal and/or editing the config file with your favorite editor (vim).</p>\n<p>Maybe I’ll share some of my other mpv settings later, but right now I’d like to focus on this little tip for playing videos from the terminal in mpv. You might find it very useful if you live in the terminal like I do, and particularly if you use a tiling window manager like <a href=\"https://i3wm.org\" title=\"i3 website\">i3</a> or <a href=\"https://awesome.naquadah.org\" title=\"awesome\">awesome</a>.</p>\n<p>You might also use the same simple wrapper for running other scripts/programs in the background and immediately disown them.</p>","more":"<p>The problem the wrapper solves is that of mpv spawning a child process when run from the command line. It then displays a lot of information in the current terminal window while the video plays (see the screenshot below). This can be very useful in some cases, but sometimes you just want to play one or a number of videos in a new window, and be free to close the spawning terminal window without also closing the video.</p>\n<img src=\"/linux/2016/playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process/mpv.jpg\" alt=\"mpv command line information\" title=\"mpv command line information\">\n<p>So here’s what I use (of course I made this an executable script and put it in a folder that was added to my <code>$PATH</code>, in my case <code>~/bin/</code>):</p>\n<figure class=\"highlight bash\"><figcaption><span>~/bin/play</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\">## mpv wrapper to make it run in the background and disowned by the terminal window</span></div><div class=\"line\"></div><div class=\"line\">mpv --really-quiet <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span> &amp;</div><div class=\"line\"><span class=\"built_in\">disown</span></div></pre></td></tr></table></figure>\n<p>See how simple?</p>\n<p>Just to make it as clear as possible for those among you who are new-ish to bash/linux, I’ll explain it in some more detail below, but if you just want to copy, paste and use it, go ahead.</p>\n<h3 id=\"bin-bash\"><a href=\"#bin-bash\" class=\"headerlink\" title=\"#!/bin/bash\"></a><code>#!/bin/bash</code></h3><p>This is what is called a shebang, after the ha<strong>sh</strong> (<code>#</code>) and the <strong>bang</strong> (<code>!</code>) it starts with. This tells your operating system to run the following script with <code>/bin/bash</code>.</p>\n<h3 id=\"mpv-wrapper\"><a href=\"#mpv-wrapper\" class=\"headerlink\" title=\"## mpv wrapper ...\"></a><code>## mpv wrapper ...</code></h3><p>This is just a comment to detail what the script is for. The second hash is actually unnecessary, but I like putting it there to clearly separate the comment from the shebang.</p>\n<h3 id=\"mpv-really-quiet\"><a href=\"#mpv-really-quiet\" class=\"headerlink\" title=\"mpv --really-quiet\"></a><code>mpv --really-quiet</code></h3><p>This runs mpv in (you guessed it) <code>really-quiet</code> mode. That means it won’t display all that (useful) information in the terminal window.</p>\n<h3 id=\"quot-quot\"><a href=\"#quot-quot\" class=\"headerlink\" title=\"&quot;$@&quot;\"></a><code>&quot;$@&quot;</code></h3><p>This is a reference to <em>all</em> the arguments you run the script with. Without this, you would only be able to use <code>play</code> with just one file. With it, you can do something like <code>play video1.mpg video2.mp4 video3.mkv</code> or <code>play ./vid*</code>.</p>\n<p>Note the double quotation marks! Without those, you’d get in trouble if your filenames contain spaces.</p>\n<h3 id=\"amp\"><a href=\"#amp\" class=\"headerlink\" title=\"&amp;\"></a><code>&amp;</code></h3><p>This simply means: run this process in the background. Since your goal is to disown the process, you must do this for the next step.</p>\n<h3 id=\"disown\"><a href=\"#disown\" class=\"headerlink\" title=\"disown\"></a><code>disown</code></h3><p>This disowns the backgrounded process. Now the video becomes detached from the terminal window from which you ran it. You can watch the video and, if you want, close the terminal window.</p>\n<p>There you go, you can use the same simple procedure to run your own scripts or programs as detached processes. It really does come in very handy once in a while, but personally, I use it mainly for mpv :-)</p>"},{"title":"Quick command-line tips and tricks 2: Finding and processing files","date":"2015-11-21T16:07:47.000Z","_content":"\n\nHere are some more quick tips and tricks to improve your command-line user experience and improve your productivity. [Part one here](linux/2015/a-few-quick-command-line-tips-and-tricks/).\n\n{% asset_img commandline.png \"bash prompt\" %}\n\n<!-- more -->\n\n### locate\n\nThe fastest way to find files on your filesystem is by way of the `locate` command:\n\n{% codeblock lang:bash line_number:false %}\nlocate MYFILE\n{% endcodeblock %}\n\n`locate` is fast because it reads a periodically updated database instead of querying the file system. The downside is that newer files may not have been indexed yet and may therefore fail to appear in your search results. You can however force an update with the `updatedb` command.\n\n### find\n\n`locate` is great for locating a specific file, but it's not a very versatile tool. If you want to find files and then do things with them, you'd probably prefer to use `find` instead. Here's an example of a typical find command:\n\n{% codeblock lang:bash line_number:false %}\nfind ./ -iname \"*FILENAME_PART*\"\n{% endcodeblock %}\n\nThis will do a recursive search in your current directory (`./`), looking for a case-insensitive (`-iname`) file that has the string `filename_part` appear somewhere in the title (note the shell expanding syntax using the asterisks).\n\n### -exec\n\n`find` is an extremely useful tool and explaining all that it can do here would fill many posts. Here are just a few more examples of its versatility.\n\nTo find all log files in the current directory and copy them to a folder:\n\n{% codeblock lang:bash line_number:false %}\nfind ./ -iname \"*.log\" -exec cp '{}' ~/logs \\;\n{% endcodeblock %}\n\nFor every log file found, the `cp` command will run, with `'{}'` replaced by the path to the file.\n\nTo do a grep search within each file in the current directory, looking for a particular string:\n\n{% codeblock lang:bash line_number:false %}\nfind ./ -type f -exec grep -H \"special_string\" '{}' \\;\n{% endcodeblock %}\n\n`-type f` restricts the search results to files only and `grep -H` searches inside the files instead of just in their filenames. Obviously this command can take a while to complete if you have a lot of large files in your directory.\n\n### -print0\n\nOne thing that often tends to trip up shell magic is whitespace in filenames. The above commands should usually work fine, but if you're having issues, there's a quick way to do certain things without the risk of whitespace ruining your day. Here's an example:\n\n{% codeblock lang:bash line_number:false %}\nfind /downloads -type f -size +1G -print0 | xargs -0 ls -l\n{% endcodeblock %}\n\nFirst of all, check out the `-size +1G` option, which will filter out all files under one gigabyte. There are a lot more filters like this (see `man find` for more).\n\nNext, the `print0` option separates the different results by a zero byte NUL character and the `-0` option for `xargs` will then process inputs separated by that same character. This way whitespace in your filenames in all its forms won't disturb your output. The result of the command is that an `ls -l` will be done for every found file.\n\n### for-loop\n\nOne more way to process files is with a quick for loop:\n\n{% codeblock lang:bash line_number:false %}\nfor i in *.txt; do cp \"$i\" \"${i/.txt/.txt.bak}\"; done\n{% endcodeblock %}\n\nNote how variables are wrapped with double quotes to prevent whitespace from spoiling the party. This gets very tedious after a while, which is while the NUL character mentioned above is great for quick and easy file processing.\n\nThis command will look in the current directory (non-recursively), find all files ending in `.txt` and make a copy of it as `*.txt.bak`. Of course you could use a command substitution instead of a simple glob expansion, or you could do much more complicated things.\n\nBut I guess this is probably enough for another quick update. As I was writing this, I kept coming to the realization that there is just so much more to talk about. I want to keep these posts as easily digestible as possible though, so I'll just stop abruptly here. Stay tuned for more and I'll catch you on the flip side, you command-line ninja, you!\n","source":"_posts/quick-command-line-tips-and-tricks2-finding-and-processing-files.md","raw":"title: 'Quick command-line tips and tricks 2: Finding and processing files'\ncategories: linux\ntags:\n  - command line\n  - tips\ndate: 2015-11-21 16:07:47\n---\n\n\nHere are some more quick tips and tricks to improve your command-line user experience and improve your productivity. [Part one here](linux/2015/a-few-quick-command-line-tips-and-tricks/).\n\n{% asset_img commandline.png \"bash prompt\" %}\n\n<!-- more -->\n\n### locate\n\nThe fastest way to find files on your filesystem is by way of the `locate` command:\n\n{% codeblock lang:bash line_number:false %}\nlocate MYFILE\n{% endcodeblock %}\n\n`locate` is fast because it reads a periodically updated database instead of querying the file system. The downside is that newer files may not have been indexed yet and may therefore fail to appear in your search results. You can however force an update with the `updatedb` command.\n\n### find\n\n`locate` is great for locating a specific file, but it's not a very versatile tool. If you want to find files and then do things with them, you'd probably prefer to use `find` instead. Here's an example of a typical find command:\n\n{% codeblock lang:bash line_number:false %}\nfind ./ -iname \"*FILENAME_PART*\"\n{% endcodeblock %}\n\nThis will do a recursive search in your current directory (`./`), looking for a case-insensitive (`-iname`) file that has the string `filename_part` appear somewhere in the title (note the shell expanding syntax using the asterisks).\n\n### -exec\n\n`find` is an extremely useful tool and explaining all that it can do here would fill many posts. Here are just a few more examples of its versatility.\n\nTo find all log files in the current directory and copy them to a folder:\n\n{% codeblock lang:bash line_number:false %}\nfind ./ -iname \"*.log\" -exec cp '{}' ~/logs \\;\n{% endcodeblock %}\n\nFor every log file found, the `cp` command will run, with `'{}'` replaced by the path to the file.\n\nTo do a grep search within each file in the current directory, looking for a particular string:\n\n{% codeblock lang:bash line_number:false %}\nfind ./ -type f -exec grep -H \"special_string\" '{}' \\;\n{% endcodeblock %}\n\n`-type f` restricts the search results to files only and `grep -H` searches inside the files instead of just in their filenames. Obviously this command can take a while to complete if you have a lot of large files in your directory.\n\n### -print0\n\nOne thing that often tends to trip up shell magic is whitespace in filenames. The above commands should usually work fine, but if you're having issues, there's a quick way to do certain things without the risk of whitespace ruining your day. Here's an example:\n\n{% codeblock lang:bash line_number:false %}\nfind /downloads -type f -size +1G -print0 | xargs -0 ls -l\n{% endcodeblock %}\n\nFirst of all, check out the `-size +1G` option, which will filter out all files under one gigabyte. There are a lot more filters like this (see `man find` for more).\n\nNext, the `print0` option separates the different results by a zero byte NUL character and the `-0` option for `xargs` will then process inputs separated by that same character. This way whitespace in your filenames in all its forms won't disturb your output. The result of the command is that an `ls -l` will be done for every found file.\n\n### for-loop\n\nOne more way to process files is with a quick for loop:\n\n{% codeblock lang:bash line_number:false %}\nfor i in *.txt; do cp \"$i\" \"${i/.txt/.txt.bak}\"; done\n{% endcodeblock %}\n\nNote how variables are wrapped with double quotes to prevent whitespace from spoiling the party. This gets very tedious after a while, which is while the NUL character mentioned above is great for quick and easy file processing.\n\nThis command will look in the current directory (non-recursively), find all files ending in `.txt` and make a copy of it as `*.txt.bak`. Of course you could use a command substitution instead of a simple glob expansion, or you could do much more complicated things.\n\nBut I guess this is probably enough for another quick update. As I was writing this, I kept coming to the realization that there is just so much more to talk about. I want to keep these posts as easily digestible as possible though, so I'll just stop abruptly here. Stay tuned for more and I'll catch you on the flip side, you command-line ninja, you!\n","slug":"quick-command-line-tips-and-tricks2-finding-and-processing-files","published":1,"updated":"2015-11-21T16:12:24.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk4h0033knz9e66x0she","content":"<p>Here are some more quick tips and tricks to improve your command-line user experience and improve your productivity. <a href=\"linux/2015/a-few-quick-command-line-tips-and-tricks/\">Part one here</a>.</p>\n<img src=\"/linux/2015/quick-command-line-tips-and-tricks2-finding-and-processing-files/commandline.png\" alt=\"bash prompt\" title=\"bash prompt\">\n<a id=\"more\"></a>\n<h3 id=\"locate\"><a href=\"#locate\" class=\"headerlink\" title=\"locate\"></a>locate</h3><p>The fastest way to find files on your filesystem is by way of the <code>locate</code> command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">locate MYFILE</div></pre></td></tr></table></figure>\n<p><code>locate</code> is fast because it reads a periodically updated database instead of querying the file system. The downside is that newer files may not have been indexed yet and may therefore fail to appear in your search results. You can however force an update with the <code>updatedb</code> command.</p>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p><code>locate</code> is great for locating a specific file, but it’s not a very versatile tool. If you want to find files and then do things with them, you’d probably prefer to use <code>find</code> instead. Here’s an example of a typical find command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">find ./ -iname <span class=\"string\">\"*FILENAME_PART*\"</span></div></pre></td></tr></table></figure>\n<p>This will do a recursive search in your current directory (<code>./</code>), looking for a case-insensitive (<code>-iname</code>) file that has the string <code>filename_part</code> appear somewhere in the title (note the shell expanding syntax using the asterisks).</p>\n<h3 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"-exec\"></a>-exec</h3><p><code>find</code> is an extremely useful tool and explaining all that it can do here would fill many posts. Here are just a few more examples of its versatility.</p>\n<p>To find all log files in the current directory and copy them to a folder:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">find ./ -iname <span class=\"string\">\"*.log\"</span> -exec cp <span class=\"string\">'&#123;&#125;'</span> ~/logs \\;</div></pre></td></tr></table></figure>\n<p>For every log file found, the <code>cp</code> command will run, with <code>&#39;{}&#39;</code> replaced by the path to the file.</p>\n<p>To do a grep search within each file in the current directory, looking for a particular string:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">find ./ -type f -exec grep -H <span class=\"string\">\"special_string\"</span> <span class=\"string\">'&#123;&#125;'</span> \\;</div></pre></td></tr></table></figure>\n<p><code>-type f</code> restricts the search results to files only and <code>grep -H</code> searches inside the files instead of just in their filenames. Obviously this command can take a while to complete if you have a lot of large files in your directory.</p>\n<h3 id=\"print0\"><a href=\"#print0\" class=\"headerlink\" title=\"-print0\"></a>-print0</h3><p>One thing that often tends to trip up shell magic is whitespace in filenames. The above commands should usually work fine, but if you’re having issues, there’s a quick way to do certain things without the risk of whitespace ruining your day. Here’s an example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">find /downloads -type f -size +1G -print0 | xargs -0 ls <span class=\"_\">-l</span></div></pre></td></tr></table></figure>\n<p>First of all, check out the <code>-size +1G</code> option, which will filter out all files under one gigabyte. There are a lot more filters like this (see <code>man find</code> for more).</p>\n<p>Next, the <code>print0</code> option separates the different results by a zero byte NUL character and the <code>-0</code> option for <code>xargs</code> will then process inputs separated by that same character. This way whitespace in your filenames in all its forms won’t disturb your output. The result of the command is that an <code>ls -l</code> will be done for every found file.</p>\n<h3 id=\"for-loop\"><a href=\"#for-loop\" class=\"headerlink\" title=\"for-loop\"></a>for-loop</h3><p>One more way to process files is with a quick for loop:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> *.txt; <span class=\"keyword\">do</span> cp <span class=\"string\">\"<span class=\"variable\">$i</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;i/.txt/.txt.bak&#125;</span>\"</span>; <span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p>Note how variables are wrapped with double quotes to prevent whitespace from spoiling the party. This gets very tedious after a while, which is while the NUL character mentioned above is great for quick and easy file processing.</p>\n<p>This command will look in the current directory (non-recursively), find all files ending in <code>.txt</code> and make a copy of it as <code>*.txt.bak</code>. Of course you could use a command substitution instead of a simple glob expansion, or you could do much more complicated things.</p>\n<p>But I guess this is probably enough for another quick update. As I was writing this, I kept coming to the realization that there is just so much more to talk about. I want to keep these posts as easily digestible as possible though, so I’ll just stop abruptly here. Stay tuned for more and I’ll catch you on the flip side, you command-line ninja, you!</p>","excerpt":"<p>Here are some more quick tips and tricks to improve your command-line user experience and improve your productivity. <a href=\"linux/2015/a-few-quick-command-line-tips-and-tricks/\">Part one here</a>.</p>\n<img src=\"/linux/2015/quick-command-line-tips-and-tricks2-finding-and-processing-files/commandline.png\" alt=\"bash prompt\" title=\"bash prompt\">","more":"<h3 id=\"locate\"><a href=\"#locate\" class=\"headerlink\" title=\"locate\"></a>locate</h3><p>The fastest way to find files on your filesystem is by way of the <code>locate</code> command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">locate MYFILE</div></pre></td></tr></table></figure>\n<p><code>locate</code> is fast because it reads a periodically updated database instead of querying the file system. The downside is that newer files may not have been indexed yet and may therefore fail to appear in your search results. You can however force an update with the <code>updatedb</code> command.</p>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p><code>locate</code> is great for locating a specific file, but it’s not a very versatile tool. If you want to find files and then do things with them, you’d probably prefer to use <code>find</code> instead. Here’s an example of a typical find command:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">find ./ -iname <span class=\"string\">\"*FILENAME_PART*\"</span></div></pre></td></tr></table></figure>\n<p>This will do a recursive search in your current directory (<code>./</code>), looking for a case-insensitive (<code>-iname</code>) file that has the string <code>filename_part</code> appear somewhere in the title (note the shell expanding syntax using the asterisks).</p>\n<h3 id=\"exec\"><a href=\"#exec\" class=\"headerlink\" title=\"-exec\"></a>-exec</h3><p><code>find</code> is an extremely useful tool and explaining all that it can do here would fill many posts. Here are just a few more examples of its versatility.</p>\n<p>To find all log files in the current directory and copy them to a folder:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">find ./ -iname <span class=\"string\">\"*.log\"</span> -exec cp <span class=\"string\">'&#123;&#125;'</span> ~/logs \\;</div></pre></td></tr></table></figure>\n<p>For every log file found, the <code>cp</code> command will run, with <code>&#39;{}&#39;</code> replaced by the path to the file.</p>\n<p>To do a grep search within each file in the current directory, looking for a particular string:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">find ./ -type f -exec grep -H <span class=\"string\">\"special_string\"</span> <span class=\"string\">'&#123;&#125;'</span> \\;</div></pre></td></tr></table></figure>\n<p><code>-type f</code> restricts the search results to files only and <code>grep -H</code> searches inside the files instead of just in their filenames. Obviously this command can take a while to complete if you have a lot of large files in your directory.</p>\n<h3 id=\"print0\"><a href=\"#print0\" class=\"headerlink\" title=\"-print0\"></a>-print0</h3><p>One thing that often tends to trip up shell magic is whitespace in filenames. The above commands should usually work fine, but if you’re having issues, there’s a quick way to do certain things without the risk of whitespace ruining your day. Here’s an example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">find /downloads -type f -size +1G -print0 | xargs -0 ls <span class=\"_\">-l</span></div></pre></td></tr></table></figure>\n<p>First of all, check out the <code>-size +1G</code> option, which will filter out all files under one gigabyte. There are a lot more filters like this (see <code>man find</code> for more).</p>\n<p>Next, the <code>print0</code> option separates the different results by a zero byte NUL character and the <code>-0</code> option for <code>xargs</code> will then process inputs separated by that same character. This way whitespace in your filenames in all its forms won’t disturb your output. The result of the command is that an <code>ls -l</code> will be done for every found file.</p>\n<h3 id=\"for-loop\"><a href=\"#for-loop\" class=\"headerlink\" title=\"for-loop\"></a>for-loop</h3><p>One more way to process files is with a quick for loop:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> *.txt; <span class=\"keyword\">do</span> cp <span class=\"string\">\"<span class=\"variable\">$i</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;i/.txt/.txt.bak&#125;</span>\"</span>; <span class=\"keyword\">done</span></div></pre></td></tr></table></figure>\n<p>Note how variables are wrapped with double quotes to prevent whitespace from spoiling the party. This gets very tedious after a while, which is while the NUL character mentioned above is great for quick and easy file processing.</p>\n<p>This command will look in the current directory (non-recursively), find all files ending in <code>.txt</code> and make a copy of it as <code>*.txt.bak</code>. Of course you could use a command substitution instead of a simple glob expansion, or you could do much more complicated things.</p>\n<p>But I guess this is probably enough for another quick update. As I was writing this, I kept coming to the realization that there is just so much more to talk about. I want to keep these posts as easily digestible as possible though, so I’ll just stop abruptly here. Stay tuned for more and I’ll catch you on the flip side, you command-line ninja, you!</p>"},{"title":"Richard Stallman on Piracy","date":"2015-11-20T17:27:38.000Z","_content":"\n\nJust got back from a short trip to Belgium. Visited my parents and some old friends, but also went to hear Richard Stallman speak at a Free Software Foundation event in Gent.\n\n{% asset_img gnu.png GNU logo %}\n\nI can't say I agreed with everything he said, but it was a fantastic experience to see and hear him in person. There's no doubt the man is a living legend.\n\nOne of the many things he touched on in his 2 hour long speech is piracy.\n\n<!-- more -->\n\nHere is a relevant quote on the subject from the GNU website:\n\n{% blockquote gnu.org http://www.gnu.org/philosophy/words-to-avoid.html.en#Piracy %}\nPublishers often refer to copying they don't approve of as “piracy.” In this way, they imply that it is ethically equivalent to attacking ships on the high seas, kidnapping and murdering the people on them. Based on such propaganda, they have procured laws in most of the world to forbid copying in most (or sometimes all) circumstances. (They are still pressuring to make these prohibitions more complete.)\n\nIf you don't believe that copying not approved by the publisher is just like kidnapping and murder, you might prefer not to use the word “piracy” to describe it.\n{% endblockquote %}\n\nAnd in his speech last week, he mentioned this to illustrate this point (paraphrased):\n\n{% blockquote Richard Stallman %}\nWhen people ask me for my opinion on piracy, I tell them I don't like it, send the coast guard.\n\nWhen they say they were talking about movie piracy, I respond that I liked the first Pirates of the Caribbean.\n{% endblockquote %}\n","source":"_posts/richard-stallman-on-piracy.md","raw":"title: Richard Stallman on Piracy\ncategories: life\ntags:\n  - rms\n  - free software\ndate: 2015-11-20 17:27:38\n---\n\n\nJust got back from a short trip to Belgium. Visited my parents and some old friends, but also went to hear Richard Stallman speak at a Free Software Foundation event in Gent.\n\n{% asset_img gnu.png GNU logo %}\n\nI can't say I agreed with everything he said, but it was a fantastic experience to see and hear him in person. There's no doubt the man is a living legend.\n\nOne of the many things he touched on in his 2 hour long speech is piracy.\n\n<!-- more -->\n\nHere is a relevant quote on the subject from the GNU website:\n\n{% blockquote gnu.org http://www.gnu.org/philosophy/words-to-avoid.html.en#Piracy %}\nPublishers often refer to copying they don't approve of as “piracy.” In this way, they imply that it is ethically equivalent to attacking ships on the high seas, kidnapping and murdering the people on them. Based on such propaganda, they have procured laws in most of the world to forbid copying in most (or sometimes all) circumstances. (They are still pressuring to make these prohibitions more complete.)\n\nIf you don't believe that copying not approved by the publisher is just like kidnapping and murder, you might prefer not to use the word “piracy” to describe it.\n{% endblockquote %}\n\nAnd in his speech last week, he mentioned this to illustrate this point (paraphrased):\n\n{% blockquote Richard Stallman %}\nWhen people ask me for my opinion on piracy, I tell them I don't like it, send the coast guard.\n\nWhen they say they were talking about movie piracy, I respond that I liked the first Pirates of the Caribbean.\n{% endblockquote %}\n","slug":"richard-stallman-on-piracy","published":1,"updated":"2015-11-21T14:07:16.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk4j0035knz9k7f233po","content":"<p>Just got back from a short trip to Belgium. Visited my parents and some old friends, but also went to hear Richard Stallman speak at a Free Software Foundation event in Gent.</p>\n<img src=\"/life/2015/richard-stallman-on-piracy/gnu.png\" alt=\"GNU logo\" title=\"GNU logo\">\n<p>I can’t say I agreed with everything he said, but it was a fantastic experience to see and hear him in person. There’s no doubt the man is a living legend.</p>\n<p>One of the many things he touched on in his 2 hour long speech is piracy.</p>\n<a id=\"more\"></a>\n<p>Here is a relevant quote on the subject from the GNU website:</p>\n<blockquote><p>Publishers often refer to copying they don’t approve of as “piracy.” In this way, they imply that it is ethically equivalent to attacking ships on the high seas, kidnapping and murdering the people on them. Based on such propaganda, they have procured laws in most of the world to forbid copying in most (or sometimes all) circumstances. (They are still pressuring to make these prohibitions more complete.)</p>\n<p>If you don’t believe that copying not approved by the publisher is just like kidnapping and murder, you might prefer not to use the word “piracy” to describe it.</p><footer><strong>gnu.org</strong><cite><a href=\"http://www.gnu.org/philosophy/words-to-avoid.html.en#Piracy\" target=\"_blank\" rel=\"external\">www.gnu.org/philosophy/words-to-avoid.html.en#Piracy</a></cite></footer></blockquote>\n<p>And in his speech last week, he mentioned this to illustrate this point (paraphrased):</p>\n<blockquote><p>When people ask me for my opinion on piracy, I tell them I don’t like it, send the coast guard.</p>\n<p>When they say they were talking about movie piracy, I respond that I liked the first Pirates of the Caribbean.</p><footer><strong>Richard Stallman</strong></footer></blockquote>","excerpt":"<p>Just got back from a short trip to Belgium. Visited my parents and some old friends, but also went to hear Richard Stallman speak at a Free Software Foundation event in Gent.</p>\n<img src=\"/life/2015/richard-stallman-on-piracy/gnu.png\" alt=\"GNU logo\" title=\"GNU logo\">\n<p>I can’t say I agreed with everything he said, but it was a fantastic experience to see and hear him in person. There’s no doubt the man is a living legend.</p>\n<p>One of the many things he touched on in his 2 hour long speech is piracy.</p>","more":"<p>Here is a relevant quote on the subject from the GNU website:</p>\n<blockquote><p>Publishers often refer to copying they don’t approve of as “piracy.” In this way, they imply that it is ethically equivalent to attacking ships on the high seas, kidnapping and murdering the people on them. Based on such propaganda, they have procured laws in most of the world to forbid copying in most (or sometimes all) circumstances. (They are still pressuring to make these prohibitions more complete.)</p>\n<p>If you don’t believe that copying not approved by the publisher is just like kidnapping and murder, you might prefer not to use the word “piracy” to describe it.</p><footer><strong>gnu.org</strong><cite><a href=\"http://www.gnu.org/philosophy/words-to-avoid.html.en#Piracy\">www.gnu.org/philosophy/words-to-avoid.html.en#Piracy</a></cite></footer></blockquote>\n<p>And in his speech last week, he mentioned this to illustrate this point (paraphrased):</p>\n<blockquote><p>When people ask me for my opinion on piracy, I tell them I don’t like it, send the coast guard.</p>\n<p>When they say they were talking about movie piracy, I respond that I liked the first Pirates of the Caribbean.</p><footer><strong>Richard Stallman</strong></footer></blockquote>"},{"title":"Reboot","date":"2015-10-26T12:46:05.000Z","_content":"So I just took a four-month break from JavaScript to focus on studying math, core computer science concepts and algorithms, as well as getting a Linux certification. But now I'm delving right back into the wonderful world of JavaScript.\n\nI fully realize *very* few people will actually be reading this, so I won't go into too much detail right now, but for the sake of future reference - if only for myself - I'll write a few paragraphs here about my decision to scrap my old blog and start this new one.\n\nThose among you I sent this link to probably know I ran a small personal blog before. It was a simple and personal WordPress blog, hosted for free on Heroku, and it ran for about a year, during which I progressed from being a professional writer/translator, over my early forays into programming, to my decision to become a full-time student of web development.\n\n<!-- more -->\n\nAs I continued on my path, it became clear to me that, although many subjects in computer science had gripped me by the throat and refused to let me go, ultimately my heart belongs to the most popular language in the world right now. Loved by some, hated by many, used by everyone, but so very misunderstood, she is the apple of my eye: JavaScript. Yet despite my love for her, I took a break from her four months ago.\n\nThe reason was simple: I felt unready, unworthy even, to embrace her fully. My background in studying computer science was almost non-existent. Many say you don't need math to do JavaScript, or that you can be a great programmer without studying CS. I don't know if that's true or not. The truth is, I just *wanted* to understand why some code runs better than others, why one piece of code is faster than another seemingly equivalent one. And to do that, I had to go back and study the basics.\n\nI'll probably go into some more detail about this at some point in the near future, but suffice it to say that I took time off from JavaScript to focus on studying calculus (which in retrospect was probably unnecessary), discrete math, algorithms and Python. I also decided to delve deeper into Linux and vim, and got certified as a sysadmin by the Linux Foundation. That was last week.\n\nMy original plan was to simply get back into what I was doing before. But four months is a *long* time, not just for JavaScript, but for myself too. Last week I looked at my blog again and thought, what am I doing? Am I really writing a JavaScript blog in WordPress now? I also looked at my old posts and noticed that they were all over the place. Too much personal stuff, not enough code - I felt like it wasn't really *about* anything anymore, so I decided not to migrate my posts and start anew instead.\n\nObviously this is a work in progress. I set up a new Digital Ocean server and pointed it to this domain name (which I'd bought a while ago - by the way JS are my middle and last name initials as well as standing for JavaScript, how fitting is that, eh?). Then I looked around for blogging options, flirted with Ghost and Metalsmith, but settled on hexo. I'm just using the defaults now, but I'll eventually make it my new home on the interwebs. I'll move over some of my projects and make a portfolio site too.\n\nBut all in due time. Right now I'm setting things up and relearning JavaScript. Actual content will come later. I just wanted to get this first post out of the way and explain why I disappeared for a while and why I decided to start with a clean slate. My blog is dead, long live my blog!\n","source":"_posts/reboot.md","raw":"title: Reboot\ndate: 2015-10-26 12:46:05\ncategories: life\ntags: meta\n---\nSo I just took a four-month break from JavaScript to focus on studying math, core computer science concepts and algorithms, as well as getting a Linux certification. But now I'm delving right back into the wonderful world of JavaScript.\n\nI fully realize *very* few people will actually be reading this, so I won't go into too much detail right now, but for the sake of future reference - if only for myself - I'll write a few paragraphs here about my decision to scrap my old blog and start this new one.\n\nThose among you I sent this link to probably know I ran a small personal blog before. It was a simple and personal WordPress blog, hosted for free on Heroku, and it ran for about a year, during which I progressed from being a professional writer/translator, over my early forays into programming, to my decision to become a full-time student of web development.\n\n<!-- more -->\n\nAs I continued on my path, it became clear to me that, although many subjects in computer science had gripped me by the throat and refused to let me go, ultimately my heart belongs to the most popular language in the world right now. Loved by some, hated by many, used by everyone, but so very misunderstood, she is the apple of my eye: JavaScript. Yet despite my love for her, I took a break from her four months ago.\n\nThe reason was simple: I felt unready, unworthy even, to embrace her fully. My background in studying computer science was almost non-existent. Many say you don't need math to do JavaScript, or that you can be a great programmer without studying CS. I don't know if that's true or not. The truth is, I just *wanted* to understand why some code runs better than others, why one piece of code is faster than another seemingly equivalent one. And to do that, I had to go back and study the basics.\n\nI'll probably go into some more detail about this at some point in the near future, but suffice it to say that I took time off from JavaScript to focus on studying calculus (which in retrospect was probably unnecessary), discrete math, algorithms and Python. I also decided to delve deeper into Linux and vim, and got certified as a sysadmin by the Linux Foundation. That was last week.\n\nMy original plan was to simply get back into what I was doing before. But four months is a *long* time, not just for JavaScript, but for myself too. Last week I looked at my blog again and thought, what am I doing? Am I really writing a JavaScript blog in WordPress now? I also looked at my old posts and noticed that they were all over the place. Too much personal stuff, not enough code - I felt like it wasn't really *about* anything anymore, so I decided not to migrate my posts and start anew instead.\n\nObviously this is a work in progress. I set up a new Digital Ocean server and pointed it to this domain name (which I'd bought a while ago - by the way JS are my middle and last name initials as well as standing for JavaScript, how fitting is that, eh?). Then I looked around for blogging options, flirted with Ghost and Metalsmith, but settled on hexo. I'm just using the defaults now, but I'll eventually make it my new home on the interwebs. I'll move over some of my projects and make a portfolio site too.\n\nBut all in due time. Right now I'm setting things up and relearning JavaScript. Actual content will come later. I just wanted to get this first post out of the way and explain why I disappeared for a while and why I decided to start with a clean slate. My blog is dead, long live my blog!\n","slug":"reboot","published":1,"updated":"2015-11-21T14:07:16.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk4l0039knz9fm7oy4lm","content":"<p>So I just took a four-month break from JavaScript to focus on studying math, core computer science concepts and algorithms, as well as getting a Linux certification. But now I’m delving right back into the wonderful world of JavaScript.</p>\n<p>I fully realize <em>very</em> few people will actually be reading this, so I won’t go into too much detail right now, but for the sake of future reference - if only for myself - I’ll write a few paragraphs here about my decision to scrap my old blog and start this new one.</p>\n<p>Those among you I sent this link to probably know I ran a small personal blog before. It was a simple and personal WordPress blog, hosted for free on Heroku, and it ran for about a year, during which I progressed from being a professional writer/translator, over my early forays into programming, to my decision to become a full-time student of web development.</p>\n<a id=\"more\"></a>\n<p>As I continued on my path, it became clear to me that, although many subjects in computer science had gripped me by the throat and refused to let me go, ultimately my heart belongs to the most popular language in the world right now. Loved by some, hated by many, used by everyone, but so very misunderstood, she is the apple of my eye: JavaScript. Yet despite my love for her, I took a break from her four months ago.</p>\n<p>The reason was simple: I felt unready, unworthy even, to embrace her fully. My background in studying computer science was almost non-existent. Many say you don’t need math to do JavaScript, or that you can be a great programmer without studying CS. I don’t know if that’s true or not. The truth is, I just <em>wanted</em> to understand why some code runs better than others, why one piece of code is faster than another seemingly equivalent one. And to do that, I had to go back and study the basics.</p>\n<p>I’ll probably go into some more detail about this at some point in the near future, but suffice it to say that I took time off from JavaScript to focus on studying calculus (which in retrospect was probably unnecessary), discrete math, algorithms and Python. I also decided to delve deeper into Linux and vim, and got certified as a sysadmin by the Linux Foundation. That was last week.</p>\n<p>My original plan was to simply get back into what I was doing before. But four months is a <em>long</em> time, not just for JavaScript, but for myself too. Last week I looked at my blog again and thought, what am I doing? Am I really writing a JavaScript blog in WordPress now? I also looked at my old posts and noticed that they were all over the place. Too much personal stuff, not enough code - I felt like it wasn’t really <em>about</em> anything anymore, so I decided not to migrate my posts and start anew instead.</p>\n<p>Obviously this is a work in progress. I set up a new Digital Ocean server and pointed it to this domain name (which I’d bought a while ago - by the way JS are my middle and last name initials as well as standing for JavaScript, how fitting is that, eh?). Then I looked around for blogging options, flirted with Ghost and Metalsmith, but settled on hexo. I’m just using the defaults now, but I’ll eventually make it my new home on the interwebs. I’ll move over some of my projects and make a portfolio site too.</p>\n<p>But all in due time. Right now I’m setting things up and relearning JavaScript. Actual content will come later. I just wanted to get this first post out of the way and explain why I disappeared for a while and why I decided to start with a clean slate. My blog is dead, long live my blog!</p>","excerpt":"<p>So I just took a four-month break from JavaScript to focus on studying math, core computer science concepts and algorithms, as well as getting a Linux certification. But now I’m delving right back into the wonderful world of JavaScript.</p>\n<p>I fully realize <em>very</em> few people will actually be reading this, so I won’t go into too much detail right now, but for the sake of future reference - if only for myself - I’ll write a few paragraphs here about my decision to scrap my old blog and start this new one.</p>\n<p>Those among you I sent this link to probably know I ran a small personal blog before. It was a simple and personal WordPress blog, hosted for free on Heroku, and it ran for about a year, during which I progressed from being a professional writer/translator, over my early forays into programming, to my decision to become a full-time student of web development.</p>","more":"<p>As I continued on my path, it became clear to me that, although many subjects in computer science had gripped me by the throat and refused to let me go, ultimately my heart belongs to the most popular language in the world right now. Loved by some, hated by many, used by everyone, but so very misunderstood, she is the apple of my eye: JavaScript. Yet despite my love for her, I took a break from her four months ago.</p>\n<p>The reason was simple: I felt unready, unworthy even, to embrace her fully. My background in studying computer science was almost non-existent. Many say you don’t need math to do JavaScript, or that you can be a great programmer without studying CS. I don’t know if that’s true or not. The truth is, I just <em>wanted</em> to understand why some code runs better than others, why one piece of code is faster than another seemingly equivalent one. And to do that, I had to go back and study the basics.</p>\n<p>I’ll probably go into some more detail about this at some point in the near future, but suffice it to say that I took time off from JavaScript to focus on studying calculus (which in retrospect was probably unnecessary), discrete math, algorithms and Python. I also decided to delve deeper into Linux and vim, and got certified as a sysadmin by the Linux Foundation. That was last week.</p>\n<p>My original plan was to simply get back into what I was doing before. But four months is a <em>long</em> time, not just for JavaScript, but for myself too. Last week I looked at my blog again and thought, what am I doing? Am I really writing a JavaScript blog in WordPress now? I also looked at my old posts and noticed that they were all over the place. Too much personal stuff, not enough code - I felt like it wasn’t really <em>about</em> anything anymore, so I decided not to migrate my posts and start anew instead.</p>\n<p>Obviously this is a work in progress. I set up a new Digital Ocean server and pointed it to this domain name (which I’d bought a while ago - by the way JS are my middle and last name initials as well as standing for JavaScript, how fitting is that, eh?). Then I looked around for blogging options, flirted with Ghost and Metalsmith, but settled on hexo. I’m just using the defaults now, but I’ll eventually make it my new home on the interwebs. I’ll move over some of my projects and make a portfolio site too.</p>\n<p>But all in due time. Right now I’m setting things up and relearning JavaScript. Actual content will come later. I just wanted to get this first post out of the way and explain why I disappeared for a while and why I decided to start with a clean slate. My blog is dead, long live my blog!</p>"},{"title":"The new-on-GitHub blues and my new project: command line Arch wiki","date":"2015-11-25T17:49:27.000Z","_content":"\nSince I got back from Belgium last week, I've been stuck in a bit of a rut, GitHub-wise. I finished my hexo plugin so I had to start looking for something else to do while I finish up [my reading](https://github.com/getify/You-Dont-Know-JS).\n\nFirst I started building a Reddit bot, but after a few hours I saw that someone else had already done exactly what I'd wanted to do. I didn't feel like continuing writing Python anyway -- and the node helper libraries aren't as well-developed -- so I let the project go.\n\nThen I figured I'd just fix some Hexo issues. It looked like I was making some headway solving what I thought I had identified as a glaring bug in the code.\n\nSadly, there turned out to be a very good reason for why the code looked the way it did, and my 'solutions' ended up causing a lot more problems down the line. So after two whole days of tinkering I had to write that off too as an epic fail.\n\n<!-- more -->\n\nNext, I decided I was going to make the [highlight.js](https://github.com/isagalaev/highlight.js) styles available in stylus format for use in Hexo. That meant figuring out how to scrape a github repository, process the contents and serve them up in a different repo, and then using that on stylized CSS files.\n\nThis time I got half-way there, but I struggled hard with processing the styles. I'd built the scraping and automated updating of the repo part of the project, but I still can't for the life of me figure out why my converted styles won't look right in my tests!\n\nAt last, I decided to put making the highlight styles repo on hold for now, but use the part of the project that works for another project I'd been meaning to start. More on that in a minute.\n\n## The new-on-GitHub blues\n\nI wrote the above to illustrate the issues I'm having as someone who's new on GitHub. I'm trying hard to be useful and to learn how to contribute valuable code to projects, which are maintained by people much more experienced and more knowledgeable than I am.\n\nA cursory glance at developer forums, chats and community websites reveals that a whole lot of people in similar positions are experiencing these problems as well.\n\n{% asset_img think.jpg %}\n\nThe amount of resources, guides, books and classes designed to help people who are new to programming is staggering. So staggering even that the threat of educational oversaturation is rising in JavaScript-land.\n\nWhat I mean is that for absolute newbies, there are so many courses, tutorials, classes, blog posts, plans and a whole lot more to do that you could fill several life times educating yourself, yet have no time left to actually do projects. This is something I realized not too long ago, after spending several months in a slightly-too-comfortable education bubble myself.\n\nHowever, once a self-taught student has progressed to a certain level, that overwhelming amount of resources shrinks (or perhaps it simply becomes less useful). What is needed at that point is not more books or courses, but rather guidance and mentorship.\n\nAnd such guidance and mentorship is hard to come by online. So many people are willing to commit many hours a day to contributing to open source -- because at some point in one's development it is probably the best and cheapest way to learn.\n\nBut contributing to open source is hard and nerve-wrecking if you're an experienced developer and therefore understandably frightening for new programmers. I'm pretty dead set on doing a lot of open source to get better at this, but it really is very, very difficult.\n\nThere are some communities, websites and applications to help you out though, and I'll make a separate post about these very soon. But for now, if you're reading this and you nodded your head throughout, let me just tell you that you're not alone and that you'll get there. Just don't get discouraged and keep at it! At least, that's what I tell myself?\n\n## About that new project\n\nSo what I did in the end was I took my own advice. Despite the setbacks, I didn't get discouraged (well, maybe a little) and I kept at it. And now I'm working on a new project for which I'll hopefully get the first tidbits out tomorrow.\n\nI'll be building a command-line interface for browsing a local copy of the [Arch Wiki](https://wiki.archlinux.org/) that gets updated automatically on a regular basis. I'm kind of way out of my comfort zone here, but I figure that's probably how I'll learn best, so I won't stop until I'm done (I hope).\n\nBy the way, I only started this after I made sure there weren't any licensing issues with me hosting Arch Wiki content. I'm pretty sure I understood it correctly, but in case you think I'm wrong, please get in touch with me asap.\n\nAlso, I realize there are already some similar projects like this. However none I've found seems to work on my machine or solves the problems I wanted to solve. Regardless, I just really want to do this, whether others have already done it better or not.\n\nHere's what's on my to-do list:\n\n- Scrape the entire Arch Wiki\n- Turn HTML into markdown\n- Make local TOC and symlink to the articles\n- Implement daily/hourly update of all the content\n- Make automatically updating github repo with the results from above\n- Build CLI to locally browse the wiki using the repo above\n\nWish me luck! And best of luck to you if you're singing the new-on-GitHub blues too!\n","source":"_posts/the-new-on-github-blues-and-my-new-project-local-command-line-arch-wiki.md","raw":"title: 'The new-on-GitHub blues and my new project: command line Arch wiki'\ndate: 2015-11-25 17:49:27\ncategories: life\ntags:\n- js\n- open source\n- arch linux\n---\n\nSince I got back from Belgium last week, I've been stuck in a bit of a rut, GitHub-wise. I finished my hexo plugin so I had to start looking for something else to do while I finish up [my reading](https://github.com/getify/You-Dont-Know-JS).\n\nFirst I started building a Reddit bot, but after a few hours I saw that someone else had already done exactly what I'd wanted to do. I didn't feel like continuing writing Python anyway -- and the node helper libraries aren't as well-developed -- so I let the project go.\n\nThen I figured I'd just fix some Hexo issues. It looked like I was making some headway solving what I thought I had identified as a glaring bug in the code.\n\nSadly, there turned out to be a very good reason for why the code looked the way it did, and my 'solutions' ended up causing a lot more problems down the line. So after two whole days of tinkering I had to write that off too as an epic fail.\n\n<!-- more -->\n\nNext, I decided I was going to make the [highlight.js](https://github.com/isagalaev/highlight.js) styles available in stylus format for use in Hexo. That meant figuring out how to scrape a github repository, process the contents and serve them up in a different repo, and then using that on stylized CSS files.\n\nThis time I got half-way there, but I struggled hard with processing the styles. I'd built the scraping and automated updating of the repo part of the project, but I still can't for the life of me figure out why my converted styles won't look right in my tests!\n\nAt last, I decided to put making the highlight styles repo on hold for now, but use the part of the project that works for another project I'd been meaning to start. More on that in a minute.\n\n## The new-on-GitHub blues\n\nI wrote the above to illustrate the issues I'm having as someone who's new on GitHub. I'm trying hard to be useful and to learn how to contribute valuable code to projects, which are maintained by people much more experienced and more knowledgeable than I am.\n\nA cursory glance at developer forums, chats and community websites reveals that a whole lot of people in similar positions are experiencing these problems as well.\n\n{% asset_img think.jpg %}\n\nThe amount of resources, guides, books and classes designed to help people who are new to programming is staggering. So staggering even that the threat of educational oversaturation is rising in JavaScript-land.\n\nWhat I mean is that for absolute newbies, there are so many courses, tutorials, classes, blog posts, plans and a whole lot more to do that you could fill several life times educating yourself, yet have no time left to actually do projects. This is something I realized not too long ago, after spending several months in a slightly-too-comfortable education bubble myself.\n\nHowever, once a self-taught student has progressed to a certain level, that overwhelming amount of resources shrinks (or perhaps it simply becomes less useful). What is needed at that point is not more books or courses, but rather guidance and mentorship.\n\nAnd such guidance and mentorship is hard to come by online. So many people are willing to commit many hours a day to contributing to open source -- because at some point in one's development it is probably the best and cheapest way to learn.\n\nBut contributing to open source is hard and nerve-wrecking if you're an experienced developer and therefore understandably frightening for new programmers. I'm pretty dead set on doing a lot of open source to get better at this, but it really is very, very difficult.\n\nThere are some communities, websites and applications to help you out though, and I'll make a separate post about these very soon. But for now, if you're reading this and you nodded your head throughout, let me just tell you that you're not alone and that you'll get there. Just don't get discouraged and keep at it! At least, that's what I tell myself?\n\n## About that new project\n\nSo what I did in the end was I took my own advice. Despite the setbacks, I didn't get discouraged (well, maybe a little) and I kept at it. And now I'm working on a new project for which I'll hopefully get the first tidbits out tomorrow.\n\nI'll be building a command-line interface for browsing a local copy of the [Arch Wiki](https://wiki.archlinux.org/) that gets updated automatically on a regular basis. I'm kind of way out of my comfort zone here, but I figure that's probably how I'll learn best, so I won't stop until I'm done (I hope).\n\nBy the way, I only started this after I made sure there weren't any licensing issues with me hosting Arch Wiki content. I'm pretty sure I understood it correctly, but in case you think I'm wrong, please get in touch with me asap.\n\nAlso, I realize there are already some similar projects like this. However none I've found seems to work on my machine or solves the problems I wanted to solve. Regardless, I just really want to do this, whether others have already done it better or not.\n\nHere's what's on my to-do list:\n\n- Scrape the entire Arch Wiki\n- Turn HTML into markdown\n- Make local TOC and symlink to the articles\n- Implement daily/hourly update of all the content\n- Make automatically updating github repo with the results from above\n- Build CLI to locally browse the wiki using the repo above\n\nWish me luck! And best of luck to you if you're singing the new-on-GitHub blues too!\n","slug":"the-new-on-github-blues-and-my-new-project-local-command-line-arch-wiki","published":1,"updated":"2015-11-25T23:50:07.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk4n003cknz90fybnnjz","content":"<p>Since I got back from Belgium last week, I’ve been stuck in a bit of a rut, GitHub-wise. I finished my hexo plugin so I had to start looking for something else to do while I finish up <a href=\"https://github.com/getify/You-Dont-Know-JS\" target=\"_blank\" rel=\"external\">my reading</a>.</p>\n<p>First I started building a Reddit bot, but after a few hours I saw that someone else had already done exactly what I’d wanted to do. I didn’t feel like continuing writing Python anyway – and the node helper libraries aren’t as well-developed – so I let the project go.</p>\n<p>Then I figured I’d just fix some Hexo issues. It looked like I was making some headway solving what I thought I had identified as a glaring bug in the code.</p>\n<p>Sadly, there turned out to be a very good reason for why the code looked the way it did, and my ‘solutions’ ended up causing a lot more problems down the line. So after two whole days of tinkering I had to write that off too as an epic fail.</p>\n<a id=\"more\"></a>\n<p>Next, I decided I was going to make the <a href=\"https://github.com/isagalaev/highlight.js\" target=\"_blank\" rel=\"external\">highlight.js</a> styles available in stylus format for use in Hexo. That meant figuring out how to scrape a github repository, process the contents and serve them up in a different repo, and then using that on stylized CSS files.</p>\n<p>This time I got half-way there, but I struggled hard with processing the styles. I’d built the scraping and automated updating of the repo part of the project, but I still can’t for the life of me figure out why my converted styles won’t look right in my tests!</p>\n<p>At last, I decided to put making the highlight styles repo on hold for now, but use the part of the project that works for another project I’d been meaning to start. More on that in a minute.</p>\n<h2 id=\"The-new-on-GitHub-blues\"><a href=\"#The-new-on-GitHub-blues\" class=\"headerlink\" title=\"The new-on-GitHub blues\"></a>The new-on-GitHub blues</h2><p>I wrote the above to illustrate the issues I’m having as someone who’s new on GitHub. I’m trying hard to be useful and to learn how to contribute valuable code to projects, which are maintained by people much more experienced and more knowledgeable than I am.</p>\n<p>A cursory glance at developer forums, chats and community websites reveals that a whole lot of people in similar positions are experiencing these problems as well.</p>\n<img src=\"/life/2015/the-new-on-github-blues-and-my-new-project-local-command-line-arch-wiki/think.jpg\" alt=\"think.jpg\" title=\"\">\n<p>The amount of resources, guides, books and classes designed to help people who are new to programming is staggering. So staggering even that the threat of educational oversaturation is rising in JavaScript-land.</p>\n<p>What I mean is that for absolute newbies, there are so many courses, tutorials, classes, blog posts, plans and a whole lot more to do that you could fill several life times educating yourself, yet have no time left to actually do projects. This is something I realized not too long ago, after spending several months in a slightly-too-comfortable education bubble myself.</p>\n<p>However, once a self-taught student has progressed to a certain level, that overwhelming amount of resources shrinks (or perhaps it simply becomes less useful). What is needed at that point is not more books or courses, but rather guidance and mentorship.</p>\n<p>And such guidance and mentorship is hard to come by online. So many people are willing to commit many hours a day to contributing to open source – because at some point in one’s development it is probably the best and cheapest way to learn.</p>\n<p>But contributing to open source is hard and nerve-wrecking if you’re an experienced developer and therefore understandably frightening for new programmers. I’m pretty dead set on doing a lot of open source to get better at this, but it really is very, very difficult.</p>\n<p>There are some communities, websites and applications to help you out though, and I’ll make a separate post about these very soon. But for now, if you’re reading this and you nodded your head throughout, let me just tell you that you’re not alone and that you’ll get there. Just don’t get discouraged and keep at it! At least, that’s what I tell myself?</p>\n<h2 id=\"About-that-new-project\"><a href=\"#About-that-new-project\" class=\"headerlink\" title=\"About that new project\"></a>About that new project</h2><p>So what I did in the end was I took my own advice. Despite the setbacks, I didn’t get discouraged (well, maybe a little) and I kept at it. And now I’m working on a new project for which I’ll hopefully get the first tidbits out tomorrow.</p>\n<p>I’ll be building a command-line interface for browsing a local copy of the <a href=\"https://wiki.archlinux.org/\" target=\"_blank\" rel=\"external\">Arch Wiki</a> that gets updated automatically on a regular basis. I’m kind of way out of my comfort zone here, but I figure that’s probably how I’ll learn best, so I won’t stop until I’m done (I hope).</p>\n<p>By the way, I only started this after I made sure there weren’t any licensing issues with me hosting Arch Wiki content. I’m pretty sure I understood it correctly, but in case you think I’m wrong, please get in touch with me asap.</p>\n<p>Also, I realize there are already some similar projects like this. However none I’ve found seems to work on my machine or solves the problems I wanted to solve. Regardless, I just really want to do this, whether others have already done it better or not.</p>\n<p>Here’s what’s on my to-do list:</p>\n<ul>\n<li>Scrape the entire Arch Wiki</li>\n<li>Turn HTML into markdown</li>\n<li>Make local TOC and symlink to the articles</li>\n<li>Implement daily/hourly update of all the content</li>\n<li>Make automatically updating github repo with the results from above</li>\n<li>Build CLI to locally browse the wiki using the repo above</li>\n</ul>\n<p>Wish me luck! And best of luck to you if you’re singing the new-on-GitHub blues too!</p>","excerpt":"<p>Since I got back from Belgium last week, I’ve been stuck in a bit of a rut, GitHub-wise. I finished my hexo plugin so I had to start looking for something else to do while I finish up <a href=\"https://github.com/getify/You-Dont-Know-JS\">my reading</a>.</p>\n<p>First I started building a Reddit bot, but after a few hours I saw that someone else had already done exactly what I’d wanted to do. I didn’t feel like continuing writing Python anyway – and the node helper libraries aren’t as well-developed – so I let the project go.</p>\n<p>Then I figured I’d just fix some Hexo issues. It looked like I was making some headway solving what I thought I had identified as a glaring bug in the code.</p>\n<p>Sadly, there turned out to be a very good reason for why the code looked the way it did, and my ‘solutions’ ended up causing a lot more problems down the line. So after two whole days of tinkering I had to write that off too as an epic fail.</p>","more":"<p>Next, I decided I was going to make the <a href=\"https://github.com/isagalaev/highlight.js\">highlight.js</a> styles available in stylus format for use in Hexo. That meant figuring out how to scrape a github repository, process the contents and serve them up in a different repo, and then using that on stylized CSS files.</p>\n<p>This time I got half-way there, but I struggled hard with processing the styles. I’d built the scraping and automated updating of the repo part of the project, but I still can’t for the life of me figure out why my converted styles won’t look right in my tests!</p>\n<p>At last, I decided to put making the highlight styles repo on hold for now, but use the part of the project that works for another project I’d been meaning to start. More on that in a minute.</p>\n<h2 id=\"The-new-on-GitHub-blues\"><a href=\"#The-new-on-GitHub-blues\" class=\"headerlink\" title=\"The new-on-GitHub blues\"></a>The new-on-GitHub blues</h2><p>I wrote the above to illustrate the issues I’m having as someone who’s new on GitHub. I’m trying hard to be useful and to learn how to contribute valuable code to projects, which are maintained by people much more experienced and more knowledgeable than I am.</p>\n<p>A cursory glance at developer forums, chats and community websites reveals that a whole lot of people in similar positions are experiencing these problems as well.</p>\n<img src=\"/life/2015/the-new-on-github-blues-and-my-new-project-local-command-line-arch-wiki/think.jpg\" alt=\"think.jpg\" title=\"\">\n<p>The amount of resources, guides, books and classes designed to help people who are new to programming is staggering. So staggering even that the threat of educational oversaturation is rising in JavaScript-land.</p>\n<p>What I mean is that for absolute newbies, there are so many courses, tutorials, classes, blog posts, plans and a whole lot more to do that you could fill several life times educating yourself, yet have no time left to actually do projects. This is something I realized not too long ago, after spending several months in a slightly-too-comfortable education bubble myself.</p>\n<p>However, once a self-taught student has progressed to a certain level, that overwhelming amount of resources shrinks (or perhaps it simply becomes less useful). What is needed at that point is not more books or courses, but rather guidance and mentorship.</p>\n<p>And such guidance and mentorship is hard to come by online. So many people are willing to commit many hours a day to contributing to open source – because at some point in one’s development it is probably the best and cheapest way to learn.</p>\n<p>But contributing to open source is hard and nerve-wrecking if you’re an experienced developer and therefore understandably frightening for new programmers. I’m pretty dead set on doing a lot of open source to get better at this, but it really is very, very difficult.</p>\n<p>There are some communities, websites and applications to help you out though, and I’ll make a separate post about these very soon. But for now, if you’re reading this and you nodded your head throughout, let me just tell you that you’re not alone and that you’ll get there. Just don’t get discouraged and keep at it! At least, that’s what I tell myself?</p>\n<h2 id=\"About-that-new-project\"><a href=\"#About-that-new-project\" class=\"headerlink\" title=\"About that new project\"></a>About that new project</h2><p>So what I did in the end was I took my own advice. Despite the setbacks, I didn’t get discouraged (well, maybe a little) and I kept at it. And now I’m working on a new project for which I’ll hopefully get the first tidbits out tomorrow.</p>\n<p>I’ll be building a command-line interface for browsing a local copy of the <a href=\"https://wiki.archlinux.org/\">Arch Wiki</a> that gets updated automatically on a regular basis. I’m kind of way out of my comfort zone here, but I figure that’s probably how I’ll learn best, so I won’t stop until I’m done (I hope).</p>\n<p>By the way, I only started this after I made sure there weren’t any licensing issues with me hosting Arch Wiki content. I’m pretty sure I understood it correctly, but in case you think I’m wrong, please get in touch with me asap.</p>\n<p>Also, I realize there are already some similar projects like this. However none I’ve found seems to work on my machine or solves the problems I wanted to solve. Regardless, I just really want to do this, whether others have already done it better or not.</p>\n<p>Here’s what’s on my to-do list:</p>\n<ul>\n<li>Scrape the entire Arch Wiki</li>\n<li>Turn HTML into markdown</li>\n<li>Make local TOC and symlink to the articles</li>\n<li>Implement daily/hourly update of all the content</li>\n<li>Make automatically updating github repo with the results from above</li>\n<li>Build CLI to locally browse the wiki using the repo above</li>\n</ul>\n<p>Wish me luck! And best of luck to you if you’re singing the new-on-GitHub blues too!</p>"},{"title":"Simple promise example","date":"2015-11-10T14:41:05.000Z","_content":"\n\nI generally know what promises are about and have found them to be very convenient on multiple occasions (at least, more so than traditional callbacks). However, for me and undoubtedly for many others, the true nature of the promise still kind of eludes me.\n\nI'm pretty busy nowadays working my way through [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS), building a landing page for this site and hacking on a bunch of other small projects. But I really wanted to get a more theoretical understanding of them now rather than later, rather than just slightly modifying existing code and hoping I understood it somewhat correctly.\n\nSo I did what probably every budding and experienced developer does in this kind of situation: I read the [MDN article on promises](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n<!-- more -->\n\nKyle Simpson (the author of You Don't Know JS) will undoubtedly give a fantastic and in-depth review of promises in the (for now) [final volume in his series on Async & Performance](https://github.com/getify/You-Dont-Know-JS/tree/master/async%20%26%20performance). I've still got two books to go before I get there though, but the MDN article enlightened me enough to get me by until then.\n\nI highly recommend giving either the above-linked book (buy it from O'Reilly to support the author or read it for free on github) or the [MDN article on promises](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise) a read if you feel in any way fuzzy on what promises are or why you should probably use them.\n\nBut just in case you don't believe me, here's a quick and dirty example to wet your appetite:\n\n{% codeblock lang:javascript %}\nvar getAsyncList = new Promise(function(resolve, reject) {\n  setTimeout(function() {\n    list = ['a', 'b', 'c'];\n    return resolve(list);\n  }, 1000)\n});\n\ngetAsyncList.then(function(list) {\n  // the list parameter is the resolved list from above\n  list.push('d');\n  console.log(list);  // -> ['a', 'b', 'c', 'd']\n}).catch(function(reason) {\n  // no errors here, but error handling is a breeze with the reject argument on line 1\n  console.log('Promise rejected (' + reason + ')');\n});\n{% endcodeblock %}\n\nGoodbye callback hell! Keep on JS'ing, friends :-)\n","source":"_posts/simple-promise-example.md","raw":"title: Simple promise example\ncategories: javascript\ntags:\n  - js\n  - node\n  - learning\n  - async\ndate: 2015-11-10 14:41:05\n---\n\n\nI generally know what promises are about and have found them to be very convenient on multiple occasions (at least, more so than traditional callbacks). However, for me and undoubtedly for many others, the true nature of the promise still kind of eludes me.\n\nI'm pretty busy nowadays working my way through [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS), building a landing page for this site and hacking on a bunch of other small projects. But I really wanted to get a more theoretical understanding of them now rather than later, rather than just slightly modifying existing code and hoping I understood it somewhat correctly.\n\nSo I did what probably every budding and experienced developer does in this kind of situation: I read the [MDN article on promises](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n<!-- more -->\n\nKyle Simpson (the author of You Don't Know JS) will undoubtedly give a fantastic and in-depth review of promises in the (for now) [final volume in his series on Async & Performance](https://github.com/getify/You-Dont-Know-JS/tree/master/async%20%26%20performance). I've still got two books to go before I get there though, but the MDN article enlightened me enough to get me by until then.\n\nI highly recommend giving either the above-linked book (buy it from O'Reilly to support the author or read it for free on github) or the [MDN article on promises](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise) a read if you feel in any way fuzzy on what promises are or why you should probably use them.\n\nBut just in case you don't believe me, here's a quick and dirty example to wet your appetite:\n\n{% codeblock lang:javascript %}\nvar getAsyncList = new Promise(function(resolve, reject) {\n  setTimeout(function() {\n    list = ['a', 'b', 'c'];\n    return resolve(list);\n  }, 1000)\n});\n\ngetAsyncList.then(function(list) {\n  // the list parameter is the resolved list from above\n  list.push('d');\n  console.log(list);  // -> ['a', 'b', 'c', 'd']\n}).catch(function(reason) {\n  // no errors here, but error handling is a breeze with the reject argument on line 1\n  console.log('Promise rejected (' + reason + ')');\n});\n{% endcodeblock %}\n\nGoodbye callback hell! Keep on JS'ing, friends :-)\n","slug":"simple-promise-example","published":1,"updated":"2015-11-21T14:07:16.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk4o003gknz9pzsz16z4","content":"<p>I generally know what promises are about and have found them to be very convenient on multiple occasions (at least, more so than traditional callbacks). However, for me and undoubtedly for many others, the true nature of the promise still kind of eludes me.</p>\n<p>I’m pretty busy nowadays working my way through <a href=\"https://github.com/getify/You-Dont-Know-JS\" target=\"_blank\" rel=\"external\">You Don’t Know JS</a>, building a landing page for this site and hacking on a bunch of other small projects. But I really wanted to get a more theoretical understanding of them now rather than later, rather than just slightly modifying existing code and hoping I understood it somewhat correctly.</p>\n<p>So I did what probably every budding and experienced developer does in this kind of situation: I read the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"external\">MDN article on promises</a>.</p>\n<a id=\"more\"></a>\n<p>Kyle Simpson (the author of You Don’t Know JS) will undoubtedly give a fantastic and in-depth review of promises in the (for now) <a href=\"https://github.com/getify/You-Dont-Know-JS/tree/master/async%20%26%20performance\" target=\"_blank\" rel=\"external\">final volume in his series on Async &amp; Performance</a>. I’ve still got two books to go before I get there though, but the MDN article enlightened me enough to get me by until then.</p>\n<p>I highly recommend giving either the above-linked book (buy it from O’Reilly to support the author or read it for free on github) or the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"external\">MDN article on promises</a> a read if you feel in any way fuzzy on what promises are or why you should probably use them.</p>\n<p>But just in case you don’t believe me, here’s a quick and dirty example to wet your appetite:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> getAsyncList = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    list = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> resolve(list);</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">getAsyncList.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">list</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// the list parameter is the resolved list from above</span></div><div class=\"line\">  list.push(<span class=\"string\">'d'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(list);  <span class=\"comment\">// -&gt; ['a', 'b', 'c', 'd']</span></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// no errors here, but error handling is a breeze with the reject argument on line 1</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Promise rejected ('</span> + reason + <span class=\"string\">')'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Goodbye callback hell! Keep on JS’ing, friends :-)</p>","excerpt":"<p>I generally know what promises are about and have found them to be very convenient on multiple occasions (at least, more so than traditional callbacks). However, for me and undoubtedly for many others, the true nature of the promise still kind of eludes me.</p>\n<p>I’m pretty busy nowadays working my way through <a href=\"https://github.com/getify/You-Dont-Know-JS\">You Don’t Know JS</a>, building a landing page for this site and hacking on a bunch of other small projects. But I really wanted to get a more theoretical understanding of them now rather than later, rather than just slightly modifying existing code and hoping I understood it somewhat correctly.</p>\n<p>So I did what probably every budding and experienced developer does in this kind of situation: I read the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN article on promises</a>.</p>","more":"<p>Kyle Simpson (the author of You Don’t Know JS) will undoubtedly give a fantastic and in-depth review of promises in the (for now) <a href=\"https://github.com/getify/You-Dont-Know-JS/tree/master/async%20%26%20performance\">final volume in his series on Async &amp; Performance</a>. I’ve still got two books to go before I get there though, but the MDN article enlightened me enough to get me by until then.</p>\n<p>I highly recommend giving either the above-linked book (buy it from O’Reilly to support the author or read it for free on github) or the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN article on promises</a> a read if you feel in any way fuzzy on what promises are or why you should probably use them.</p>\n<p>But just in case you don’t believe me, here’s a quick and dirty example to wet your appetite:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> getAsyncList = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    list = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> resolve(list);</div><div class=\"line\">  &#125;, <span class=\"number\">1000</span>)</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">getAsyncList.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">list</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// the list parameter is the resolved list from above</span></div><div class=\"line\">  list.push(<span class=\"string\">'d'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(list);  <span class=\"comment\">// -&gt; ['a', 'b', 'c', 'd']</span></div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// no errors here, but error handling is a breeze with the reject argument on line 1</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Promise rejected ('</span> + reason + <span class=\"string\">')'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Goodbye callback hell! Keep on JS’ing, friends :-)</p>"},{"title":"Three things I learned from rewriting hexo-easy-edit","date":"2015-11-06T01:42:43.000Z","_content":"\n\nEarlier today I ended up rewriting [the Hexo plugin](https://github.com/greg-js/vim-tag-plugin-snippets) I wrote a couple of days ago. The reason was that I suddenly realized a better approach. And what's more: after rewriting it, it was almost child's play to add a couple of extra features and general niceties.\n\nBesides being able to edit any blog post of a Hexo blog in your editor of choice from the command line using a regular expression on the title and/or subfolder, you can now also filter on tags and plugins and open newly created posts automatically. Also, the little menu now displays your posts in chronological order :-)\n\nNow, I'm by no means an expert of course, but I'd like to jot down a couple of thoughts, because I feel like I did learn some valuable lessons from writing this [modest but actually useful plugin](https://www.npmjs.com/package/hexo-easy-edit).\n\n<!-- more -->\n\n## A few things I learned:\n\n- **Think before coding.**\nBefore the rewrite, I was constantly using the filesystem module to check folders, filter files and extensions, compare stats, etc. Then I realized I could use database queries instead! That made it so much easier to do powerful things (and using fewer callbacks and promises). In retrospect, I really should have thought things trough more before sitting down and starting to code!\n\n- **Test before pushing.**\nI know about the importance of testing, but I figured it just wasn't necessary for something as simple as this. Well, I was wrong, because I accidentally pushed out buggy versions (as well as publishing them to npm) several times. I'll definitely try to write my next project using a TDD or BDD test suite, even if it's something small.\n\n- **Just do it.**\nThose who know me may disagree but I am at heart a very insecure person. I'd been putting off putting my code online, preferring to focus on studying theory and doing practice projects. But while theory and practice are important too, I feel like the past week I've spent on GitHub may have been more educational for me than the past four months I spent studying math, Linux and algorithms.. There's a time for everything, but at some point, you really need to **just do it**.\n\n{% youtube ZXsQAXx_ao0 %}\n","source":"_posts/three-things-i-learned-from-rewriting-hexo-easy-edit.md","raw":"title: Three things I learned from rewriting hexo-easy-edit\ncategories: javascript\ntags:\n  - hexo\n  - learning\n  - node\n  - open source\ndate: 2015-11-06 01:42:43\n---\n\n\nEarlier today I ended up rewriting [the Hexo plugin](https://github.com/greg-js/vim-tag-plugin-snippets) I wrote a couple of days ago. The reason was that I suddenly realized a better approach. And what's more: after rewriting it, it was almost child's play to add a couple of extra features and general niceties.\n\nBesides being able to edit any blog post of a Hexo blog in your editor of choice from the command line using a regular expression on the title and/or subfolder, you can now also filter on tags and plugins and open newly created posts automatically. Also, the little menu now displays your posts in chronological order :-)\n\nNow, I'm by no means an expert of course, but I'd like to jot down a couple of thoughts, because I feel like I did learn some valuable lessons from writing this [modest but actually useful plugin](https://www.npmjs.com/package/hexo-easy-edit).\n\n<!-- more -->\n\n## A few things I learned:\n\n- **Think before coding.**\nBefore the rewrite, I was constantly using the filesystem module to check folders, filter files and extensions, compare stats, etc. Then I realized I could use database queries instead! That made it so much easier to do powerful things (and using fewer callbacks and promises). In retrospect, I really should have thought things trough more before sitting down and starting to code!\n\n- **Test before pushing.**\nI know about the importance of testing, but I figured it just wasn't necessary for something as simple as this. Well, I was wrong, because I accidentally pushed out buggy versions (as well as publishing them to npm) several times. I'll definitely try to write my next project using a TDD or BDD test suite, even if it's something small.\n\n- **Just do it.**\nThose who know me may disagree but I am at heart a very insecure person. I'd been putting off putting my code online, preferring to focus on studying theory and doing practice projects. But while theory and practice are important too, I feel like the past week I've spent on GitHub may have been more educational for me than the past four months I spent studying math, Linux and algorithms.. There's a time for everything, but at some point, you really need to **just do it**.\n\n{% youtube ZXsQAXx_ao0 %}\n","slug":"three-things-i-learned-from-rewriting-hexo-easy-edit","published":1,"updated":"2015-11-21T14:07:16.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk4q003jknz987jb0xav","content":"<p>Earlier today I ended up rewriting <a href=\"https://github.com/greg-js/vim-tag-plugin-snippets\" target=\"_blank\" rel=\"external\">the Hexo plugin</a> I wrote a couple of days ago. The reason was that I suddenly realized a better approach. And what’s more: after rewriting it, it was almost child’s play to add a couple of extra features and general niceties.</p>\n<p>Besides being able to edit any blog post of a Hexo blog in your editor of choice from the command line using a regular expression on the title and/or subfolder, you can now also filter on tags and plugins and open newly created posts automatically. Also, the little menu now displays your posts in chronological order :-)</p>\n<p>Now, I’m by no means an expert of course, but I’d like to jot down a couple of thoughts, because I feel like I did learn some valuable lessons from writing this <a href=\"https://www.npmjs.com/package/hexo-easy-edit\" target=\"_blank\" rel=\"external\">modest but actually useful plugin</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"A-few-things-I-learned\"><a href=\"#A-few-things-I-learned\" class=\"headerlink\" title=\"A few things I learned:\"></a>A few things I learned:</h2><ul>\n<li><p><strong>Think before coding.</strong><br>Before the rewrite, I was constantly using the filesystem module to check folders, filter files and extensions, compare stats, etc. Then I realized I could use database queries instead! That made it so much easier to do powerful things (and using fewer callbacks and promises). In retrospect, I really should have thought things trough more before sitting down and starting to code!</p>\n</li>\n<li><p><strong>Test before pushing.</strong><br>I know about the importance of testing, but I figured it just wasn’t necessary for something as simple as this. Well, I was wrong, because I accidentally pushed out buggy versions (as well as publishing them to npm) several times. I’ll definitely try to write my next project using a TDD or BDD test suite, even if it’s something small.</p>\n</li>\n<li><p><strong>Just do it.</strong><br>Those who know me may disagree but I am at heart a very insecure person. I’d been putting off putting my code online, preferring to focus on studying theory and doing practice projects. But while theory and practice are important too, I feel like the past week I’ve spent on GitHub may have been more educational for me than the past four months I spent studying math, Linux and algorithms.. There’s a time for everything, but at some point, you really need to <strong>just do it</strong>.</p>\n</li>\n</ul>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/ZXsQAXx_ao0\" frameborder=\"0\" allowfullscreen></iframe></div>","excerpt":"<p>Earlier today I ended up rewriting <a href=\"https://github.com/greg-js/vim-tag-plugin-snippets\">the Hexo plugin</a> I wrote a couple of days ago. The reason was that I suddenly realized a better approach. And what’s more: after rewriting it, it was almost child’s play to add a couple of extra features and general niceties.</p>\n<p>Besides being able to edit any blog post of a Hexo blog in your editor of choice from the command line using a regular expression on the title and/or subfolder, you can now also filter on tags and plugins and open newly created posts automatically. Also, the little menu now displays your posts in chronological order :-)</p>\n<p>Now, I’m by no means an expert of course, but I’d like to jot down a couple of thoughts, because I feel like I did learn some valuable lessons from writing this <a href=\"https://www.npmjs.com/package/hexo-easy-edit\">modest but actually useful plugin</a>.</p>","more":"<h2 id=\"A-few-things-I-learned\"><a href=\"#A-few-things-I-learned\" class=\"headerlink\" title=\"A few things I learned:\"></a>A few things I learned:</h2><ul>\n<li><p><strong>Think before coding.</strong><br>Before the rewrite, I was constantly using the filesystem module to check folders, filter files and extensions, compare stats, etc. Then I realized I could use database queries instead! That made it so much easier to do powerful things (and using fewer callbacks and promises). In retrospect, I really should have thought things trough more before sitting down and starting to code!</p>\n</li>\n<li><p><strong>Test before pushing.</strong><br>I know about the importance of testing, but I figured it just wasn’t necessary for something as simple as this. Well, I was wrong, because I accidentally pushed out buggy versions (as well as publishing them to npm) several times. I’ll definitely try to write my next project using a TDD or BDD test suite, even if it’s something small.</p>\n</li>\n<li><p><strong>Just do it.</strong><br>Those who know me may disagree but I am at heart a very insecure person. I’d been putting off putting my code online, preferring to focus on studying theory and doing practice projects. But while theory and practice are important too, I feel like the past week I’ve spent on GitHub may have been more educational for me than the past four months I spent studying math, Linux and algorithms.. There’s a time for everything, but at some point, you really need to <strong>just do it</strong>.</p>\n</li>\n</ul>\n<div class=\"video-container\"><iframe src=\"//www.youtube.com/embed/ZXsQAXx_ao0\" frameborder=\"0\" allowfullscreen></iframe></div>"},{"title":"Writing a Fibonacci implementation in JavaScript","date":"2016-03-14T16:14:05.000Z","_content":"\nI was just looking through some of the notes I'd taken a few months ago, and became inspired to write a quick post on how to write a *good* JavaScript solution for finding the `n`th number in a Fibonacci sequence.\n\nI'm sure most of this information came right from some other blog or book, so credit really goes to wherever I originally learned these insights from, but sadly I did not include a source in my notes. Just google around if you want to know more however, because it's all over the place really.\n\nJust in case you've never heard of the [Fibonacci sequence](https://en.wikipedia.org/wiki/Fibonacci_number), it's a mathematical sequence where every number is the sum of the previous two numbers in the sequence:\n\n{% codeblock lang:plain line_number:false %}\n1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...\n{% endcodeblock %}\n\nNow, I'm not going to go over what exactly the sequence is or why it's important, not only in computer science but in all of the natural world (but trust that it is). All you need to know is that \"find the nth Fibonacci number\" is a very common - or so I'm told - interview question for programmers of all persuasions, including the JavaScript kind.\n\nThe thing with implementing this in JavaScript though, is that it is a little more involved than one might expect..\n\n<!-- more -->\n\n## The problem\n\nWrite a function that returns the `n`th Fibonacci number, (assuming that the first two numbers are 1).\n\n## A naive solution\n\nA major reason why this question appears so often in coding interviews is because answering it correctly demonstrates an understanding of a fundamental concept in programming: recursion.\n\nIn very simple terms, a recursive function is a function that calls itself, and a Fibonacci number is always the sum of the two previous Fibonacci numbers, each of which are the sums of their two previous numbers. As you can see, recursion and Fibonacci are made for each other, so here is a canonical, but naive JavaScript implementation for finding the `n`th number in the sequence:\n\n{% codeblock lang:javascript %}\nfunction fibNaive(n) {\n  if (n <= 1) {\n    return n;\n  } else {\n    return fibNaive(n - 2) + fibNaive(n - 1);\n  }\n}\n{% endcodeblock %}\n\nEvery recursive function has a **base case** (in this case, the contents of the `if (n <= 1)` block) and a **recursive step** (the contents of the `else` block). Basically, the recursive step is performed again and again, until the base case is reached. For example, if `n` is 3, then this function will return `fibNaive(2) + fibNaive(1)`, which resolves to `fibNaive(0) + fibNaive(1) + fibNaive(1)`, or `0 + 1 + 1`, which is 2. Scroll up and verify that this is indeed the correct answer.\n\nSo if this solution works, then why is it naive? Well, try finding the 40th number using this function. Takes a little while, doesn't it? Don't even think about running it on high numbers because it is terribly, terribly, terribly inefficient.\n\n## An iterative solution\n\nI'll get back to explaining why the previous implementation was lacking in a minute, but first, let's come up with a better solution by eschewing recursion and embracing iteration (note: this uses some ES6, see below for how to make it work with ES5):\n\n{% codeblock lang:javascript %}\nfunction fibIterative(n) {\n  var a = 1;\n  var b = 0;\n  while (n > 0) {\n    [a, b] = [b + a, a];\n    n--;\n  }\n  return b;\n}\n{% endcodeblock %}\n\nInstead of a recursive loop, here we are using an iterative loop to build the Fibonacci sequence. Two numbers are initialized as 1 and 0, and in every iteration of the loop, counting backwards from n to 0, the sum of the two numbers is calculated. When n reaches 0, the lower of the two numbers is returned, which resolves to the `n`th number in the sequence.\n\nWhile the naive solution above struggled with finding the solution for `n > ~45`, the iterative solution can easily get you, for example, the 200th number in the sequence in a fraction of a second. Verify for yourself that it's `2.8057117299251016e+41`! Wowzah!\n\nNow, the reason why this solution is so fast and the previous one so slow is quite simple if you think about it. Well no, in fact, it's rather complicated, but I'm just going to explain it as simple as I can.\n\n`fibIterative(5)` is a simple operation for the JS engine. For every iteration from `n == 5` to `n == 1`, it sums up `a` and `b` and subtracts 1 from `n`. But now think about `fibNaive(5)`. This becomes `fibNaive(3) + fibNaive(4)`. What the JS engine is going to do is it's going to first calculate `fibNaive(3)` by running it recursively (see above how). Then it will take that number and add it to `fibNaive(4)`.\n\nIn other words, solving this problem in the naive way results in a **giant monstrosity** of recursive loops, at every level of which the JS engine must create a new execution environment *and* remember what number to sum with what. Try visualizing the recursive tree for solving `fibNaive(10)`, and you'll immediately see how difficult it really is.\n\nBut there is hope! Read on for a **good** recursive solution, but first, I promised to give you an ES5 version of the iterative loop, so here it is. As you can see, the only thing that's different is the use of a temporary variable to replace the [array destructuring](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) of the ES6 implementation:\n\n{% codeblock lang:javascript %}\nfunction fibIterativeES5(n) {\n  var a = 1;\n  var b = 0;\n  var c = null;\n  while (n > 0) {\n    c = a;\n    a = b + a;\n    b = c;\n    n--;\n  }\n  return b;\n}\n{% endcodeblock %}\n\nAgain, this is exactly the same as the ES6 solution above, but it looks more complicated because of the temporary variable. I'm actually not a huge fan of many aspects of ES6 myself, but array/object destructuring is **definitely** one of the features I absolutely adore! It just makes things a lot easier.\n\n## A recursive solution\n\nAnd now here we are, back to the quest for the `n`th number in the Fibonacci sequence using a recursive function. Before we get to it though, I need to say a few words about [tail call optimization](http://www.2ality.com/2015/06/tail-call-optimization.html).\n\n*Tail call optimization* or *proper tail calls* is another one of the new features in ES6 that are actually really useful (though I suppose this one isn't quite as sexy as some of the more often talked about ones). Excuse my glossing over of some rather deep and sophisticated concepts, but I'm trying to keep this short, so think about a tail call as what happens when a function calls a function as its *very last* action. It's easier to explain with some examples:\n\n{% codeblock lang:javascript %}\nfunction tailCall() {\n  // stuff\n  return aFunction(); // this is a tail call\n}\n\nfunction tailCall2(a) {\n  // stuff\n  return aFunction(a); // this is a tail call\n}\n\nfunction tailCall3() {\n  // stuff\n  return aFunction() + 2; // this is NOT a tail call, because the last operation is actually adding 2\n}\n\nfunction tailCall4() {\n  // stuff\n  return aFunction() + anotherFunction(); // NOT a tail call, again the last operation is a sum\n}\n\nfunction tailCall5(a) {\n  // stuff\n  return tailCall5(a - 2) + tailCall5(a - 1); // NOT a tail call, last operation is a sum\n}\n\nfunction tailCall6(n, a, b) {\n  // stuff\n  return tailCall6(n - 1, a + b, a); // this is a tail call\n}\n{% endcodeblock %}\n\nI hope this explains what a tail call is, and why `return fibNaive(n - 2) + fibNaive(n - 1)` is not a tail call, but `return fibLoop(n - 1, a + b, a)` *is* a tail call. But why is it important?\n\nWell, as noted above, ES6 introduced *proper tail calls* or *tail call optimization*. Go read more about the how and the why elsewhere if you're interested, but suffice it to say here on this blog that it causes the JS engine (assuming it supports this particular ES6 feature) to essentially treat a recursive function more like an iterative loop **as long as you are using tail calls**. So no more creating huge amounts of execution contexts, which means that a well-implemented recursive loop using tail calls will run very quickly indeed.\n\nSo what does this proper recursive Fibonacci function look like in JavaScript? Here it is, and do note the tail call, without which it wouldn't work!\n\n{% codeblock lang:javascript %}\nfunction fibRecursive(n) {\n  return fibLoop(n, 1, 0);\n}\n\nfunction fibLoop(n, a, b) {\n  if (n === 0) {\n    return b;\n  } else {\n    return fibLoop(n - 1, a + b, a);\n  }\n}\n{% endcodeblock %}\n\nMaybe this looks a little weird at first sight, but if you look more closely, you'll find that it looks an awful lot like the iterative loop from before. `fibRecursive(n)` simply initializes the inner loop with `a = 1` and `b = 0`, and then with every iteration of the inner loop, `n` becomes `n--`, `a` becomes `a + b` and `b` becomes `a`. Upon reaching the base case (`n === 0` here), `b` gets returned, which, just like in the iterative function, resolves to the `n`th Fibonacci number. And thanks to tail call optimization, it happens in an instant!\n\n## Conclusion\n\nThe common Fibonacci interview question may at first sight appear to be a simple question designed to test your basic understanding of recursion, but a more involved answer will take you through a number of sophisticated concepts in computer science in general and JavaScript in particular.\n\nMake sure you know your stuff before you naively answer this question! As for myself, maybe I'll refer people to this post when it inevitably comes up in a future interview? Judging by its word count, it would sure save me a whole lot of talking!\n","source":"_posts/writing-a-fibonacci-implementation-in-javascript.md","raw":"title: \"Writing a Fibonacci implementation in JavaScript\"\ndate: 2016-03-14 16:14:05\ncategories: javascript\ntags:\n- js\n- tips\n- learning\n- interview\n---\n\nI was just looking through some of the notes I'd taken a few months ago, and became inspired to write a quick post on how to write a *good* JavaScript solution for finding the `n`th number in a Fibonacci sequence.\n\nI'm sure most of this information came right from some other blog or book, so credit really goes to wherever I originally learned these insights from, but sadly I did not include a source in my notes. Just google around if you want to know more however, because it's all over the place really.\n\nJust in case you've never heard of the [Fibonacci sequence](https://en.wikipedia.org/wiki/Fibonacci_number), it's a mathematical sequence where every number is the sum of the previous two numbers in the sequence:\n\n{% codeblock lang:plain line_number:false %}\n1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...\n{% endcodeblock %}\n\nNow, I'm not going to go over what exactly the sequence is or why it's important, not only in computer science but in all of the natural world (but trust that it is). All you need to know is that \"find the nth Fibonacci number\" is a very common - or so I'm told - interview question for programmers of all persuasions, including the JavaScript kind.\n\nThe thing with implementing this in JavaScript though, is that it is a little more involved than one might expect..\n\n<!-- more -->\n\n## The problem\n\nWrite a function that returns the `n`th Fibonacci number, (assuming that the first two numbers are 1).\n\n## A naive solution\n\nA major reason why this question appears so often in coding interviews is because answering it correctly demonstrates an understanding of a fundamental concept in programming: recursion.\n\nIn very simple terms, a recursive function is a function that calls itself, and a Fibonacci number is always the sum of the two previous Fibonacci numbers, each of which are the sums of their two previous numbers. As you can see, recursion and Fibonacci are made for each other, so here is a canonical, but naive JavaScript implementation for finding the `n`th number in the sequence:\n\n{% codeblock lang:javascript %}\nfunction fibNaive(n) {\n  if (n <= 1) {\n    return n;\n  } else {\n    return fibNaive(n - 2) + fibNaive(n - 1);\n  }\n}\n{% endcodeblock %}\n\nEvery recursive function has a **base case** (in this case, the contents of the `if (n <= 1)` block) and a **recursive step** (the contents of the `else` block). Basically, the recursive step is performed again and again, until the base case is reached. For example, if `n` is 3, then this function will return `fibNaive(2) + fibNaive(1)`, which resolves to `fibNaive(0) + fibNaive(1) + fibNaive(1)`, or `0 + 1 + 1`, which is 2. Scroll up and verify that this is indeed the correct answer.\n\nSo if this solution works, then why is it naive? Well, try finding the 40th number using this function. Takes a little while, doesn't it? Don't even think about running it on high numbers because it is terribly, terribly, terribly inefficient.\n\n## An iterative solution\n\nI'll get back to explaining why the previous implementation was lacking in a minute, but first, let's come up with a better solution by eschewing recursion and embracing iteration (note: this uses some ES6, see below for how to make it work with ES5):\n\n{% codeblock lang:javascript %}\nfunction fibIterative(n) {\n  var a = 1;\n  var b = 0;\n  while (n > 0) {\n    [a, b] = [b + a, a];\n    n--;\n  }\n  return b;\n}\n{% endcodeblock %}\n\nInstead of a recursive loop, here we are using an iterative loop to build the Fibonacci sequence. Two numbers are initialized as 1 and 0, and in every iteration of the loop, counting backwards from n to 0, the sum of the two numbers is calculated. When n reaches 0, the lower of the two numbers is returned, which resolves to the `n`th number in the sequence.\n\nWhile the naive solution above struggled with finding the solution for `n > ~45`, the iterative solution can easily get you, for example, the 200th number in the sequence in a fraction of a second. Verify for yourself that it's `2.8057117299251016e+41`! Wowzah!\n\nNow, the reason why this solution is so fast and the previous one so slow is quite simple if you think about it. Well no, in fact, it's rather complicated, but I'm just going to explain it as simple as I can.\n\n`fibIterative(5)` is a simple operation for the JS engine. For every iteration from `n == 5` to `n == 1`, it sums up `a` and `b` and subtracts 1 from `n`. But now think about `fibNaive(5)`. This becomes `fibNaive(3) + fibNaive(4)`. What the JS engine is going to do is it's going to first calculate `fibNaive(3)` by running it recursively (see above how). Then it will take that number and add it to `fibNaive(4)`.\n\nIn other words, solving this problem in the naive way results in a **giant monstrosity** of recursive loops, at every level of which the JS engine must create a new execution environment *and* remember what number to sum with what. Try visualizing the recursive tree for solving `fibNaive(10)`, and you'll immediately see how difficult it really is.\n\nBut there is hope! Read on for a **good** recursive solution, but first, I promised to give you an ES5 version of the iterative loop, so here it is. As you can see, the only thing that's different is the use of a temporary variable to replace the [array destructuring](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) of the ES6 implementation:\n\n{% codeblock lang:javascript %}\nfunction fibIterativeES5(n) {\n  var a = 1;\n  var b = 0;\n  var c = null;\n  while (n > 0) {\n    c = a;\n    a = b + a;\n    b = c;\n    n--;\n  }\n  return b;\n}\n{% endcodeblock %}\n\nAgain, this is exactly the same as the ES6 solution above, but it looks more complicated because of the temporary variable. I'm actually not a huge fan of many aspects of ES6 myself, but array/object destructuring is **definitely** one of the features I absolutely adore! It just makes things a lot easier.\n\n## A recursive solution\n\nAnd now here we are, back to the quest for the `n`th number in the Fibonacci sequence using a recursive function. Before we get to it though, I need to say a few words about [tail call optimization](http://www.2ality.com/2015/06/tail-call-optimization.html).\n\n*Tail call optimization* or *proper tail calls* is another one of the new features in ES6 that are actually really useful (though I suppose this one isn't quite as sexy as some of the more often talked about ones). Excuse my glossing over of some rather deep and sophisticated concepts, but I'm trying to keep this short, so think about a tail call as what happens when a function calls a function as its *very last* action. It's easier to explain with some examples:\n\n{% codeblock lang:javascript %}\nfunction tailCall() {\n  // stuff\n  return aFunction(); // this is a tail call\n}\n\nfunction tailCall2(a) {\n  // stuff\n  return aFunction(a); // this is a tail call\n}\n\nfunction tailCall3() {\n  // stuff\n  return aFunction() + 2; // this is NOT a tail call, because the last operation is actually adding 2\n}\n\nfunction tailCall4() {\n  // stuff\n  return aFunction() + anotherFunction(); // NOT a tail call, again the last operation is a sum\n}\n\nfunction tailCall5(a) {\n  // stuff\n  return tailCall5(a - 2) + tailCall5(a - 1); // NOT a tail call, last operation is a sum\n}\n\nfunction tailCall6(n, a, b) {\n  // stuff\n  return tailCall6(n - 1, a + b, a); // this is a tail call\n}\n{% endcodeblock %}\n\nI hope this explains what a tail call is, and why `return fibNaive(n - 2) + fibNaive(n - 1)` is not a tail call, but `return fibLoop(n - 1, a + b, a)` *is* a tail call. But why is it important?\n\nWell, as noted above, ES6 introduced *proper tail calls* or *tail call optimization*. Go read more about the how and the why elsewhere if you're interested, but suffice it to say here on this blog that it causes the JS engine (assuming it supports this particular ES6 feature) to essentially treat a recursive function more like an iterative loop **as long as you are using tail calls**. So no more creating huge amounts of execution contexts, which means that a well-implemented recursive loop using tail calls will run very quickly indeed.\n\nSo what does this proper recursive Fibonacci function look like in JavaScript? Here it is, and do note the tail call, without which it wouldn't work!\n\n{% codeblock lang:javascript %}\nfunction fibRecursive(n) {\n  return fibLoop(n, 1, 0);\n}\n\nfunction fibLoop(n, a, b) {\n  if (n === 0) {\n    return b;\n  } else {\n    return fibLoop(n - 1, a + b, a);\n  }\n}\n{% endcodeblock %}\n\nMaybe this looks a little weird at first sight, but if you look more closely, you'll find that it looks an awful lot like the iterative loop from before. `fibRecursive(n)` simply initializes the inner loop with `a = 1` and `b = 0`, and then with every iteration of the inner loop, `n` becomes `n--`, `a` becomes `a + b` and `b` becomes `a`. Upon reaching the base case (`n === 0` here), `b` gets returned, which, just like in the iterative function, resolves to the `n`th Fibonacci number. And thanks to tail call optimization, it happens in an instant!\n\n## Conclusion\n\nThe common Fibonacci interview question may at first sight appear to be a simple question designed to test your basic understanding of recursion, but a more involved answer will take you through a number of sophisticated concepts in computer science in general and JavaScript in particular.\n\nMake sure you know your stuff before you naively answer this question! As for myself, maybe I'll refer people to this post when it inevitably comes up in a future interview? Judging by its word count, it would sure save me a whole lot of talking!\n","slug":"writing-a-fibonacci-implementation-in-javascript","published":1,"updated":"2016-03-14T18:05:05.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciph6dk7o008rknz9cvz0g2sx","content":"<p>I was just looking through some of the notes I’d taken a few months ago, and became inspired to write a quick post on how to write a <em>good</em> JavaScript solution for finding the <code>n</code>th number in a Fibonacci sequence.</p>\n<p>I’m sure most of this information came right from some other blog or book, so credit really goes to wherever I originally learned these insights from, but sadly I did not include a source in my notes. Just google around if you want to know more however, because it’s all over the place really.</p>\n<p>Just in case you’ve never heard of the <a href=\"https://en.wikipedia.org/wiki/Fibonacci_number\" target=\"_blank\" rel=\"external\">Fibonacci sequence</a>, it’s a mathematical sequence where every number is the sum of the previous two numbers in the sequence:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...</div></pre></td></tr></table></figure>\n<p>Now, I’m not going to go over what exactly the sequence is or why it’s important, not only in computer science but in all of the natural world (but trust that it is). All you need to know is that “find the nth Fibonacci number” is a very common - or so I’m told - interview question for programmers of all persuasions, including the JavaScript kind.</p>\n<p>The thing with implementing this in JavaScript though, is that it is a little more involved than one might expect..</p>\n<a id=\"more\"></a>\n<h2 id=\"The-problem\"><a href=\"#The-problem\" class=\"headerlink\" title=\"The problem\"></a>The problem</h2><p>Write a function that returns the <code>n</code>th Fibonacci number, (assuming that the first two numbers are 1).</p>\n<h2 id=\"A-naive-solution\"><a href=\"#A-naive-solution\" class=\"headerlink\" title=\"A naive solution\"></a>A naive solution</h2><p>A major reason why this question appears so often in coding interviews is because answering it correctly demonstrates an understanding of a fundamental concept in programming: recursion.</p>\n<p>In very simple terms, a recursive function is a function that calls itself, and a Fibonacci number is always the sum of the two previous Fibonacci numbers, each of which are the sums of their two previous numbers. As you can see, recursion and Fibonacci are made for each other, so here is a canonical, but naive JavaScript implementation for finding the <code>n</code>th number in the sequence:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibNaive</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> n;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fibNaive(n - <span class=\"number\">2</span>) + fibNaive(n - <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Every recursive function has a <strong>base case</strong> (in this case, the contents of the <code>if (n &lt;= 1)</code> block) and a <strong>recursive step</strong> (the contents of the <code>else</code> block). Basically, the recursive step is performed again and again, until the base case is reached. For example, if <code>n</code> is 3, then this function will return <code>fibNaive(2) + fibNaive(1)</code>, which resolves to <code>fibNaive(0) + fibNaive(1) + fibNaive(1)</code>, or <code>0 + 1 + 1</code>, which is 2. Scroll up and verify that this is indeed the correct answer.</p>\n<p>So if this solution works, then why is it naive? Well, try finding the 40th number using this function. Takes a little while, doesn’t it? Don’t even think about running it on high numbers because it is terribly, terribly, terribly inefficient.</p>\n<h2 id=\"An-iterative-solution\"><a href=\"#An-iterative-solution\" class=\"headerlink\" title=\"An iterative solution\"></a>An iterative solution</h2><p>I’ll get back to explaining why the previous implementation was lacking in a minute, but first, let’s come up with a better solution by eschewing recursion and embracing iteration (note: this uses some ES6, see below for how to make it work with ES5):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibIterative</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    [a, b] = [b + a, a];</div><div class=\"line\">    n--;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Instead of a recursive loop, here we are using an iterative loop to build the Fibonacci sequence. Two numbers are initialized as 1 and 0, and in every iteration of the loop, counting backwards from n to 0, the sum of the two numbers is calculated. When n reaches 0, the lower of the two numbers is returned, which resolves to the <code>n</code>th number in the sequence.</p>\n<p>While the naive solution above struggled with finding the solution for <code>n &gt; ~45</code>, the iterative solution can easily get you, for example, the 200th number in the sequence in a fraction of a second. Verify for yourself that it’s <code>2.8057117299251016e+41</code>! Wowzah!</p>\n<p>Now, the reason why this solution is so fast and the previous one so slow is quite simple if you think about it. Well no, in fact, it’s rather complicated, but I’m just going to explain it as simple as I can.</p>\n<p><code>fibIterative(5)</code> is a simple operation for the JS engine. For every iteration from <code>n == 5</code> to <code>n == 1</code>, it sums up <code>a</code> and <code>b</code> and subtracts 1 from <code>n</code>. But now think about <code>fibNaive(5)</code>. This becomes <code>fibNaive(3) + fibNaive(4)</code>. What the JS engine is going to do is it’s going to first calculate <code>fibNaive(3)</code> by running it recursively (see above how). Then it will take that number and add it to <code>fibNaive(4)</code>.</p>\n<p>In other words, solving this problem in the naive way results in a <strong>giant monstrosity</strong> of recursive loops, at every level of which the JS engine must create a new execution environment <em>and</em> remember what number to sum with what. Try visualizing the recursive tree for solving <code>fibNaive(10)</code>, and you’ll immediately see how difficult it really is.</p>\n<p>But there is hope! Read on for a <strong>good</strong> recursive solution, but first, I promised to give you an ES5 version of the iterative loop, so here it is. As you can see, the only thing that’s different is the use of a temporary variable to replace the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" target=\"_blank\" rel=\"external\">array destructuring</a> of the ES6 implementation:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibIterativeES5</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"literal\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    c = a;</div><div class=\"line\">    a = b + a;</div><div class=\"line\">    b = c;</div><div class=\"line\">    n--;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Again, this is exactly the same as the ES6 solution above, but it looks more complicated because of the temporary variable. I’m actually not a huge fan of many aspects of ES6 myself, but array/object destructuring is <strong>definitely</strong> one of the features I absolutely adore! It just makes things a lot easier.</p>\n<h2 id=\"A-recursive-solution\"><a href=\"#A-recursive-solution\" class=\"headerlink\" title=\"A recursive solution\"></a>A recursive solution</h2><p>And now here we are, back to the quest for the <code>n</code>th number in the Fibonacci sequence using a recursive function. Before we get to it though, I need to say a few words about <a href=\"http://www.2ality.com/2015/06/tail-call-optimization.html\" target=\"_blank\" rel=\"external\">tail call optimization</a>.</p>\n<p><em>Tail call optimization</em> or <em>proper tail calls</em> is another one of the new features in ES6 that are actually really useful (though I suppose this one isn’t quite as sexy as some of the more often talked about ones). Excuse my glossing over of some rather deep and sophisticated concepts, but I’m trying to keep this short, so think about a tail call as what happens when a function calls a function as its <em>very last</em> action. It’s easier to explain with some examples:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailCall</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// stuff</span></div><div class=\"line\">  <span class=\"keyword\">return</span> aFunction(); <span class=\"comment\">// this is a tail call</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailCall2</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// stuff</span></div><div class=\"line\">  <span class=\"keyword\">return</span> aFunction(a); <span class=\"comment\">// this is a tail call</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailCall3</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// stuff</span></div><div class=\"line\">  <span class=\"keyword\">return</span> aFunction() + <span class=\"number\">2</span>; <span class=\"comment\">// this is NOT a tail call, because the last operation is actually adding 2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailCall4</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// stuff</span></div><div class=\"line\">  <span class=\"keyword\">return</span> aFunction() + anotherFunction(); <span class=\"comment\">// NOT a tail call, again the last operation is a sum</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailCall5</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// stuff</span></div><div class=\"line\">  <span class=\"keyword\">return</span> tailCall5(a - <span class=\"number\">2</span>) + tailCall5(a - <span class=\"number\">1</span>); <span class=\"comment\">// NOT a tail call, last operation is a sum</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailCall6</span>(<span class=\"params\">n, a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// stuff</span></div><div class=\"line\">  <span class=\"keyword\">return</span> tailCall6(n - <span class=\"number\">1</span>, a + b, a); <span class=\"comment\">// this is a tail call</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>I hope this explains what a tail call is, and why <code>return fibNaive(n - 2) + fibNaive(n - 1)</code> is not a tail call, but <code>return fibLoop(n - 1, a + b, a)</code> <em>is</em> a tail call. But why is it important?</p>\n<p>Well, as noted above, ES6 introduced <em>proper tail calls</em> or <em>tail call optimization</em>. Go read more about the how and the why elsewhere if you’re interested, but suffice it to say here on this blog that it causes the JS engine (assuming it supports this particular ES6 feature) to essentially treat a recursive function more like an iterative loop <strong>as long as you are using tail calls</strong>. So no more creating huge amounts of execution contexts, which means that a well-implemented recursive loop using tail calls will run very quickly indeed.</p>\n<p>So what does this proper recursive Fibonacci function look like in JavaScript? Here it is, and do note the tail call, without which it wouldn’t work!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibRecursive</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> fibLoop(n, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibLoop</span>(<span class=\"params\">n, a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> b;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fibLoop(n - <span class=\"number\">1</span>, a + b, a);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Maybe this looks a little weird at first sight, but if you look more closely, you’ll find that it looks an awful lot like the iterative loop from before. <code>fibRecursive(n)</code> simply initializes the inner loop with <code>a = 1</code> and <code>b = 0</code>, and then with every iteration of the inner loop, <code>n</code> becomes <code>n--</code>, <code>a</code> becomes <code>a + b</code> and <code>b</code> becomes <code>a</code>. Upon reaching the base case (<code>n === 0</code> here), <code>b</code> gets returned, which, just like in the iterative function, resolves to the <code>n</code>th Fibonacci number. And thanks to tail call optimization, it happens in an instant!</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>The common Fibonacci interview question may at first sight appear to be a simple question designed to test your basic understanding of recursion, but a more involved answer will take you through a number of sophisticated concepts in computer science in general and JavaScript in particular.</p>\n<p>Make sure you know your stuff before you naively answer this question! As for myself, maybe I’ll refer people to this post when it inevitably comes up in a future interview? Judging by its word count, it would sure save me a whole lot of talking!</p>","excerpt":"<p>I was just looking through some of the notes I’d taken a few months ago, and became inspired to write a quick post on how to write a <em>good</em> JavaScript solution for finding the <code>n</code>th number in a Fibonacci sequence.</p>\n<p>I’m sure most of this information came right from some other blog or book, so credit really goes to wherever I originally learned these insights from, but sadly I did not include a source in my notes. Just google around if you want to know more however, because it’s all over the place really.</p>\n<p>Just in case you’ve never heard of the <a href=\"https://en.wikipedia.org/wiki/Fibonacci_number\">Fibonacci sequence</a>, it’s a mathematical sequence where every number is the sum of the previous two numbers in the sequence:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...</div></pre></td></tr></table></figure>\n<p>Now, I’m not going to go over what exactly the sequence is or why it’s important, not only in computer science but in all of the natural world (but trust that it is). All you need to know is that “find the nth Fibonacci number” is a very common - or so I’m told - interview question for programmers of all persuasions, including the JavaScript kind.</p>\n<p>The thing with implementing this in JavaScript though, is that it is a little more involved than one might expect..</p>","more":"<h2 id=\"The-problem\"><a href=\"#The-problem\" class=\"headerlink\" title=\"The problem\"></a>The problem</h2><p>Write a function that returns the <code>n</code>th Fibonacci number, (assuming that the first two numbers are 1).</p>\n<h2 id=\"A-naive-solution\"><a href=\"#A-naive-solution\" class=\"headerlink\" title=\"A naive solution\"></a>A naive solution</h2><p>A major reason why this question appears so often in coding interviews is because answering it correctly demonstrates an understanding of a fundamental concept in programming: recursion.</p>\n<p>In very simple terms, a recursive function is a function that calls itself, and a Fibonacci number is always the sum of the two previous Fibonacci numbers, each of which are the sums of their two previous numbers. As you can see, recursion and Fibonacci are made for each other, so here is a canonical, but naive JavaScript implementation for finding the <code>n</code>th number in the sequence:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibNaive</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> n;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fibNaive(n - <span class=\"number\">2</span>) + fibNaive(n - <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Every recursive function has a <strong>base case</strong> (in this case, the contents of the <code>if (n &lt;= 1)</code> block) and a <strong>recursive step</strong> (the contents of the <code>else</code> block). Basically, the recursive step is performed again and again, until the base case is reached. For example, if <code>n</code> is 3, then this function will return <code>fibNaive(2) + fibNaive(1)</code>, which resolves to <code>fibNaive(0) + fibNaive(1) + fibNaive(1)</code>, or <code>0 + 1 + 1</code>, which is 2. Scroll up and verify that this is indeed the correct answer.</p>\n<p>So if this solution works, then why is it naive? Well, try finding the 40th number using this function. Takes a little while, doesn’t it? Don’t even think about running it on high numbers because it is terribly, terribly, terribly inefficient.</p>\n<h2 id=\"An-iterative-solution\"><a href=\"#An-iterative-solution\" class=\"headerlink\" title=\"An iterative solution\"></a>An iterative solution</h2><p>I’ll get back to explaining why the previous implementation was lacking in a minute, but first, let’s come up with a better solution by eschewing recursion and embracing iteration (note: this uses some ES6, see below for how to make it work with ES5):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibIterative</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    [a, b] = [b + a, a];</div><div class=\"line\">    n--;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Instead of a recursive loop, here we are using an iterative loop to build the Fibonacci sequence. Two numbers are initialized as 1 and 0, and in every iteration of the loop, counting backwards from n to 0, the sum of the two numbers is calculated. When n reaches 0, the lower of the two numbers is returned, which resolves to the <code>n</code>th number in the sequence.</p>\n<p>While the naive solution above struggled with finding the solution for <code>n &gt; ~45</code>, the iterative solution can easily get you, for example, the 200th number in the sequence in a fraction of a second. Verify for yourself that it’s <code>2.8057117299251016e+41</code>! Wowzah!</p>\n<p>Now, the reason why this solution is so fast and the previous one so slow is quite simple if you think about it. Well no, in fact, it’s rather complicated, but I’m just going to explain it as simple as I can.</p>\n<p><code>fibIterative(5)</code> is a simple operation for the JS engine. For every iteration from <code>n == 5</code> to <code>n == 1</code>, it sums up <code>a</code> and <code>b</code> and subtracts 1 from <code>n</code>. But now think about <code>fibNaive(5)</code>. This becomes <code>fibNaive(3) + fibNaive(4)</code>. What the JS engine is going to do is it’s going to first calculate <code>fibNaive(3)</code> by running it recursively (see above how). Then it will take that number and add it to <code>fibNaive(4)</code>.</p>\n<p>In other words, solving this problem in the naive way results in a <strong>giant monstrosity</strong> of recursive loops, at every level of which the JS engine must create a new execution environment <em>and</em> remember what number to sum with what. Try visualizing the recursive tree for solving <code>fibNaive(10)</code>, and you’ll immediately see how difficult it really is.</p>\n<p>But there is hope! Read on for a <strong>good</strong> recursive solution, but first, I promised to give you an ES5 version of the iterative loop, so here it is. As you can see, the only thing that’s different is the use of a temporary variable to replace the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">array destructuring</a> of the ES6 implementation:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibIterativeES5</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"literal\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    c = a;</div><div class=\"line\">    a = b + a;</div><div class=\"line\">    b = c;</div><div class=\"line\">    n--;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Again, this is exactly the same as the ES6 solution above, but it looks more complicated because of the temporary variable. I’m actually not a huge fan of many aspects of ES6 myself, but array/object destructuring is <strong>definitely</strong> one of the features I absolutely adore! It just makes things a lot easier.</p>\n<h2 id=\"A-recursive-solution\"><a href=\"#A-recursive-solution\" class=\"headerlink\" title=\"A recursive solution\"></a>A recursive solution</h2><p>And now here we are, back to the quest for the <code>n</code>th number in the Fibonacci sequence using a recursive function. Before we get to it though, I need to say a few words about <a href=\"http://www.2ality.com/2015/06/tail-call-optimization.html\">tail call optimization</a>.</p>\n<p><em>Tail call optimization</em> or <em>proper tail calls</em> is another one of the new features in ES6 that are actually really useful (though I suppose this one isn’t quite as sexy as some of the more often talked about ones). Excuse my glossing over of some rather deep and sophisticated concepts, but I’m trying to keep this short, so think about a tail call as what happens when a function calls a function as its <em>very last</em> action. It’s easier to explain with some examples:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailCall</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// stuff</span></div><div class=\"line\">  <span class=\"keyword\">return</span> aFunction(); <span class=\"comment\">// this is a tail call</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailCall2</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// stuff</span></div><div class=\"line\">  <span class=\"keyword\">return</span> aFunction(a); <span class=\"comment\">// this is a tail call</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailCall3</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// stuff</span></div><div class=\"line\">  <span class=\"keyword\">return</span> aFunction() + <span class=\"number\">2</span>; <span class=\"comment\">// this is NOT a tail call, because the last operation is actually adding 2</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailCall4</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// stuff</span></div><div class=\"line\">  <span class=\"keyword\">return</span> aFunction() + anotherFunction(); <span class=\"comment\">// NOT a tail call, again the last operation is a sum</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailCall5</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// stuff</span></div><div class=\"line\">  <span class=\"keyword\">return</span> tailCall5(a - <span class=\"number\">2</span>) + tailCall5(a - <span class=\"number\">1</span>); <span class=\"comment\">// NOT a tail call, last operation is a sum</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tailCall6</span>(<span class=\"params\">n, a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// stuff</span></div><div class=\"line\">  <span class=\"keyword\">return</span> tailCall6(n - <span class=\"number\">1</span>, a + b, a); <span class=\"comment\">// this is a tail call</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>I hope this explains what a tail call is, and why <code>return fibNaive(n - 2) + fibNaive(n - 1)</code> is not a tail call, but <code>return fibLoop(n - 1, a + b, a)</code> <em>is</em> a tail call. But why is it important?</p>\n<p>Well, as noted above, ES6 introduced <em>proper tail calls</em> or <em>tail call optimization</em>. Go read more about the how and the why elsewhere if you’re interested, but suffice it to say here on this blog that it causes the JS engine (assuming it supports this particular ES6 feature) to essentially treat a recursive function more like an iterative loop <strong>as long as you are using tail calls</strong>. So no more creating huge amounts of execution contexts, which means that a well-implemented recursive loop using tail calls will run very quickly indeed.</p>\n<p>So what does this proper recursive Fibonacci function look like in JavaScript? Here it is, and do note the tail call, without which it wouldn’t work!</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibRecursive</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> fibLoop(n, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibLoop</span>(<span class=\"params\">n, a, b</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> b;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fibLoop(n - <span class=\"number\">1</span>, a + b, a);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Maybe this looks a little weird at first sight, but if you look more closely, you’ll find that it looks an awful lot like the iterative loop from before. <code>fibRecursive(n)</code> simply initializes the inner loop with <code>a = 1</code> and <code>b = 0</code>, and then with every iteration of the inner loop, <code>n</code> becomes <code>n--</code>, <code>a</code> becomes <code>a + b</code> and <code>b</code> becomes <code>a</code>. Upon reaching the base case (<code>n === 0</code> here), <code>b</code> gets returned, which, just like in the iterative function, resolves to the <code>n</code>th Fibonacci number. And thanks to tail call optimization, it happens in an instant!</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>The common Fibonacci interview question may at first sight appear to be a simple question designed to test your basic understanding of recursion, but a more involved answer will take you through a number of sophisticated concepts in computer science in general and JavaScript in particular.</p>\n<p>Make sure you know your stuff before you naively answer this question! As for myself, maybe I’ll refer people to this post when it inevitably comes up in a future interview? Judging by its word count, it would sure save me a whole lot of talking!</p>"}],"PostAsset":[{"_id":"source/_posts/richard-stallman-on-piracy/gnu.png","slug":"gnu.png","post":"ciph6dk4j0035knz9k7f233po","modified":1,"renderable":0},{"_id":"source/_posts/asynchronous-tests-in-mocha-using-before-and-after-blocks/screen.png","post":"ciph6dk1p0007knz9u0o62eq8","slug":"screen.png","modified":1,"renderable":1},{"_id":"source/_posts/command-line-mdn-or-how-to-make-a-great-thing-even-greater/example.gif","post":"ciph6dk1y000eknz9iafg6qyn","slug":"example.gif","modified":1,"renderable":1},{"_id":"source/_posts/checking-whether-a-file-directory-exists-without-using-fs-exists/nodejs-new-pantone-black.png","post":"ciph6dk23000iknz9fwdx8x2t","slug":"nodejs-new-pantone-black.png","modified":1,"renderable":1},{"_id":"source/_posts/do-yourself-a-favor-and-modularize-your-vimrc-init-vim/tools.jpg","post":"ciph6dk2d000qknz9wxhi48j4","slug":"tools.jpg","modified":1,"renderable":1},{"_id":"source/_posts/hexo-easy-edit-1-1-0-colors-drafts-and-dates/screen.png","post":"ciph6dk2p0015knz9hpd9q552","slug":"screen.png","modified":1,"renderable":1},{"_id":"source/_posts/hexo-tag-plugin-snippets-for-everyone/screenshot.png","post":"ciph6dk2x001dknz916kwc210","slug":"screenshot.png","modified":1,"renderable":1},{"_id":"source/_posts/forwarding-mail-to-your-gmail-account-with-mailgun/DO.logo.png","post":"ciph6dk32001gknz93s5d8faw","slug":"DO.logo.png","modified":1,"renderable":1},{"_id":"source/_posts/how-to-set-up-mailgun-on-digital-ocean/mailgun.png","post":"ciph6dk38001lknz9lh89gb3j","slug":"mailgun.png","modified":1,"renderable":1},{"_id":"source/_posts/huge-arch-update/arch-update.png","post":"ciph6dk3h001tknz9pvgmc7z2","slug":"arch-update.png","modified":1,"renderable":1},{"_id":"source/_posts/i-wrote-a-hexo-plugin-hexo-easy-edit/hexo-easy-edit.png","post":"ciph6dk3n001yknz9ky5xqyzu","slug":"hexo-easy-edit.png","modified":1,"renderable":1},{"_id":"source/_posts/kyle-simpson-s-advanced-javascript-course/You-dont-know-JS.png","post":"ciph6dk3o0021knz9yv0zhp7l","slug":"You-dont-know-JS.png","modified":1,"renderable":1},{"_id":"source/_posts/lint-as-you-type-with-neovim-and-neomake/autocmd.png","post":"ciph6dk3r0025knz9fbccgu2v","slug":"autocmd.png","modified":1,"renderable":1},{"_id":"source/_posts/linting-code-with-neomake-and-neovim/neomake_example.png","post":"ciph6dk42002hknz9bdleq372","slug":"neomake_example.png","modified":1,"renderable":1},{"_id":"source/_posts/quick-command-line-tips-and-tricks2-finding-and-processing-files/commandline.png","post":"ciph6dk4h0033knz9e66x0she","slug":"commandline.png","modified":1,"renderable":1},{"_id":"source/_posts/the-new-on-github-blues-and-my-new-project-local-command-line-arch-wiki/think.jpg","post":"ciph6dk4n003cknz90fybnnjz","slug":"think.jpg","modified":1,"renderable":1},{"_id":"source/_posts/fixing-the-reappearing-folders-problem-in-your-home-directory/my-home-dir.png","post":"ciph6dk2h000xknz9emjh83rd","slug":"my-home-dir.png","modified":1,"renderable":1},{"_id":"source/_posts/fixing-the-reappearing-folders-problem-in-your-home-directory/user-dirs.dirs.png","post":"ciph6dk2h000xknz9emjh83rd","slug":"user-dirs.dirs.png","modified":1,"renderable":1},{"_id":"source/_posts/playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process/mpv.jpg","post":"ciph6dk4e002zknz9ppvh4me0","slug":"mpv.jpg","modified":1,"renderable":1},{"_id":"source/_posts/playing-videos-with-mpv-and-a-wrapper-for-immediately-disowning-a-process/mpv.website.jpg","post":"ciph6dk4e002zknz9ppvh4me0","slug":"mpv.website.jpg","modified":1,"renderable":1},{"_id":"source/_posts/awman-arch-wiki-man-man-the-arch-wiki-offline/helpscreen.png","post":"ciph6dk1w000cknz90myt7vjj","slug":"helpscreen.png","modified":1,"renderable":1},{"_id":"source/_posts/awman-arch-wiki-man-man-the-arch-wiki-offline/manscreen.png","post":"ciph6dk1w000cknz90myt7vjj","slug":"manscreen.png","modified":1,"renderable":1},{"_id":"source/_posts/awman-arch-wiki-man-man-the-arch-wiki-offline/menu.png","post":"ciph6dk1w000cknz90myt7vjj","slug":"menu.png","modified":1,"renderable":1},{"_id":"source/_posts/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/autocompletion.png","post":"ciph6dk2c000oknz9sej65wti","slug":"autocompletion.png","modified":1,"renderable":1},{"_id":"source/_posts/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/autotern.png","post":"ciph6dk2c000oknz9sej65wti","slug":"autotern.png","modified":1,"renderable":1},{"_id":"source/_posts/configuring-the-deoplete-asynchronous-keyword-completion-plugin-with-tern-for-vim/beautiful.png","post":"ciph6dk2c000oknz9sej65wti","slug":"beautiful.png","modified":1,"renderable":1},{"_id":"source/_posts/how-to-rename-a-published-npm-module/broken.jpg","post":"ciph6dk36001jknz9j3jusvwz","slug":"broken.jpg","modified":1,"renderable":1},{"_id":"source/_posts/how-to-rename-a-published-npm-module/communicate.jpg","post":"ciph6dk36001jknz9j3jusvwz","slug":"communicate.jpg","modified":1,"renderable":1},{"_id":"source/_posts/how-to-rename-a-published-npm-module/npm-logo.svg","post":"ciph6dk36001jknz9j3jusvwz","slug":"npm-logo.svg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ciph6dk1r0008knz95ze31gy5","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk1y000dknz94g2y8td5"},{"post_id":"ciph6dk1d0002knz9rp5whtix","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk22000hknz9phfmpe4z"},{"post_id":"ciph6dk1w000cknz90myt7vjj","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk25000jknz9e2yd52xh"},{"post_id":"ciph6dk1k0004knz9qdf0i441","category_id":"ciph6dk1v000bknz9qilwaev3","_id":"ciph6dk2c000nknz9yur3befz"},{"post_id":"ciph6dk1y000eknz9iafg6qyn","category_id":"ciph6dk1v000bknz9qilwaev3","_id":"ciph6dk2d000pknz9cv6epf8a"},{"post_id":"ciph6dk23000iknz9fwdx8x2t","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk2f000tknz923zchxef"},{"post_id":"ciph6dk1p0007knz9u0o62eq8","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk2g000wknz9cwqmqr0s"},{"post_id":"ciph6dk1t000aknz9af838m32","category_id":"ciph6dk28000lknz917phpsy0","_id":"ciph6dk2i000zknz96ra5cu2w"},{"post_id":"ciph6dk2f000uknz96520o3sx","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk2o0014knz9sdufcj88"},{"post_id":"ciph6dk25000kknz9d6ooe9nu","category_id":"ciph6dk2f000rknz9mj04w41e","_id":"ciph6dk2s0017knz9rhe83gkg"},{"post_id":"ciph6dk2h000xknz9emjh83rd","category_id":"ciph6dk1v000bknz9qilwaev3","_id":"ciph6dk2x001bknz97kuwqvht"},{"post_id":"ciph6dk2j0012knz9ikxwho3l","category_id":"ciph6dk1v000bknz9qilwaev3","_id":"ciph6dk32001eknz9o2wmbyi2"},{"post_id":"ciph6dk2c000oknz9sej65wti","category_id":"ciph6dk2f000rknz9mj04w41e","_id":"ciph6dk36001iknz96s9ezdw2"},{"post_id":"ciph6dk2p0015knz9hpd9q552","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk38001kknz9y885873w"},{"post_id":"ciph6dk2t0019knz9ovuyltnr","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk3a001nknz9754zqn9h"},{"post_id":"ciph6dk2d000qknz9wxhi48j4","category_id":"ciph6dk2f000rknz9mj04w41e","_id":"ciph6dk3b001pknz9yfp0mnph"},{"post_id":"ciph6dk2x001dknz916kwc210","category_id":"ciph6dk2f000rknz9mj04w41e","_id":"ciph6dk3h001sknz9c76lhgwn"},{"post_id":"ciph6dk32001gknz93s5d8faw","category_id":"ciph6dk1v000bknz9qilwaev3","_id":"ciph6dk3j001uknz9kwurarro"},{"post_id":"ciph6dk36001jknz9j3jusvwz","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk3l001xknz9jck3lkq0"},{"post_id":"ciph6dk38001lknz9lh89gb3j","category_id":"ciph6dk1v000bknz9qilwaev3","_id":"ciph6dk3o0020knz93tu71nj1"},{"post_id":"ciph6dk3a001oknz9pws6leof","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk3r0024knz97gaziydm"},{"post_id":"ciph6dk3c001qknz9jyknjj2r","category_id":"ciph6dk1v000bknz9qilwaev3","_id":"ciph6dk3t0027knz9mjix2v6m"},{"post_id":"ciph6dk3h001tknz9pvgmc7z2","category_id":"ciph6dk1v000bknz9qilwaev3","_id":"ciph6dk3w002bknz9sumqe84w"},{"post_id":"ciph6dk3j001vknz9xv5loc1p","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk3z002dknz9o2mvzgsc"},{"post_id":"ciph6dk3n001yknz9ky5xqyzu","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk42002fknz9fbpup54i"},{"post_id":"ciph6dk3o0021knz9yv0zhp7l","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk44002iknz9sierjezy"},{"post_id":"ciph6dk3r0025knz9fbccgu2v","category_id":"ciph6dk2f000rknz9mj04w41e","_id":"ciph6dk47002kknz9xklpv3my"},{"post_id":"ciph6dk3u0028knz9njpe6n0q","category_id":"ciph6dk1v000bknz9qilwaev3","_id":"ciph6dk48002nknz9xm7cagsl"},{"post_id":"ciph6dk3w002cknz9zxr4nuit","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk4a002qknz96ah5j6nv"},{"post_id":"ciph6dk41002eknz98j7jt414","category_id":"ciph6dk2f000rknz9mj04w41e","_id":"ciph6dk4c002uknz9xl1nm8cm"},{"post_id":"ciph6dk42002hknz9bdleq372","category_id":"ciph6dk2f000rknz9mj04w41e","_id":"ciph6dk4d002xknz9ldlbqc4j"},{"post_id":"ciph6dk45002jknz9jg4zsghx","category_id":"ciph6dk2f000rknz9mj04w41e","_id":"ciph6dk4h0031knz9dbexqgkb"},{"post_id":"ciph6dk47002lknz9zetlwd86","category_id":"ciph6dk1v000bknz9qilwaev3","_id":"ciph6dk4j0034knz9pdqjtcej"},{"post_id":"ciph6dk49002pknz91e7w2no1","category_id":"ciph6dk28000lknz917phpsy0","_id":"ciph6dk4l0038knz9o5kzvwk9"},{"post_id":"ciph6dk4a002sknz9ishrkps1","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk4n003bknz9k98ji8hx"},{"post_id":"ciph6dk4c002wknz9wwk7mddn","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk4o003fknz921rhco08"},{"post_id":"ciph6dk4e002zknz9ppvh4me0","category_id":"ciph6dk1v000bknz9qilwaev3","_id":"ciph6dk4q003iknz9woospcsk"},{"post_id":"ciph6dk4h0033knz9e66x0she","category_id":"ciph6dk1v000bknz9qilwaev3","_id":"ciph6dk4s003mknz9llbzxlds"},{"post_id":"ciph6dk4j0035knz9k7f233po","category_id":"ciph6dk28000lknz917phpsy0","_id":"ciph6dk4u003oknz9fk3fv7x9"},{"post_id":"ciph6dk4l0039knz9fm7oy4lm","category_id":"ciph6dk28000lknz917phpsy0","_id":"ciph6dk4u003rknz9ybn8fsky"},{"post_id":"ciph6dk4n003cknz90fybnnjz","category_id":"ciph6dk28000lknz917phpsy0","_id":"ciph6dk4v003tknz9tf4rqgo3"},{"post_id":"ciph6dk4o003gknz9pzsz16z4","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk4v003wknz9xoxjvupi"},{"post_id":"ciph6dk4q003jknz987jb0xav","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk4v003yknz94o3iiuwp"},{"post_id":"ciph6dk7o008rknz9cvz0g2sx","category_id":"ciph6dk1o0006knz9xgbwr2cw","_id":"ciph6dk7r008tknz9lynqhzte"}],"PostTag":[{"post_id":"ciph6dk1d0002knz9rp5whtix","tag_id":"ciph6dk1m0005knz9euorz8ci","_id":"ciph6dk2g000vknz9obtblccp"},{"post_id":"ciph6dk1d0002knz9rp5whtix","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk2i000yknz965yg50j7"},{"post_id":"ciph6dk1d0002knz9rp5whtix","tag_id":"ciph6dk21000fknz9c1ybk6fp","_id":"ciph6dk2o0013knz9kzjxy9px"},{"post_id":"ciph6dk1d0002knz9rp5whtix","tag_id":"ciph6dk2a000mknz9mi5bbaii","_id":"ciph6dk2r0016knz9dout2nnk"},{"post_id":"ciph6dk1k0004knz9qdf0i441","tag_id":"ciph6dk2f000sknz9almc74ap","_id":"ciph6dk2x001cknz9h34vb8fg"},{"post_id":"ciph6dk1k0004knz9qdf0i441","tag_id":"ciph6dk2j0011knz96pkbd671","_id":"ciph6dk32001fknz9qw94o4s8"},{"post_id":"ciph6dk1p0007knz9u0o62eq8","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk3o001zknz99vnwre17"},{"post_id":"ciph6dk1p0007knz9u0o62eq8","tag_id":"ciph6dk36001hknz99bghseqb","_id":"ciph6dk3q0022knz9q2zmqtfs"},{"post_id":"ciph6dk1p0007knz9u0o62eq8","tag_id":"ciph6dk1m0005knz9euorz8ci","_id":"ciph6dk3t0026knz9heg7wnok"},{"post_id":"ciph6dk1p0007knz9u0o62eq8","tag_id":"ciph6dk2a000mknz9mi5bbaii","_id":"ciph6dk3v0029knz99t2408jz"},{"post_id":"ciph6dk1r0008knz95ze31gy5","tag_id":"ciph6dk3k001wknz9gvbc3ash","_id":"ciph6dk49002oknz9jeyg5xl1"},{"post_id":"ciph6dk1r0008knz95ze31gy5","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk4a002rknz9stf0k23x"},{"post_id":"ciph6dk1r0008knz95ze31gy5","tag_id":"ciph6dk3w002aknz9836s7qma","_id":"ciph6dk4c002vknz9iefvkc14"},{"post_id":"ciph6dk1r0008knz95ze31gy5","tag_id":"ciph6dk42002gknz9v7op07zz","_id":"ciph6dk4d002yknz9cfdvexew"},{"post_id":"ciph6dk1t000aknz9af838m32","tag_id":"ciph6dk48002mknz9skcy2wth","_id":"ciph6dk4h0032knz9zg5vy08n"},{"post_id":"ciph6dk4h0033knz9e66x0she","tag_id":"ciph6dk2f000sknz9almc74ap","_id":"ciph6dk4l0037knz9wx1szeum"},{"post_id":"ciph6dk4h0033knz9e66x0she","tag_id":"ciph6dk2j0011knz96pkbd671","_id":"ciph6dk4m003aknz9fscgjlhc"},{"post_id":"ciph6dk1w000cknz90myt7vjj","tag_id":"ciph6dk3k001wknz9gvbc3ash","_id":"ciph6dk4o003eknz98rtd2ss6"},{"post_id":"ciph6dk1w000cknz90myt7vjj","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk4p003hknz9qvzkiphs"},{"post_id":"ciph6dk1w000cknz90myt7vjj","tag_id":"ciph6dk3w002aknz9836s7qma","_id":"ciph6dk4s003lknz9sqfvb2ge"},{"post_id":"ciph6dk4l0039knz9fm7oy4lm","tag_id":"ciph6dk48002mknz9skcy2wth","_id":"ciph6dk4t003nknz9xkm682ym"},{"post_id":"ciph6dk4n003cknz90fybnnjz","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk4u003pknz90muoxhzc"},{"post_id":"ciph6dk4n003cknz90fybnnjz","tag_id":"ciph6dk3k001wknz9gvbc3ash","_id":"ciph6dk4v003sknz9rcf5b5m5"},{"post_id":"ciph6dk4n003cknz90fybnnjz","tag_id":"ciph6dk42002gknz9v7op07zz","_id":"ciph6dk4v003uknz9rft6gnb0"},{"post_id":"ciph6dk4o003gknz9pzsz16z4","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk4v003xknz90gk0sy1l"},{"post_id":"ciph6dk4o003gknz9pzsz16z4","tag_id":"ciph6dk2a000mknz9mi5bbaii","_id":"ciph6dk4w003zknz9zeecabuf"},{"post_id":"ciph6dk4o003gknz9pzsz16z4","tag_id":"ciph6dk21000fknz9c1ybk6fp","_id":"ciph6dk4x0041knz9dmpf9pu7"},{"post_id":"ciph6dk4o003gknz9pzsz16z4","tag_id":"ciph6dk1m0005knz9euorz8ci","_id":"ciph6dk4y0042knz9p8zezs5a"},{"post_id":"ciph6dk1y000eknz9iafg6qyn","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk5c0044knz9rozacksi"},{"post_id":"ciph6dk1y000eknz9iafg6qyn","tag_id":"ciph6dk2a000mknz9mi5bbaii","_id":"ciph6dk5d0045knz99o5uhciw"},{"post_id":"ciph6dk1y000eknz9iafg6qyn","tag_id":"ciph6dk3k001wknz9gvbc3ash","_id":"ciph6dk5d0047knz9cwi5k8bq"},{"post_id":"ciph6dk1y000eknz9iafg6qyn","tag_id":"ciph6dk4s003kknz96cfirewf","_id":"ciph6dk5d0048knz98vz2odhb"},{"post_id":"ciph6dk23000iknz9fwdx8x2t","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk5d0049knz917xktv35"},{"post_id":"ciph6dk23000iknz9fwdx8x2t","tag_id":"ciph6dk2a000mknz9mi5bbaii","_id":"ciph6dk5d004bknz94bapjtne"},{"post_id":"ciph6dk23000iknz9fwdx8x2t","tag_id":"ciph6dk4v003vknz9ghq9risn","_id":"ciph6dk5d004cknz9ps26byva"},{"post_id":"ciph6dk23000iknz9fwdx8x2t","tag_id":"ciph6dk1m0005knz9euorz8ci","_id":"ciph6dk5e004eknz97shylu17"},{"post_id":"ciph6dk25000kknz9d6ooe9nu","tag_id":"ciph6dk4w0040knz9e10texl7","_id":"ciph6dk5e004gknz9qfit5o8e"},{"post_id":"ciph6dk25000kknz9d6ooe9nu","tag_id":"ciph6dk4z0043knz9d3ws7z5v","_id":"ciph6dk5e004hknz9k17xt4wp"},{"post_id":"ciph6dk25000kknz9d6ooe9nu","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk5f004jknz9mrsk7gny"},{"post_id":"ciph6dk25000kknz9d6ooe9nu","tag_id":"ciph6dk5d0046knz9kc0e4jtb","_id":"ciph6dk5f004kknz9mnar0go9"},{"post_id":"ciph6dk25000kknz9d6ooe9nu","tag_id":"ciph6dk5d004aknz9ud993736","_id":"ciph6dk5f004mknz9y5n9uoqm"},{"post_id":"ciph6dk25000kknz9d6ooe9nu","tag_id":"ciph6dk3k001wknz9gvbc3ash","_id":"ciph6dk5f004nknz9qp73j7dl"},{"post_id":"ciph6dk2c000oknz9sej65wti","tag_id":"ciph6dk5e004fknz9lyjak3ha","_id":"ciph6dk5g004pknz9tut9o3jz"},{"post_id":"ciph6dk2c000oknz9sej65wti","tag_id":"ciph6dk5e004iknz9wwwycnwi","_id":"ciph6dk5g004qknz9toh0254n"},{"post_id":"ciph6dk2c000oknz9sej65wti","tag_id":"ciph6dk5f004lknz9qc9kj6xt","_id":"ciph6dk5h004sknz9sn1yxfg3"},{"post_id":"ciph6dk2d000qknz9wxhi48j4","tag_id":"ciph6dk5e004fknz9lyjak3ha","_id":"ciph6dk5h004vknz920qg2vj9"},{"post_id":"ciph6dk2d000qknz9wxhi48j4","tag_id":"ciph6dk5g004rknz9rkh9vnp5","_id":"ciph6dk5h004wknz9c8rtbx4q"},{"post_id":"ciph6dk2d000qknz9wxhi48j4","tag_id":"ciph6dk5f004lknz9qc9kj6xt","_id":"ciph6dk5i004yknz9ixftw4nq"},{"post_id":"ciph6dk2f000uknz96520o3sx","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk5i0050knz96rnf9gic"},{"post_id":"ciph6dk2f000uknz96520o3sx","tag_id":"ciph6dk5g004rknz9rkh9vnp5","_id":"ciph6dk5i0051knz94jp9v7tl"},{"post_id":"ciph6dk2f000uknz96520o3sx","tag_id":"ciph6dk5h004xknz99u3vtyj7","_id":"ciph6dk5j0053knz9ua7zhvbl"},{"post_id":"ciph6dk2h000xknz9emjh83rd","tag_id":"ciph6dk5i004zknz92ib6lmo2","_id":"ciph6dk5j0055knz99xpdih3u"},{"post_id":"ciph6dk2h000xknz9emjh83rd","tag_id":"ciph6dk42002gknz9v7op07zz","_id":"ciph6dk5j0056knz9z2ex7nyj"},{"post_id":"ciph6dk2j0012knz9ikxwho3l","tag_id":"ciph6dk5j0054knz9vjftaugi","_id":"ciph6dk5k0059knz9tojjcf3b"},{"post_id":"ciph6dk2j0012knz9ikxwho3l","tag_id":"ciph6dk2f000sknz9almc74ap","_id":"ciph6dk5k005aknz9jct41osj"},{"post_id":"ciph6dk2j0012knz9ikxwho3l","tag_id":"ciph6dk5j0057knz9nzny5c7a","_id":"ciph6dk5l005cknz9klxfg1ee"},{"post_id":"ciph6dk2p0015knz9hpd9q552","tag_id":"ciph6dk5k0058knz98w5yfkx5","_id":"ciph6dk5m005eknz9p4xj1svw"},{"post_id":"ciph6dk2p0015knz9hpd9q552","tag_id":"ciph6dk2a000mknz9mi5bbaii","_id":"ciph6dk5m005fknz9hyrh3d9f"},{"post_id":"ciph6dk2p0015knz9hpd9q552","tag_id":"ciph6dk3k001wknz9gvbc3ash","_id":"ciph6dk5m005hknz91dy358kt"},{"post_id":"ciph6dk2t0019knz9ovuyltnr","tag_id":"ciph6dk5k0058knz98w5yfkx5","_id":"ciph6dk5o005jknz9c4nkcz0f"},{"post_id":"ciph6dk2t0019knz9ovuyltnr","tag_id":"ciph6dk2a000mknz9mi5bbaii","_id":"ciph6dk5o005kknz96igdz0go"},{"post_id":"ciph6dk2t0019knz9ovuyltnr","tag_id":"ciph6dk3k001wknz9gvbc3ash","_id":"ciph6dk5o005mknz9yuhbik88"},{"post_id":"ciph6dk2x001dknz916kwc210","tag_id":"ciph6dk4w0040knz9e10texl7","_id":"ciph6dk5r005qknz9o37a28at"},{"post_id":"ciph6dk2x001dknz916kwc210","tag_id":"ciph6dk3k001wknz9gvbc3ash","_id":"ciph6dk5r005rknz9nhtjmmun"},{"post_id":"ciph6dk2x001dknz916kwc210","tag_id":"ciph6dk4z0043knz9d3ws7z5v","_id":"ciph6dk5s005tknz9dhu76xvm"},{"post_id":"ciph6dk2x001dknz916kwc210","tag_id":"ciph6dk5k0058knz98w5yfkx5","_id":"ciph6dk5s005uknz9evcduhws"},{"post_id":"ciph6dk32001gknz93s5d8faw","tag_id":"ciph6dk5p005pknz9w67mn7sb","_id":"ciph6dk5s005wknz9kg5zin1x"},{"post_id":"ciph6dk32001gknz93s5d8faw","tag_id":"ciph6dk5r005sknz90z16l0ju","_id":"ciph6dk5s005xknz9nttnwtog"},{"post_id":"ciph6dk36001jknz9j3jusvwz","tag_id":"ciph6dk2a000mknz9mi5bbaii","_id":"ciph6dk5u0060knz93dlgkdkb"},{"post_id":"ciph6dk36001jknz9j3jusvwz","tag_id":"ciph6dk3w002aknz9836s7qma","_id":"ciph6dk5u0061knz9iclf6zhl"},{"post_id":"ciph6dk36001jknz9j3jusvwz","tag_id":"ciph6dk3k001wknz9gvbc3ash","_id":"ciph6dk5v0063knz9vaa2bwdw"},{"post_id":"ciph6dk38001lknz9lh89gb3j","tag_id":"ciph6dk5r005sknz90z16l0ju","_id":"ciph6dk5x0066knz9pb9nxw0f"},{"post_id":"ciph6dk38001lknz9lh89gb3j","tag_id":"ciph6dk5i004zknz92ib6lmo2","_id":"ciph6dk5x0067knz926ppn1m5"},{"post_id":"ciph6dk38001lknz9lh89gb3j","tag_id":"ciph6dk5p005pknz9w67mn7sb","_id":"ciph6dk5x0069knz93nxs7web"},{"post_id":"ciph6dk3a001oknz9pws6leof","tag_id":"ciph6dk2a000mknz9mi5bbaii","_id":"ciph6dk5x006aknz9lblyjxhu"},{"post_id":"ciph6dk3a001oknz9pws6leof","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk5y006cknz9sdnmi4hm"},{"post_id":"ciph6dk3a001oknz9pws6leof","tag_id":"ciph6dk5w0065knz9vbjhia19","_id":"ciph6dk5y006dknz91i5x4oof"},{"post_id":"ciph6dk3c001qknz9jyknjj2r","tag_id":"ciph6dk5x0068knz9at0fhhwa","_id":"ciph6dk5z006fknz92feyy6lo"},{"post_id":"ciph6dk3c001qknz9jyknjj2r","tag_id":"ciph6dk2f000sknz9almc74ap","_id":"ciph6dk5z006gknz9qyhhk9p1"},{"post_id":"ciph6dk3c001qknz9jyknjj2r","tag_id":"ciph6dk5x006bknz9dfmosxg8","_id":"ciph6dk60006iknz9jyndz8n8"},{"post_id":"ciph6dk3h001tknz9pvgmc7z2","tag_id":"ciph6dk42002gknz9v7op07zz","_id":"ciph6dk60006jknz9cd3fxo9k"},{"post_id":"ciph6dk3j001vknz9xv5loc1p","tag_id":"ciph6dk1m0005knz9euorz8ci","_id":"ciph6dk61006mknz9z8gbn8ut"},{"post_id":"ciph6dk3j001vknz9xv5loc1p","tag_id":"ciph6dk5z006hknz9shjuw94s","_id":"ciph6dk61006nknz998ugid2x"},{"post_id":"ciph6dk3j001vknz9xv5loc1p","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk62006pknz9fem26yew"},{"post_id":"ciph6dk3j001vknz9xv5loc1p","tag_id":"ciph6dk5g004rknz9rkh9vnp5","_id":"ciph6dk62006qknz9vgywf22d"},{"post_id":"ciph6dk3n001yknz9ky5xqyzu","tag_id":"ciph6dk5k0058knz98w5yfkx5","_id":"ciph6dk63006sknz9n2afpfy6"},{"post_id":"ciph6dk3n001yknz9ky5xqyzu","tag_id":"ciph6dk3k001wknz9gvbc3ash","_id":"ciph6dk63006tknz9w69ot1tk"},{"post_id":"ciph6dk3n001yknz9ky5xqyzu","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk63006vknz9lo3nihr1"},{"post_id":"ciph6dk3n001yknz9ky5xqyzu","tag_id":"ciph6dk2a000mknz9mi5bbaii","_id":"ciph6dk63006wknz905fl675j"},{"post_id":"ciph6dk3o0021knz9yv0zhp7l","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk63006yknz9lfht91kr"},{"post_id":"ciph6dk3o0021knz9yv0zhp7l","tag_id":"ciph6dk61006oknz9puwm5u1g","_id":"ciph6dk64006zknz9fmgyh0t0"},{"post_id":"ciph6dk3o0021knz9yv0zhp7l","tag_id":"ciph6dk21000fknz9c1ybk6fp","_id":"ciph6dk650071knz91vihcro1"},{"post_id":"ciph6dk3r0025knz9fbccgu2v","tag_id":"ciph6dk62006rknz9uw5602ev","_id":"ciph6dk650072knz9rlc14ge5"},{"post_id":"ciph6dk3r0025knz9fbccgu2v","tag_id":"ciph6dk5e004fknz9lyjak3ha","_id":"ciph6dk650074knz986bsppnu"},{"post_id":"ciph6dk3r0025knz9fbccgu2v","tag_id":"ciph6dk1m0005knz9euorz8ci","_id":"ciph6dk650075knz9vcmkfobs"},{"post_id":"ciph6dk3r0025knz9fbccgu2v","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk650077knz98fu5ulgd"},{"post_id":"ciph6dk3r0025knz9fbccgu2v","tag_id":"ciph6dk5g004rknz9rkh9vnp5","_id":"ciph6dk660078knz9q5calpjl"},{"post_id":"ciph6dk3u0028knz9njpe6n0q","tag_id":"ciph6dk42002gknz9v7op07zz","_id":"ciph6dk66007aknz9ed9u9hma"},{"post_id":"ciph6dk3u0028knz9njpe6n0q","tag_id":"ciph6dk650073knz9bgqto37p","_id":"ciph6dk66007bknz9ykotl30q"},{"post_id":"ciph6dk3u0028knz9njpe6n0q","tag_id":"ciph6dk2f000sknz9almc74ap","_id":"ciph6dk68007dknz9kr2ttrku"},{"post_id":"ciph6dk3u0028knz9njpe6n0q","tag_id":"ciph6dk5x006bknz9dfmosxg8","_id":"ciph6dk68007eknz9r1z7mzy6"},{"post_id":"ciph6dk3w002cknz9zxr4nuit","tag_id":"ciph6dk3k001wknz9gvbc3ash","_id":"ciph6dk69007gknz9rorvrsh2"},{"post_id":"ciph6dk3w002cknz9zxr4nuit","tag_id":"ciph6dk3w002aknz9836s7qma","_id":"ciph6dk69007hknz9erulgudb"},{"post_id":"ciph6dk3w002cknz9zxr4nuit","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk69007jknz9lwnankch"},{"post_id":"ciph6dk41002eknz98j7jt414","tag_id":"ciph6dk62006rknz9uw5602ev","_id":"ciph6dk6c007mknz93lbu0wpk"},{"post_id":"ciph6dk41002eknz98j7jt414","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk6c007nknz9poc44jv2"},{"post_id":"ciph6dk41002eknz98j7jt414","tag_id":"ciph6dk5e004fknz9lyjak3ha","_id":"ciph6dk6c007pknz9zrpfk1zg"},{"post_id":"ciph6dk41002eknz98j7jt414","tag_id":"ciph6dk5g004rknz9rkh9vnp5","_id":"ciph6dk6d007qknz9qi0qopmq"},{"post_id":"ciph6dk41002eknz98j7jt414","tag_id":"ciph6dk4z0043knz9d3ws7z5v","_id":"ciph6dk6d007sknz9cqe80bs3"},{"post_id":"ciph6dk42002hknz9bdleq372","tag_id":"ciph6dk4z0043knz9d3ws7z5v","_id":"ciph6dk6g007vknz94qbpzvyf"},{"post_id":"ciph6dk42002hknz9bdleq372","tag_id":"ciph6dk62006rknz9uw5602ev","_id":"ciph6dk6g007wknz9kmeia84h"},{"post_id":"ciph6dk42002hknz9bdleq372","tag_id":"ciph6dk5e004fknz9lyjak3ha","_id":"ciph6dk6h007yknz99speac45"},{"post_id":"ciph6dk42002hknz9bdleq372","tag_id":"ciph6dk5g004rknz9rkh9vnp5","_id":"ciph6dk6i007zknz9xu1cyyi8"},{"post_id":"ciph6dk42002hknz9bdleq372","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk6i0081knz9co4nz20w"},{"post_id":"ciph6dk45002jknz9jg4zsghx","tag_id":"ciph6dk5e004fknz9lyjak3ha","_id":"ciph6dk6i0082knz9litw9he3"},{"post_id":"ciph6dk47002lknz9zetlwd86","tag_id":"ciph6dk6g007xknz9ld425vdo","_id":"ciph6dk6k0084knz9szzigsig"},{"post_id":"ciph6dk47002lknz9zetlwd86","tag_id":"ciph6dk42002gknz9v7op07zz","_id":"ciph6dk6k0085knz9vopysu8k"},{"post_id":"ciph6dk49002pknz91e7w2no1","tag_id":"ciph6dk48002mknz9skcy2wth","_id":"ciph6dk6l0087knz90lr0fg6s"},{"post_id":"ciph6dk49002pknz91e7w2no1","tag_id":"ciph6dk6i0080knz9t6k44p8b","_id":"ciph6dk6l0088knz9g5gov28k"},{"post_id":"ciph6dk4a002sknz9ishrkps1","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk6m008aknz970rx6rc4"},{"post_id":"ciph6dk4a002sknz9ishrkps1","tag_id":"ciph6dk5g004rknz9rkh9vnp5","_id":"ciph6dk6m008bknz9za1srtif"},{"post_id":"ciph6dk4c002wknz9wwk7mddn","tag_id":"ciph6dk5i004zknz92ib6lmo2","_id":"ciph6dk6m008dknz9v78t3dkp"},{"post_id":"ciph6dk4c002wknz9wwk7mddn","tag_id":"ciph6dk42002gknz9v7op07zz","_id":"ciph6dk6m008eknz9w6e01s3i"},{"post_id":"ciph6dk4c002wknz9wwk7mddn","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk6n008gknz9on41sr3q"},{"post_id":"ciph6dk4c002wknz9wwk7mddn","tag_id":"ciph6dk3k001wknz9gvbc3ash","_id":"ciph6dk6n008hknz9z4iagvfe"},{"post_id":"ciph6dk4e002zknz9ppvh4me0","tag_id":"ciph6dk650073knz9bgqto37p","_id":"ciph6dk6n008iknz93ouzpf0n"},{"post_id":"ciph6dk4e002zknz9ppvh4me0","tag_id":"ciph6dk2f000sknz9almc74ap","_id":"ciph6dk6o008kknz9oivorjpp"},{"post_id":"ciph6dk4j0035knz9k7f233po","tag_id":"ciph6dk6m008cknz92oj5eguc","_id":"ciph6dk6o008lknz9xgssfr2q"},{"post_id":"ciph6dk4j0035knz9k7f233po","tag_id":"ciph6dk6n008fknz990nlgamj","_id":"ciph6dk6p008mknz981qvzek1"},{"post_id":"ciph6dk4q003jknz987jb0xav","tag_id":"ciph6dk5k0058knz98w5yfkx5","_id":"ciph6dk6p008nknz9p8ngbgr4"},{"post_id":"ciph6dk4q003jknz987jb0xav","tag_id":"ciph6dk21000fknz9c1ybk6fp","_id":"ciph6dk6p008oknz91sjnc0r1"},{"post_id":"ciph6dk4q003jknz987jb0xav","tag_id":"ciph6dk2a000mknz9mi5bbaii","_id":"ciph6dk6p008pknz9u7y411pv"},{"post_id":"ciph6dk4q003jknz987jb0xav","tag_id":"ciph6dk3k001wknz9gvbc3ash","_id":"ciph6dk6p008qknz9jy4whx2y"},{"post_id":"ciph6dk7o008rknz9cvz0g2sx","tag_id":"ciph6dk1t0009knz9wqnaogd0","_id":"ciph6dk7s008uknz9pqmgy7ij"},{"post_id":"ciph6dk7o008rknz9cvz0g2sx","tag_id":"ciph6dk2j0011knz96pkbd671","_id":"ciph6dk7s008vknz9jxov4v2v"},{"post_id":"ciph6dk7o008rknz9cvz0g2sx","tag_id":"ciph6dk21000fknz9c1ybk6fp","_id":"ciph6dk7s008wknz9wytam8i5"},{"post_id":"ciph6dk7o008rknz9cvz0g2sx","tag_id":"ciph6dk7r008sknz92ymc2zxf","_id":"ciph6dk7s008xknz9badjg6kh"}],"Tag":[{"name":"async","_id":"ciph6dk1m0005knz9euorz8ci"},{"name":"js","_id":"ciph6dk1t0009knz9wqnaogd0"},{"name":"learning","_id":"ciph6dk21000fknz9c1ybk6fp"},{"name":"node","_id":"ciph6dk2a000mknz9mi5bbaii"},{"name":"command line","_id":"ciph6dk2f000sknz9almc74ap"},{"name":"tips","_id":"ciph6dk2j0011knz96pkbd671"},{"name":"testing","_id":"ciph6dk36001hknz99bghseqb"},{"name":"open source","_id":"ciph6dk3k001wknz9gvbc3ash"},{"name":"npm","_id":"ciph6dk3w002aknz9836s7qma"},{"name":"arch linux","_id":"ciph6dk42002gknz9v7op07zz"},{"name":"meta","_id":"ciph6dk48002mknz9skcy2wth"},{"name":"mdn","_id":"ciph6dk4s003kknz96cfirewf"},{"name":"fs","_id":"ciph6dk4v003vknz9ghq9risn"},{"name":"snippets","_id":"ciph6dk4w0040knz9e10texl7"},{"name":"vim","_id":"ciph6dk4z0043knz9d3ws7z5v"},{"name":"react","_id":"ciph6dk5d0046knz9kc0e4jtb"},{"name":"es6","_id":"ciph6dk5d004aknz9ud993736"},{"name":"neovim","_id":"ciph6dk5e004fknz9lyjak3ha"},{"name":"autocompletion","_id":"ciph6dk5e004iknz9wwwycnwi"},{"name":"dotfiles","_id":"ciph6dk5f004lknz9qc9kj6xt"},{"name":"style","_id":"ciph6dk5g004rknz9rkh9vnp5"},{"name":"crockford","_id":"ciph6dk5h004xknz99u3vtyj7"},{"name":"linux","_id":"ciph6dk5i004zknz92ib6lmo2"},{"name":"git","_id":"ciph6dk5j0054knz9vjftaugi"},{"name":"version control","_id":"ciph6dk5j0057knz9nzny5c7a"},{"name":"hexo","_id":"ciph6dk5k0058knz98w5yfkx5"},{"name":"mailgun","_id":"ciph6dk5p005pknz9w67mn7sb"},{"name":"vps","_id":"ciph6dk5r005sknz90z16l0ju"},{"name":"scraping","_id":"ciph6dk5w0065knz9vbjhia19"},{"name":"awk","_id":"ciph6dk5x0068knz9at0fhhwa"},{"name":"shell","_id":"ciph6dk5x006bknz9dfmosxg8"},{"name":"promises","_id":"ciph6dk5z006hknz9shjuw94s"},{"name":"kyle simpson","_id":"ciph6dk61006oknz9puwm5u1g"},{"name":"linting","_id":"ciph6dk62006rknz9uw5602ev"},{"name":"bash","_id":"ciph6dk650073knz9bgqto37p"},{"name":"pacman","_id":"ciph6dk6g007xknz9ld425vdo"},{"name":"opinion","_id":"ciph6dk6i0080knz9t6k44p8b"},{"name":"rms","_id":"ciph6dk6m008cknz92oj5eguc"},{"name":"free software","_id":"ciph6dk6n008fknz990nlgamj"},{"name":"interview","_id":"ciph6dk7r008sknz92ymc2zxf"}]}}